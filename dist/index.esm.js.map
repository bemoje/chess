{"version":3,"file":"index.esm.js","sources":["../src/AbstractPiece.ts","../src/Bishop.ts","../src/util.ts","../src/coordinates.ts","../src/Board.ts","../src/King.ts","../src/Knight.ts","../src/Move.ts","../src/Pawn.ts","../src/Position.ts","../src/Queen.ts","../src/Rook.ts","../src/Player.ts","../src/Game.ts"],"sourcesContent":["import type { Player } from './Player';\nimport type { Position } from './Position';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\n\nexport abstract class Piece {\n  public player: Player;\n  public index: number;\n  public position: Position | null;\n  public moveCount: number;\n\n  public constructor(player: Player, index: number, position: Position) {\n    this.player = player;\n    this.index = index;\n    this.position = position;\n    this.moveCount = 0;\n    this.player.game.board.setPiece(this);\n  }\n\n  /**\n   * Returns the Game instance that this Piece is associated with.\n   */\n  public get game(): Game {\n    return this.player.game;\n  }\n\n  /**\n   * Returns the class name of the Piece.\n   */\n  public get type(): string {\n    return this.constructor.name;\n  }\n\n  /**\n   * Returns whether or not this Piece has made any moves yet.\n   */\n  public get hasMoved(): boolean {\n    return this.moveCount > 0;\n  }\n\n  /**\n   * Returns the player color of the Player instance that this Piece belongs to.\n   */\n  public get color(): string {\n    return this.player.color;\n  }\n\n  /**\n   * Returns whether this Piece is still on the board.\n   */\n  public get isTaken(): boolean {\n    return this.position === null;\n  }\n\n  /**\n   * Returns an array of Move instances that represent moves made by this Piece.\n   */\n  public get moves(): Move[] {\n    return this.player.game.moves.filter((move) => {\n      return move.piece === this;\n    });\n  }\n\n  /**\n   * Increments the moveCount number property and sets the position property.\n   */\n  public registerMove(move: Move): void {\n    this.moveCount++;\n    this.position = move.to.clone();\n  }\n\n  /**\n   * Sets the position property to null, which means that this Piece is no longer on the board.\n   */\n  public remove(): void {\n    this.position = null;\n  }\n\n  /**\n   * Returns whether there is a 'friendly' Piece at a given Position.\n   */\n  protected isMoveTargetOwnPiece(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    return targetPiece !== null && this.player === targetPiece.player;\n  }\n\n  /**\n   * Returns whether it is this Piece's Player's turn to move.\n   */\n  protected get isOwnTurn(): boolean {\n    return this.game.activePlayer === this.player;\n  }\n\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected abstract getMovePositionsWithinBounds(): Array<\n    Position | Array<Position>\n  >;\n\n  /**\n   * Iterates all valid move Position instances for this Piece.\n   *\n   * @param f - a callback function to invoke for each valid move position. If it returns true, iteration ends.\n   */\n  public forEachValidMovePosition(\n    f: (position: Position) => boolean | void,\n  ): void {\n    if (this.isOwnTurn) {\n      const positions = this.getMovePositionsWithinBounds();\n      for (let i = 0; i < positions.length; i++) {\n        const item = positions[i];\n        if (Array.isArray(item)) {\n          for (let j = 0; j < item.length; j++) {\n            if (item[j] && this.isMoveTargetOwnPiece(item[j])) {\n              if (f(item[j])) {\n                return;\n              }\n            } else {\n              // an own piece is in the way, so all following positions will always be invalid.\n              break;\n            }\n          }\n        } else if (this.isMoveTargetOwnPiece(item)) {\n          if (f(item)) {\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns whether a move to a target position is a castling move.\n   */\n  public isCastleMove(_target: Position): boolean {\n    _target;\n    return false;\n  }\n\n  /**\n   * Returns whether a move to a position is a valid move.\n   */\n  public isValidMove(target: Position): boolean {\n    if (this.isCastleMove(target)) return true;\n    let res = false;\n    this.forEachValidMovePosition((position) => {\n      if (position.compare(target)) {\n        res = true;\n        // end iteration\n        return true;\n      } else return;\n    });\n    return res;\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Bishop extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllDiagonalRecursive() : [];\n  }\n}\n","import type { Position } from './Position';\n\n/**\n * Removes elements of a given array if they do not evaluate to true.\n */\nexport function arrClean(arr: Array<Position | null>): Array<Position> {\n  const res = [];\n  const l = arr.length;\n  for (let i = 0; i < l; i++) {\n    const pos = arr[i];\n    if (pos) {\n      res.push(pos);\n    }\n  }\n  return res;\n}\n\n/**\n * Returns the numeric difference between to numbers.\n */\nexport function numericDifference(n1: number, n2: number): number {\n  const dist = n1 - n2;\n  return dist < 0 ? dist * -1 : dist;\n}\n\n/**\n * Returns an assertion function that expects [string] 'expectedToBe' evaluated by [Function] 'validate'\n */\nexport function createAssertFunction<T>(\n  expectedToBe: string,\n  validate: (arg: T) => boolean,\n): (arg: T, name?: string) => void {\n  const f = function (arg: T, name = 'arg') {\n    if (!validate(arg)) {\n      throw new TypeError(\n        `Expected ${name} to be ${expectedToBe}. ${name}: ${arg}`,\n      );\n    }\n  };\n  Object.defineProperty(f, 'name', {\n    value: validate.name.replace(/^is/, 'assert'),\n  });\n  return f;\n}\n\n/**\n * Returns whether a number is an even number.\n */\nexport function isEven(n: number): boolean {\n  return n % 2 == 0;\n}\n","import { createAssertFunction } from './util';\n\nconst A_CHAR_CODE = 'A'.charCodeAt(0);\n\n/**\n * Converts the first value of an XY-coordinate to A1-notation.\n */\nexport function from_X_to_A(x: number): string {\n  return String.fromCharCode(x + A_CHAR_CODE);\n}\n\n/**\n * Converts the second value of an XY-coordinate to A1-notation.\n */\nexport function from_Y_to_1(y: number): string {\n  return (y + 1).toString();\n}\n\n/**\n * Converts the first character of A1-notation to the first value of an XY-coordinate.\n */\nexport function from_A_to_X(a: string): number {\n  return a.toUpperCase().charCodeAt(0) - A_CHAR_CODE;\n}\n\n/**\n * Converts the second character of A1-notation to the second value of an XY-coordinate.\n */\nexport function from_1_to_Y(n: string): number {\n  return Number(n.charAt(0)) - 1;\n}\n\n/**\n * Converts a XY-coordinate-array to an A1-notation string.\n */\nexport function from_XY_to_A1(pos: Array<number>): string {\n  return from_X_to_A(pos[0]) + from_Y_to_1(pos[1]);\n}\n\n/**\n * Converts an A1-notation string to a XY-coordinate-array.\n */\nexport function from_A1_to_XY(a1: string): Array<number> {\n  return [from_A_to_X(a1.charAt(0)), from_1_to_Y(a1.charAt(1))];\n}\n\n/**\n * Returns whether the argument is a positive integer where 0 <= arg <= 7.\n */\nexport function isValidXYPoint(n: number): boolean {\n  return n >= 0 && n <= 7;\n}\n\n/**\n * Returns whether both points in an XY-coordinate is a positive integer where 0 <= arg <= 7.\n */\nexport function isValidXY(pos: Array<number>): boolean {\n  return isValidXYPoint(pos[0]) && isValidXYPoint(pos[1]);\n}\n\n/**\n * Returns whether a string is valid A1-notation.\n */\nexport function isValidA1(a1: string): boolean {\n  return a1.length === 2 && isValidXY(from_A1_to_XY(a1));\n}\n\n/**\n * Throws a TypeError if the argument is not a valid XY-coordinate point.\n * @see isValidXYPoint\n *\n * @function assertValidXYPoint\n * @throws {TypeError}\n */\nexport const assertValidXYPoint = createAssertFunction(\n  'a positive integer between 0 and 7',\n  isValidXYPoint,\n);\n\n/**\n * Throws a TypeError if the argument is not a valid XY-coordinate.\n * @see isValidXY\n *\n * @function assertValidXY\n * @throws {TypeError}\n */\nexport const assertValidXY = createAssertFunction(\n  'an array containing two positive integers between 0 and 7',\n  isValidXY,\n);\n\n/**\n * Throws a TypeError if the argument is not valid A1-notation.\n * @see isValidA1\n *\n * @function assertValidA1\n * @throws {TypeError}\n */\nexport const assertValidA1 = createAssertFunction(\n  'a valid A1-notation string',\n  isValidA1,\n);\n","import { from_A1_to_XY } from './coordinates';\nimport type { Position } from './Position';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\nimport type { Piece } from './AbstractPiece';\n\nexport class Board {\n  public game: Game;\n  public grid: Array<Array<Piece | null>>;\n\n  public constructor(game: Game) {\n    this.game = game;\n    this.grid = [];\n    let i = 0;\n    while (i < 8) {\n      this.grid.push(new Array(8).fill(null, 0, 7));\n      i++;\n    }\n  }\n\n  /**\n   * Returns the piece at the given XY-coordinates or null if no piece is found there.\n   */\n  public getPieceByXY(x: number, y: number): Piece | null {\n    return this.grid[y][x];\n  }\n\n  /**\n   * Returns the piece at the given Position or null if no piece is found there.\n   */\n  public getPieceByPosition(position: Position): Piece | null {\n    return this.getPieceByXY(position.x, position.y);\n  }\n\n  /**\n   * Returns the piece at the given A1-notation-coordinates or null if no piece is found there.\n   */\n  public getPieceByA1(a1: string): Piece | null {\n    const [x, y] = from_A1_to_XY(a1);\n    return this.getPieceByXY(x, y);\n  }\n\n  /**\n   * Sets a piece to the board.\n   */\n  public setPiece(piece: Piece): void {\n    const pos = piece.position;\n    if (pos) this.grid[pos.y][pos.x] = piece;\n  }\n\n  /**\n   * Removes a piece from the board.\n   * This method does not check legality or whether this action is part of a move in the game.\n   */\n  public removePiece(piece: Piece | null): void {\n    if (piece) {\n      const pos = piece.position;\n      if (pos) this.grid[pos.y][pos.x] = null;\n    }\n  }\n\n  /**\n   * Updates the board instance based on the information contained within a provided Move instance.\n   */\n  public registerMove(move: Move): void {\n    const from = move.from;\n    const to = move.to;\n    const piece = this.grid[from.y][from.x];\n    this.grid[to.y][to.x] = piece;\n    this.grid[from.y][from.x] = null;\n  }\n\n  /**\n   * Updates the board instance based on the information contained within a provided Move instance that is known to make\n   * out a swap (used for castling moves).\n   */\n  public registerSwap(move: Move): void {\n    const from = move.from;\n    const to = move.to;\n    const pieceFrom = this.grid[from.y][from.x];\n    const pieceTo = this.grid[to.y][to.x];\n    this.grid[to.y][to.x] = pieceFrom;\n    this.grid[from.y][from.x] = pieceTo;\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class King extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    return pos.getAllStraightAndDiagonal();\n  }\n\n  /**\n   * Returns whether a move to a target position is a castling move.\n   */\n  public isCastleMove(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    if (!targetPiece) return false;\n    // it is not necessary to check whether the taget piece is an own piece since an enemy piece will never be in the\n    // designated position without having moved, which gets checked.\n    return (\n      targetPiece.type === 'Rook' && !targetPiece.hasMoved && !this.hasMoved\n    );\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Knight extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllKnightMovePositions() : [];\n  }\n}\n","import type { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Move {\n  public piece: Piece;\n  public takes: Piece | null;\n  public from: Position;\n  public to: Position;\n\n  public constructor(piece: Piece, to: Position, takes: Piece | null = null) {\n    const pos = piece.position;\n    if (!pos) {\n      throw new Error('Cannot move a piece that is not on the board.');\n    }\n\n    this.piece = piece;\n    this.takes = takes;\n    this.from = pos.clone();\n    this.to = to.clone();\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Pawn extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const board = this.game.board;\n    const pos = this.position;\n    const res = [];\n\n    if (!pos) {\n      return [];\n    }\n\n    if (this.color === 'white') {\n      const upPos = pos.getUp();\n      if (upPos) {\n        res.push(upPos);\n      }\n\n      const upUpPos = pos.getUpUp();\n      if (upUpPos && !this.hasMoved) {\n        res.push(upUpPos);\n      }\n\n      const upLeftPos = pos.getUpLeft();\n      if (upLeftPos) {\n        const diagLeftPiece = board.getPieceByPosition(upLeftPos);\n        if (diagLeftPiece) {\n          const diagLeftPos = diagLeftPiece.position;\n          if (diagLeftPos && diagLeftPiece.color === 'black') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n\n      const upRightPos = pos.getUpRight();\n      if (upRightPos) {\n        const diagRightPiece = board.getPieceByPosition(upRightPos);\n        if (diagRightPiece) {\n          const diagLeftPos = diagRightPiece.position;\n          if (diagLeftPos && diagRightPiece.color === 'black') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n    } else {\n      const downPos = pos.getDown();\n      if (downPos) {\n        res.push(downPos);\n      }\n\n      const downDownPos = pos.getDownDown();\n      if (downDownPos && !this.hasMoved) {\n        res.push(downDownPos);\n      }\n\n      const downLeftPos = pos.getDownLeft();\n      if (downLeftPos) {\n        const diagLeftPiece = board.getPieceByPosition(downLeftPos);\n        if (diagLeftPiece) {\n          const diagLeftPos = diagLeftPiece.position;\n          if (diagLeftPos && diagLeftPiece.color === 'white') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n\n      const downRightPos = pos.getDownRight();\n      if (downRightPos) {\n        const diagRightPiece = board.getPieceByPosition(downRightPos);\n        if (diagRightPiece) {\n          const diagLeftPos = diagRightPiece.position;\n          if (diagLeftPos && diagRightPiece.color === 'white') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n    }\n    return res;\n  }\n}\n","import { from_A1_to_XY, from_XY_to_A1, assertValidXY } from './coordinates';\nimport { arrClean } from './util';\n\nexport class Position {\n  public x: number;\n  public y: number;\n  /**\n   * Returns a new Position instance based on A1-notation input.\n   */\n  public static fromA1(a1: string): Position {\n    const xy = from_A1_to_XY(a1);\n    return new Position(xy[0], xy[1]);\n  }\n\n  /**\n   * @param x - a positive integer between 0 and 7 both inclusive.\n   * @param y - a positive integer between 0 and 7 both inclusive.\n   */\n  public constructor(x: number, y: number, skipValidation = false) {\n    if (!skipValidation) {\n      assertValidXY([x, y], 'x and y');\n    }\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Returns the board position in A1-notation.\n   */\n  public get A1(): string {\n    return from_XY_to_A1([this.x, this.y]);\n  }\n\n  /**\n   * Deep-equality-compares the Position instance to another Position instance.\n   */\n  public compare(position: Position): boolean {\n    return this.x === position.x && this.y === position.y;\n  }\n\n  /**\n   * Returns a clone of the instance.\n   * Out of bounds -validation is skipped.\n   */\n  public clone(): Position {\n    return new Position(this.x, this.y, true);\n  }\n\n  /**\n   * Returns the instance as a normal array.\n   */\n  public toArray(): Array<number> {\n    return [this.x, this.y];\n  }\n\n  /**\n   * Modulates the XY-position coordinate and returns a new Position instance equivalent to it, or null if that position\n   * is out of bounds of the board.\n   */\n  private getModulation(xBy: number, yBy: number): Position | null {\n    try {\n      return new Position(this.x + xBy, this.y + yBy);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 1 from the position on the board that this instance describes.\n   */\n  public getUp(): Position | null {\n    return this.getModulation(0, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 1 from the position on the board that this instance describes.\n   */\n  public getDown(): Position | null {\n    return this.getModulation(0, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved left by 1 from the position on the board that this instance describes.\n   */\n  public getLeft(): Position | null {\n    return this.getModulation(-1, 0);\n  }\n\n  /**\n   * Returns a new Position instance that is moved right by 1 from the position on the board that this instance describes.\n   */\n  public getRight(): Position | null {\n    return this.getModulation(1, 0);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 1 and left by 1 from the position on the board that this instance describes.\n   */\n  public getUpLeft(): Position | null {\n    return this.getModulation(-1, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 1 and right by 1 from the position on the board that this instance describes.\n   */\n  public getUpRight(): Position | null {\n    return this.getModulation(1, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 1 and left by 1 from the position on the board that this instance describes.\n   */\n  public getDownLeft(): Position | null {\n    return this.getModulation(-1, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 1 and right by 1 from the position on the board that this instance describes.\n   */\n  public getDownRight(): Position | null {\n    return this.getModulation(1, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 2 from the position on the board that this instance describes.\n   */\n  public getUpUp(): Position | null {\n    return this.getModulation(0, 2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 2 from the position on the board that this instance describes.\n   */\n  public getDownDown(): Position | null {\n    return this.getModulation(0, -2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 2 and left by 1 from the position on the board that this instance describes.\n   */\n  public getUpUpLeft(): Position | null {\n    return this.getModulation(-1, 2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 2 and right by 1 from the position on the board that this instance describes.\n   */\n  public getUpUpRight(): Position | null {\n    return this.getModulation(1, 2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 2 and left by 1 from the position on the board that this instance describes.\n   */\n  public getDownDownLeft(): Position | null {\n    return this.getModulation(-1, -2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 2 and right by 1 from the position on the board that this instance describes.\n   */\n  public getDownDownRight(): Position | null {\n    return this.getModulation(1, -2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved left by 2 and up by 1 from the position on the board that this instance describes.\n   */\n  public getLeftLeftUp(): Position | null {\n    return this.getModulation(-2, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved left by 2 and up by 1 from the position on the board that this instance describes.\n   */\n  public getLeftLeftDown(): Position | null {\n    return this.getModulation(-2, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved right by 2 and up by 1 from the position on the board that this instance describes.\n   */\n  public getRightRightUp(): Position | null {\n    return this.getModulation(2, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved right by 2 and down by 1 from the position on the board that this instance describes.\n   */\n  public getRightRightDown(): Position | null {\n    return this.getModulation(2, -1);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all straight (horizontal and vertical) directions.\n   */\n  public getAllStraight(): Array<Position> {\n    return arrClean([\n      this.getUp(),\n      this.getDown(),\n      this.getLeft(),\n      this.getRight(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all diagonal directions.\n   */\n  public getAllDiagonal(): Array<Position> {\n    return arrClean([\n      this.getUpLeft(),\n      this.getUpRight(),\n      this.getDownLeft(),\n      this.getDownRight(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all straight (horizontal and vertical) and diagonal directions.\n   */\n  public getAllStraightAndDiagonal(): Array<Position> {\n    return [...this.getAllStraight(), ...this.getAllDiagonal()];\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved one time equivalent of all legal knight-piece moves.\n   */\n  public getAllKnightMovePositions(): Array<Position> {\n    return arrClean([\n      this.getUpUpLeft(),\n      this.getUpUpRight(),\n      this.getDownDownLeft(),\n      this.getDownDownRight(),\n      this.getLeftLeftUp(),\n      this.getLeftLeftDown(),\n      this.getRightRightUp(),\n      this.getRightRightDown(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by a provided modulator function recursively until the\n   * modulator's returned Position instance becomes out of bounds of the board.\n   */\n  private getRecursive(modulator: () => Position | null): Array<Position> {\n    const res = [];\n    let pos: Position | null;\n    pos = this;\n    while ((pos = modulator.call(pos))) {\n      res.push(pos);\n    }\n    return res;\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getUpRecursive(): Array<Position> {\n    return this.getRecursive(this.getUp);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getDownRecursive(): Array<Position> {\n    return this.getRecursive(this.getDown);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving left by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving right by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 and left by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getUpLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getUpLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 and right by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getUpRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getUpRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 and left by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getDownLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getDownLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 and right by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getDownRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getDownRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all straight\n   * (horizontal and vertical) directions from the position on the board that this instance describes until the\n   * resulting Position instance becomes out of bounds of the board.\n   */\n  public getAllStraightRecursive(): Array<Array<Position>> {\n    return [\n      this.getUpRecursive(),\n      this.getDownRecursive(),\n      this.getLeftRecursive(),\n      this.getRightRecursive(),\n    ];\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all diagonal\n   * directions. from the position on the board that this instance describes until the resulting Position instance\n   * becomes out of bounds of the board.\n   */\n  public getAllDiagonalRecursive(): Array<Array<Position>> {\n    return [\n      this.getUpLeftRecursive(),\n      this.getUpRightRecursive(),\n      this.getDownLeftRecursive(),\n      this.getDownRightRecursive(),\n    ];\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all straight\n   * (horizontal and vertical) and diagonal directions from the position on the board that this instance describes until\n   * the resulting Position instance becomes out of bounds of the board.\n   */\n  public getAllStraightAndDiagonalRecursive(): Array<Array<Position>> {\n    return [\n      ...this.getAllStraightRecursive(),\n      ...this.getAllDiagonalRecursive(),\n    ];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Queen extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllStraightAndDiagonalRecursive() : [];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Rook extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    return pos.getAllStraightRecursive();\n  }\n\n  /**\n   * Returns whether a move to a target position is a castling move.\n   */\n  public isCastleMove(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    if (!targetPiece) return false;\n    // it is not necessary to check whether the taget piece is an own piece since an enemy piece will never be in the\n    // designated position without having moved, which gets checked.\n    return (\n      targetPiece.type === 'King' && !targetPiece.hasMoved && !this.hasMoved\n    );\n  }\n}\n","import { Position } from './Position';\nimport { Pawn } from './Pawn';\nimport { Knight } from './Knight';\nimport { Bishop } from './Bishop';\nimport { Queen } from './Queen';\nimport { Rook } from './Rook';\nimport { King } from './King';\nimport type { Piece } from './AbstractPiece';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\n\nexport class Player {\n  public game: Game;\n  public color: string;\n  public pieces: Piece[];\n\n  public constructor(game: Game, color: string) {\n    this.game = game;\n    this.color = color;\n\n    let row1: string, row2: string;\n    if (color === 'white') {\n      row1 = '1';\n      row2 = '2';\n    } else if (color === 'black') {\n      row1 = '8';\n      row2 = '7';\n    } else {\n      throw new Error('Invalid color');\n    }\n\n    this.pieces = [\n      new King(this, 0, Position.fromA1('E' + row1)),\n      new Queen(this, 1, Position.fromA1('D' + row1)),\n      new Bishop(this, 2, Position.fromA1('C' + row1)),\n      new Bishop(this, 3, Position.fromA1('F' + row1)),\n      new Knight(this, 4, Position.fromA1('B' + row1)),\n      new Knight(this, 5, Position.fromA1('G' + row1)),\n      new Rook(this, 6, Position.fromA1('A' + row1)),\n      new Rook(this, 7, Position.fromA1('H' + row1)),\n      new Pawn(this, 8, Position.fromA1('A' + row2)),\n      new Pawn(this, 9, Position.fromA1('B' + row2)),\n      new Pawn(this, 10, Position.fromA1('C' + row2)),\n      new Pawn(this, 11, Position.fromA1('D' + row2)),\n      new Pawn(this, 12, Position.fromA1('E' + row2)),\n      new Pawn(this, 13, Position.fromA1('F' + row2)),\n      new Pawn(this, 14, Position.fromA1('G' + row2)),\n      new Pawn(this, 15, Position.fromA1('H' + row2)),\n    ];\n  }\n\n  /**\n   * Returns an array of Move instances that describe moves of this Piece.\n   */\n  public get moves(): Move[] {\n    return this.game.moves.filter((move) => {\n      return move.piece.player === this;\n    });\n  }\n}\n","import { Board } from './Board';\nimport { Player } from './Player';\nimport { Move } from './Move';\nimport { isEven } from './util';\nimport type { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Game {\n  public board: Board;\n  public white: Player;\n  public black: Player;\n  public moves: Array<Move>;\n\n  public constructor() {\n    this.board = new Board(this);\n    this.white = new Player(this, 'white');\n    this.black = new Player(this, 'black');\n    this.moves = [];\n  }\n\n  /**\n   * Returns whether it is white player's turn to move.\n   */\n  public get isWhitesTurnToMove(): boolean {\n    return isEven(this.moves.length);\n  }\n\n  /**\n   * Returns whether it is black player's turn to move.\n   */\n  public get isBlacksTurnToMove(): boolean {\n    return !isEven(this.moves.length);\n  }\n\n  /**\n   * Returns whether it is black player's turn to move.\n   */\n  public get activePlayer(): Player {\n    return this.isWhitesTurnToMove ? this.white : this.black;\n  }\n\n  /**\n   * Iterate each piece on the board.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   */\n  public forEachPiece(f: (piece?: Piece) => boolean | void): void {\n    const w = this.white.pieces;\n    const b = this.black.pieces;\n    for (let i = 0; i < 16; i++) {\n      if (f(w[i]) === true || f(b[i]) === true) {\n        return;\n      }\n    }\n  }\n\n  /**\n   * Iterate each white piece on the board.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   */\n  public forEachWhitePiece(f: (piece?: Piece) => boolean | void): void {\n    const w = this.white.pieces;\n    for (let i = 0; i < 16; i++) {\n      if (f(w[i]) === true) {\n        return;\n      }\n    }\n  }\n\n  /**\n   * Iterate each black piece on the board.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   */\n  public forEachBlackPiece(f: (piece?: Piece) => boolean | void): void {\n    const b = this.black.pieces;\n    for (let i = 0; i < 16; i++) {\n      if (f(b[i]) === true) {\n        return;\n      }\n    }\n  }\n\n  /**\n   * Iterate each piece on the board belonging to the player whose turn it is to move.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   */\n  public forEachActivePlayerPiece(f: (piece?: Piece) => boolean | void): void {\n    return this.isWhitesTurnToMove\n      ? this.forEachWhitePiece(f)\n      : this.forEachBlackPiece(f);\n  }\n\n  /**\n   * Moves a piece on the board.\n   * If the target position already has a piece belonging to the opposing player, it is removed from the board.\n   *\n   * @param piece - The Piece to move.\n   * @param position - The Position to move to.\n   * @param skipValidation - skips validation of the move's legality according to the rules of the game. This is used\n   * internally for performance reasons when cloning a game, repeating the moves that were previously validated.\n   *\n   * @throws {Error} on invalid move, unless `skipValidation` is true.\n   */\n  public makeMove(\n    piece: Piece,\n    position: Position,\n    skipValidation?: boolean,\n  ): void {\n    if (skipValidation || piece.isValidMove(position)) {\n      const targetPiece = piece.game.board.getPieceByPosition(position);\n      let move: Move;\n      if (piece.isCastleMove(position)) {\n        move = new Move(piece, position);\n        this.board.registerSwap(move);\n        if (targetPiece) {\n          targetPiece.registerMove(new Move(targetPiece, move.from));\n        }\n      } else {\n        move = new Move(piece, position, targetPiece);\n        this.board.registerMove(move);\n        if (targetPiece) {\n          targetPiece.remove();\n        }\n      }\n      piece.registerMove(move);\n      this.moves.push(move);\n    } else {\n      throw new Error('Invalid move.');\n    }\n  }\n\n  /**\n   * Returns a deep clone of the game instance.\n   */\n  public clone(): Game {\n    const game = new Game();\n    const w = game.white.pieces;\n    const b = game.black.pieces;\n    const moves = this.moves;\n    const l = moves.length;\n    for (let piece, i = 0; i < l; i++) {\n      piece = moves[i].piece;\n      game.makeMove(\n        (piece.color === 'white' ? w : b)[piece.index],\n        moves[i].to.clone(),\n        true,\n      );\n    }\n    return game;\n  }\n}\n"],"names":[],"mappings":"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"}