{"version":3,"file":"index.js","sources":["../src/AbstractPiece.ts","../src/Bishop.ts","../src/util.ts","../src/coordinates.ts","../src/Board.ts","../src/Position.ts","../src/Pawn.ts","../src/Knight.ts","../src/Queen.ts","../src/Rook.ts","../src/King.ts","../src/Player.ts","../src/Move.ts","../src/Game.ts"],"sourcesContent":["import type { Player } from './Player';\nimport type { Position } from './Position';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\n\nexport abstract class Piece {\n  player: Player;\n  position: Position | null;\n  moves: Array<Move>;\n\n  constructor(player: Player, position: Position) {\n    this.player = player;\n    this.position = position;\n    this.moves = [];\n  }\n\n  get game(): Game {\n    return this.player.game;\n  }\n\n  get type(): string {\n    return this.constructor.name;\n  }\n\n  get hasMoved(): boolean {\n    return this.moves.length > 0;\n  }\n\n  get color(): string {\n    return this.player.color;\n  }\n\n  registerMove(move: Move): void {\n    this.moves.push(move);\n    this.position = move.to.clone();\n  }\n\n  remove(): void {\n    this.position = null;\n  }\n\n  protected isMoveTargetOwnPiece(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    return targetPiece !== null && this.player === targetPiece.player;\n  }\n\n  /**\n   * Returns whether a move to a position is a valid move.\n   */\n  protected isValidMove(target: Position): boolean {\n    return this.isMoveTargetOwnPiece(target);\n  }\n\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected abstract getMovePositionsWithinBounds(): Array<\n    Position | Array<Position>\n  >;\n\n  /**\n   * Returns a Position array with all valid moves.\n   */\n  getValidMovePositions(): Array<Position> {\n    return this.getMovePositionsWithinBounds().reduce((res, item) => {\n      if (Array.isArray(item)) {\n        for (const subItem of item) {\n          if (this.isValidMove(subItem)) res.push(subItem);\n          else break;\n        }\n      } else if (this.isValidMove(item)) {\n        res.push(item);\n      }\n      return res;\n    }, []);\n  }\n\n  isValidMovePosition(target: Position): boolean {\n    return !!this.getValidMovePositions().find((position: Position) => {\n      return position.compare(target);\n    });\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Bishop extends Piece {\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllDiagonalRecursive() : [];\n  }\n}\n","/**\n * Removes elements of a given array if they do not evaluate to true.\n */\nexport function arrClean(arr: Array<any>): Array<any> {\n  const res = [];\n  const l = arr.length;\n  for (let i = 0; i < l; i++) {\n    if (arr[i]) {\n      res.push(arr[i]);\n    }\n  }\n  return res;\n}\n\n/**\n * Returns the numeric difference between to numbers.\n */\nexport function numericDifference(n1: number, n2: number): number {\n  const dist = n1 - n2;\n  return dist < 0 ? dist * -1 : dist;\n}\n\n/**\n * Returns an assertion function that expects [string] 'expectedToBe' evaluated by [Function] 'validate'\n */\nexport function createAssertFunction(\n  expectedToBe: string,\n  validate: (arg: any) => boolean,\n): (arg: any, name?: string) => void {\n  const f = function (arg: any, name = 'arg') {\n    if (!validate(arg)) {\n      throw new TypeError(\n        `Expected ${name} to be ${expectedToBe}. ${name}: ${arg}`,\n      );\n    }\n  };\n  Object.defineProperty(f, 'name', {\n    value: validate.name.replace(/^is/, 'assert'),\n  });\n  return f;\n}\n","import { createAssertFunction } from './util';\nimport type { Position } from './Position';\n\nconst A_CHAR_CODE = 'A'.charCodeAt(0);\n\n/**\n * Converts the first value of an XY-coordinate to A1-notation.\n */\nexport function from_X_to_A(x: number): string {\n  return String.fromCharCode(x + A_CHAR_CODE);\n}\n\n/**\n * Converts the second value of an XY-coordinate to A1-notation.\n */\nexport function from_Y_to_1(y: number): string {\n  return (y + 1).toString();\n}\n\n/**\n * Converts the first character of A1-notation to the first value of an XY-coordinate.\n */\nexport function from_A_to_X(a: string): number {\n  return a.toUpperCase().charCodeAt(0) - A_CHAR_CODE;\n}\n\n/**\n * Converts the second character of A1-notation to the second value of an XY-coordinate.\n */\nexport function from_1_to_Y(n: string): number {\n  return Number(n.charAt(0)) - 1;\n}\n\n/**\n * Converts a XY-coordinate-array or a Position type (extends Array) to an A1-notation string.\n */\nexport function from_XY_to_A1(xy: Array<number> | Position): string {\n  return from_X_to_A(xy[0]) + from_Y_to_1(xy[1]);\n}\n\n/**\n * Converts an A1-notation string to a XY-coordinate-array.\n */\nexport function from_A1_to_XY(a1: string): Array<number> {\n  return [from_A_to_X(a1.charAt(0)), from_1_to_Y(a1.charAt(1))];\n}\n\n/**\n * Returns whether the argument is a positive integer where 0 <= arg <= 7.\n */\nexport function isValidXYPoint(n: number): boolean {\n  return n >= 0 && n <= 7;\n}\n\n/**\n * Returns whether both points in an XY-coordinate is a positive integer where 0 <= arg <= 7.\n */\nexport function isValidXY(coordinate: Array<number> | Position): boolean {\n  return isValidXYPoint(coordinate[0]) && isValidXYPoint(coordinate[1]);\n}\n\n/**\n * Returns whether a string is valid A1-notation.\n */\nexport function isValidA1(a1: string): boolean {\n  return a1.length === 2 && isValidXY(from_A1_to_XY(a1));\n}\n\n/**\n * Throws a TypeError if the argument is not a valid XY-coordinate point.\n * @see isValidXYPoint\n *\n * @function assertValidXYPoint\n * @throws {TypeError}\n */\nexport const assertValidXYPoint = createAssertFunction(\n  'a positive integer between 0 and 7',\n  isValidXYPoint,\n);\n\n/**\n * Throws a TypeError if the argument is not a valid XY-coordinate.\n * @see isValidXY\n *\n * @function assertValidXY\n * @throws {TypeError}\n */\nexport const assertValidXY = createAssertFunction(\n  'an array containing two positive integers between 0 and 7',\n  isValidXY,\n);\n\n/**\n * Throws a TypeError if the argument is not valid A1-notation.\n * @see isValidA1\n *\n * @function assertValidA1\n * @throws {TypeError}\n */\nexport const assertValidA1 = createAssertFunction(\n  'a valid A1-notation string',\n  isValidA1,\n);\n","import { from_A1_to_XY } from './coordinates';\nimport type { Position } from './Position';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\nimport type { Piece } from './AbstractPiece';\n\nexport class Board extends Array {\n  game: Game;\n\n  constructor(game: Game) {\n    super(8);\n\n    this.game = game;\n\n    let i = 0;\n    while (i < 8) {\n      this[i] = new Array(8).fill(null, 0, 7);\n      i++;\n    }\n  }\n\n  registerMove(move: Move): void {\n    const currPos = move.from;\n    const newPos = move.to;\n    const piece = this[currPos.y][currPos.x];\n    this[newPos.y][newPos.x] = piece;\n    this[currPos.y][currPos.x] = null;\n  }\n\n  removePiece(piece: Piece): void {\n    const pos = piece.position;\n    if (pos) this[pos.y][pos.x] = null;\n  }\n\n  getPieceByXY(x: number, y: number): Piece | null {\n    return this[y][x];\n  }\n\n  getPieceByA1(a1: string): Piece | null {\n    const [x, y] = from_A1_to_XY(a1);\n    return this.getPieceByXY(x, y);\n  }\n\n  getPieceByPosition(position: Position): Piece | null {\n    return this.getPieceByXY(position.x, position.y);\n  }\n\n  clone(game: Game = this.game): Board {\n    const board = new Board(game);\n    let i = 0;\n    while (i < 8) {\n      let j = 0;\n      while (j < 8) {\n        board[i][j] = this[i][j];\n        j++;\n      }\n      i++;\n    }\n    return board;\n  }\n}\n","import { from_A1_to_XY, from_XY_to_A1, assertValidXY } from './coordinates';\nimport { arrClean } from './util';\n\nexport class Position extends Array {\n  /**\n   * Returns a new Position instance based on A1-notation input.\n   */\n  static fromA1Notation(a1: string): Position {\n    const xy = from_A1_to_XY(a1);\n    return new Position(xy[0], xy[1]);\n  }\n\n  /**\n   * @param x - a positive integer between 0 and 7 both inclusive.\n   * @param y - a positive integer between 0 and 7 both inclusive.\n   */\n  constructor(x: number, y: number, _skipValidation = false) {\n    if (!_skipValidation) {\n      assertValidXY([x, y], 'x and y');\n    }\n    super(2);\n    this[0] = x;\n    this[1] = y;\n  }\n\n  /**\n   * Returns the first value of the XY-point that the instance describes.\n   */\n  get x(): number {\n    return this[0];\n  }\n\n  /**\n   * Returns the second value of the XY-point that the instance describes.\n   */\n  get y(): number {\n    return this[1];\n  }\n\n  /**\n   * Returns the board position in A1-notation.\n   */\n  get A1(): string {\n    return from_XY_to_A1([this.x, this.y]);\n  }\n\n  /**\n   * Deep-equality-compares the Position instance to another Position instance.\n   */\n  compare(position: Position): boolean {\n    return this.x === position.x && this.y === position.y;\n  }\n\n  /**\n   * Returns a clone of the instance.\n   * Out of bounds -validation is skipped.\n   */\n  clone(): Position {\n    return new Position(this.x, this.y, true);\n  }\n\n  /**\n   * Returns the instance as a normal array.\n   */\n  toArray(): Array<number> {\n    return [this.x, this.y];\n  }\n\n  /**\n   * Modulates the XY-position coordinate and returns a new Position instance equivalent to it.\n   */\n  private getModulation(xBy: number, yBy: number): Position | null {\n    try {\n      return new Position(this.x + xBy, this.y + yBy);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 1 from the position on the board that this instance describes.\n   */\n  getUp(): Position | null {\n    return this.getModulation(0, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 1 from the position on the board that this instance describes.\n   */\n  getDown(): Position | null {\n    return this.getModulation(0, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved left by 1 from the position on the board that this instance describes.\n   */\n  getLeft(): Position | null {\n    return this.getModulation(-1, 0);\n  }\n\n  /**\n   * Returns a new Position instance that is moved right by 1 from the position on the board that this instance describes.\n   */\n  getRight(): Position | null {\n    return this.getModulation(1, 0);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 1 and left by 1 from the position on the board that this instance describes.\n   */\n  getUpLeft(): Position | null {\n    return this.getModulation(-1, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 1 and right by 1 from the position on the board that this instance describes.\n   */\n  getUpRight(): Position | null {\n    return this.getModulation(1, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 1 and left by 1 from the position on the board that this instance describes.\n   */\n  getDownLeft(): Position | null {\n    return this.getModulation(-1, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 1 and right by 1 from the position on the board that this instance describes.\n   */\n  getDownRight(): Position | null {\n    return this.getModulation(1, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 2 from the position on the board that this instance describes.\n   */\n  getUpUp(): Position | null {\n    return this.getModulation(0, 2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 2 from the position on the board that this instance describes.\n   */\n  getDownDown(): Position | null {\n    return this.getModulation(0, -2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 2 and left by 1 from the position on the board that this instance describes.\n   */\n  getUpUpLeft(): Position | null {\n    return this.getModulation(-1, 2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 2 and right by 1 from the position on the board that this instance describes.\n   */\n  getUpUpRight(): Position | null {\n    return this.getModulation(1, 2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 2 and left by 1 from the position on the board that this instance describes.\n   */\n  getDownDownLeft(): Position | null {\n    return this.getModulation(-1, -2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 2 and right by 1 from the position on the board that this instance describes.\n   */\n  getDownDownRight(): Position | null {\n    return this.getModulation(1, -2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved left by 2 and up by 1 from the position on the board that this instance describes.\n   */\n  getLeftLeftUp(): Position | null {\n    return this.getModulation(-2, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved left by 2 and up by 1 from the position on the board that this instance describes.\n   */\n  getLeftLeftDown(): Position | null {\n    return this.getModulation(-2, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved right by 2 and up by 1 from the position on the board that this instance describes.\n   */\n  getRightRightUp(): Position | null {\n    return this.getModulation(2, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved right by 2 and down by 1 from the position on the board that this instance describes.\n   */\n  getRightRightDown(): Position | null {\n    return this.getModulation(2, -1);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all straight (horizontal and vertical) directions.\n   */\n  getAllStraight(): Array<Position> {\n    return arrClean([\n      this.getUp(),\n      this.getDown(),\n      this.getLeft(),\n      this.getRight(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all diagonal directions.\n   */\n  getAllDiagonal(): Array<Position> {\n    return arrClean([\n      this.getUpLeft(),\n      this.getUpRight(),\n      this.getDownLeft(),\n      this.getDownRight(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all straight (horizontal and vertical) and diagonal directions.\n   */\n  getAllStraightAndDiagonal(): Array<Position> {\n    return [...this.getAllStraight(), ...this.getAllDiagonal()];\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved one time equivalent of all legal knight-piece moves.\n   */\n  getAllKnightMovePositions(): Array<Position> {\n    return arrClean([\n      this.getUpUpLeft(),\n      this.getUpUpRight(),\n      this.getDownDownLeft(),\n      this.getDownDownRight(),\n      this.getLeftLeftUp(),\n      this.getLeftLeftDown(),\n      this.getRightRightUp(),\n      this.getRightRightDown(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by a provided modulator function recursively until the\n   * modulator's returned Position instance becomes out of bounds of the board.\n   */\n  private getRecursive(modulator: () => Position | null): Array<Position> {\n    const res = [];\n    let pos: Position | null;\n    pos = this;\n    while ((pos = modulator.call(pos))) {\n      res.push(pos);\n    }\n    return res;\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  getUpRecursive(): Array<Position> {\n    return this.getRecursive(this.getUp);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  getDownRecursive(): Array<Position> {\n    return this.getRecursive(this.getDown);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving left by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  getLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving right by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  getRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 and left by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  getUpLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getUpLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 and right by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  getUpRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getUpRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 and left by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  getDownLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getDownLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 and right by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  getDownRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getDownRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all straight\n   * (horizontal and vertical) directions from the position on the board that this instance describes until the\n   * resulting Position instance becomes out of bounds of the board.\n   */\n  getAllStraightRecursive(): Array<Array<Position>> {\n    return [\n      this.getUpRecursive(),\n      this.getDownRecursive(),\n      this.getLeftRecursive(),\n      this.getRightRecursive(),\n    ];\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all diagonal\n   * directions. from the position on the board that this instance describes until the resulting Position instance\n   * becomes out of bounds of the board.\n   */\n  getAllDiagonalRecursive(): Array<Array<Position>> {\n    return [\n      this.getUpLeftRecursive(),\n      this.getUpRightRecursive(),\n      this.getDownLeftRecursive(),\n      this.getDownRightRecursive(),\n    ];\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all straight\n   * (horizontal and vertical) and diagonal directions from the position on the board that this instance describes until\n   * the resulting Position instance becomes out of bounds of the board.\n   */\n  getAllStraightAndDiagonalRecursive(): Array<Array<Position>> {\n    return [\n      ...this.getAllStraightRecursive(),\n      ...this.getAllDiagonalRecursive(),\n    ];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Pawn extends Piece {\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    const res = [];\n\n    if (this.color === 'white') {\n      const upPos = pos.getUp();\n      if (upPos) {\n        res.push(upPos);\n      }\n\n      const upUpPos = pos.getUpUp();\n      if (upUpPos && !this.hasMoved) {\n        res.push(upUpPos);\n      }\n\n      const upLeftPos = pos.getUpLeft();\n      if (upLeftPos) {\n        const diagLeftPiece = this.game.board.getPieceByPosition(upLeftPos);\n        if (diagLeftPiece) {\n          const diagLeftPos = diagLeftPiece.position;\n          if (diagLeftPos && diagLeftPiece.color === 'black') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n\n      const upRightPos = pos.getUpRight();\n      if (upRightPos) {\n        const diagRightPiece = this.game.board.getPieceByPosition(upRightPos);\n        if (diagRightPiece) {\n          const diagLeftPos = diagRightPiece.position;\n          if (diagLeftPos && diagRightPiece.color === 'black') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n    } else {\n      const downPos = pos.getDown();\n      if (downPos) {\n        res.push(downPos);\n      }\n\n      const downDownPos = pos.getDownDown();\n      if (downDownPos && !this.hasMoved) {\n        res.push(downDownPos);\n      }\n\n      const downLeftPos = pos.getDownLeft();\n      if (downLeftPos) {\n        const diagLeftPiece = this.game.board.getPieceByPosition(downLeftPos);\n        if (diagLeftPiece) {\n          const diagLeftPos = diagLeftPiece.position;\n          if (diagLeftPos && diagLeftPiece.color === 'white') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n\n      const downRightPos = pos.getDownRight();\n      if (downRightPos) {\n        const diagRightPiece = this.game.board.getPieceByPosition(downRightPos);\n        if (diagRightPiece) {\n          const diagLeftPos = diagRightPiece.position;\n          if (diagLeftPos && diagRightPiece.color === 'white') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n    }\n    return res;\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Knight extends Piece {\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllKnightMovePositions() : [];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Queen extends Piece {\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllStraightAndDiagonalRecursive() : [];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport { Position } from './Position';\n\nexport class Rook extends Piece {\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    const res = pos.getAllStraightRecursive();\n    if (this.color === 'white') {\n      res.push(Position.fromA1Notation('D1'));\n    } else {\n      res.push(Position.fromA1Notation('D7'));\n    }\n    return res;\n  }\n\n  protected isValidMove(target: Position): boolean {\n    return this.isMoveTargetOwnPiece(target)\n      ? this.isValidCastleMove(target)\n      : true;\n  }\n\n  private isValidCastleMove(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    return targetPiece\n      ? targetPiece.type === 'King' && !targetPiece.hasMoved && !this.hasMoved\n      : false;\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport { Position } from './Position';\n\nexport class King extends Piece {\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    const res = pos.getAllStraightAndDiagonal();\n    if (this.color === 'white') {\n      res.push(Position.fromA1Notation('A1'), Position.fromA1Notation('H1'));\n    } else {\n      res.push(Position.fromA1Notation('A7'), Position.fromA1Notation('H7'));\n    }\n    return res;\n  }\n\n  protected isValidMove(target: Position): boolean {\n    return this.isMoveTargetOwnPiece(target)\n      ? this.isValidCastleMove(target)\n      : true;\n  }\n\n  private isValidCastleMove(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    return targetPiece\n      ? targetPiece.type === 'Rook' && !targetPiece.hasMoved && !this.hasMoved\n      : false;\n  }\n}\n","import { Position } from './Position';\nimport { Pawn } from './Pawn';\nimport { Knight } from './Knight';\nimport { Bishop } from './Bishop';\nimport { Queen } from './Queen';\nimport { Rook } from './Rook';\nimport { King } from './King';\nimport type { Piece } from './AbstractPiece';\nimport type { Game } from './Game';\n\nexport class Player {\n  game: Game;\n  color: string;\n  pieces: Array<Piece>;\n\n  constructor(game: Game, color: string) {\n    this.game = game;\n    this.color = color;\n\n    let row1: string, row2: string;\n\n    if (color === 'white') {\n      row1 = '1';\n      row2 = '2';\n    } else if (color === 'black') {\n      row1 = '8';\n      row2 = '7';\n    } else {\n      throw new Error('Invalid color');\n    }\n\n    const pos = Position.fromA1Notation;\n\n    this.pieces = [\n      new King(this, pos('E' + row1)),\n      new Queen(this, pos('D' + row1)),\n      new Bishop(this, pos('C' + row1)),\n      new Bishop(this, pos('F' + row1)),\n      new Knight(this, pos('B' + row1)),\n      new Knight(this, pos('G' + row1)),\n      new Rook(this, pos('A' + row1)),\n      new Rook(this, pos('H' + row1)),\n      new Pawn(this, pos('A' + row2)),\n      new Pawn(this, pos('B' + row2)),\n      new Pawn(this, pos('C' + row2)),\n      new Pawn(this, pos('D' + row2)),\n      new Pawn(this, pos('E' + row2)),\n      new Pawn(this, pos('F' + row2)),\n      new Pawn(this, pos('G' + row2)),\n      new Pawn(this, pos('H' + row2)),\n    ];\n  }\n}\n","import type { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Move {\n  piece: Piece;\n  from: Position;\n  to: Position;\n\n  constructor(piece: Piece, to: Position, _skipValidation = false) {\n    const pos = piece.position;\n    if (!pos) throw new Error('Cannot move a piece that is not on the board.');\n\n    this.piece = piece;\n    this.from = pos.clone();\n    this.to = to.clone();\n\n    if (_skipValidation || piece.isValidMovePosition(to)) {\n      const targetPiece = piece.game.board.getPieceByPosition(to);\n      if (targetPiece) targetPiece.remove();\n      piece.registerMove(this);\n      piece.game.board.registerMove(this);\n    } else {\n      throw new Error('Invalid move.');\n    }\n  }\n}\n","import { Board } from './Board';\nimport { Player } from './Player';\nimport { Move } from './Move';\nimport type { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Game {\n  board: Board;\n  white: Player;\n  black: Player;\n  moves: Array<Move>;\n\n  constructor() {\n    this.board = new Board(this);\n    this.white = new Player(this, 'white');\n    this.black = new Player(this, 'black');\n    this.moves = [];\n  }\n\n  get players(): Array<Player> {\n    return [this.black, this.white];\n  }\n\n  get pieces(): Array<Piece> {\n    return [...this.black.pieces, ...this.white.pieces];\n  }\n\n  makeMove(piece: Piece, to: Position, _skipValidation?: boolean): Move {\n    return new Move(piece, to, _skipValidation);\n  }\n\n  clone(): Game {\n    const game = new Game();\n    const moves = this.moves;\n    const l = moves.length;\n    for (let i = 0; i < l; i++) {\n      game.makeMove(moves[i].piece, moves[i].to, true);\n    }\n    return game;\n  }\n}\n"],"names":[],"mappings":"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"}