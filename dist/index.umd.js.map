{"version":3,"file":"index.umd.js","sources":["../src/AbstractPiece.ts","../src/Bishop.ts","../src/util.ts","../src/coordinates.ts","../src/Board.ts","../src/Position.ts","../src/Pawn.ts","../src/Knight.ts","../src/Queen.ts","../src/Rook.ts","../src/King.ts","../src/Player.ts","../src/Move.ts","../src/Game.ts"],"sourcesContent":["import type { Player } from './Player';\nimport type { Position } from './Position';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\n\nexport abstract class Piece {\n  player: Player;\n  index: number;\n  position: Position | null;\n  moveCount: number;\n\n  constructor(player: Player, index: number, position: Position) {\n    this.player = player;\n    this.index = index;\n    this.position = position;\n    this.moveCount = 0;\n\n    this.player.game.board.setPiece(this);\n  }\n\n  get game(): Game {\n    return this.player.game;\n  }\n\n  get type(): string {\n    return this.constructor.name;\n  }\n\n  get hasMoved(): boolean {\n    return this.moveCount > 0;\n  }\n\n  get color(): string {\n    return this.player.color;\n  }\n\n  get isTaken(): boolean {\n    return this.position === null;\n  }\n\n  get moves(): Move[] {\n    return this.player.game.moves.filter((move) => {\n      return move.piece === this;\n    });\n  }\n\n  registerMove(move: Move): void {\n    this.moveCount++;\n    this.position = move.to.clone();\n  }\n\n  remove(): void {\n    this.position = null;\n  }\n\n  protected isMoveTargetOwnPiece(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    return targetPiece !== null && this.player === targetPiece.player;\n  }\n\n  /**\n   * Returns whether a move to a position is a valid move.\n   */\n  protected isValidMove(target: Position): boolean {\n    return this.isMoveTargetOwnPiece(target);\n  }\n\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected abstract getMovePositionsWithinBounds(): Array<\n    Position | Array<Position>\n  >;\n\n  /**\n   * Returns a Position array with all valid moves.\n   */\n  getValidMovePositions(): Array<Position> {\n    // return this.getMovePositionsWithinBounds().reduce((accum, item) => {\n    //   if (Array.isArray(item)) {\n    //     for (const pos of item) {\n    //       if (pos && this.isValidMove(pos)) accum.push(pos);\n    //       else break;\n    //     }\n    //   } else if (this.isValidMove(item)) {\n    //     accum.push(item);\n    //   }\n    //   return accum;\n    // }, []);\n    return [];\n  }\n\n  isValidMovePosition(target: Position): boolean {\n    return !!this.getValidMovePositions().find((position: Position) => {\n      return position.compare(target);\n    });\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Bishop extends Piece {\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllDiagonalRecursive() : [];\n  }\n}\n","import type { Position } from './Position';\n\n/**\n * Removes elements of a given array if they do not evaluate to true.\n */\nexport function arrClean(arr: Array<Position | null>): Array<Position> {\n  const res = [];\n  const l = arr.length;\n  for (let i = 0; i < l; i++) {\n    const pos = arr[i];\n    if (pos) {\n      res.push(pos);\n    }\n  }\n  return res;\n}\n\n/**\n * Returns the numeric difference between to numbers.\n */\nexport function numericDifference(n1: number, n2: number): number {\n  const dist = n1 - n2;\n  return dist < 0 ? dist * -1 : dist;\n}\n\n/**\n * Returns an assertion function that expects [string] 'expectedToBe' evaluated by [Function] 'validate'\n */\nexport function createAssertFunction<T>(\n  expectedToBe: string,\n  validate: (arg: T) => boolean,\n): (arg: T, name?: string) => void {\n  const f = function (arg: T, name = 'arg') {\n    if (!validate(arg)) {\n      throw new TypeError(\n        `Expected ${name} to be ${expectedToBe}. ${name}: ${arg}`,\n      );\n    }\n  };\n  Object.defineProperty(f, 'name', {\n    value: validate.name.replace(/^is/, 'assert'),\n  });\n  return f;\n}\n","import { createAssertFunction } from './util';\n\nconst A_CHAR_CODE = 'A'.charCodeAt(0);\n\n/**\n * Converts the first value of an XY-coordinate to A1-notation.\n */\nexport function from_X_to_A(x: number): string {\n  return String.fromCharCode(x + A_CHAR_CODE);\n}\n\n/**\n * Converts the second value of an XY-coordinate to A1-notation.\n */\nexport function from_Y_to_1(y: number): string {\n  return (y + 1).toString();\n}\n\n/**\n * Converts the first character of A1-notation to the first value of an XY-coordinate.\n */\nexport function from_A_to_X(a: string): number {\n  return a.toUpperCase().charCodeAt(0) - A_CHAR_CODE;\n}\n\n/**\n * Converts the second character of A1-notation to the second value of an XY-coordinate.\n */\nexport function from_1_to_Y(n: string): number {\n  return Number(n.charAt(0)) - 1;\n}\n\n/**\n * Converts a XY-coordinate-array to an A1-notation string.\n */\nexport function from_XY_to_A1(pos: Array<number>): string {\n  return from_X_to_A(pos[0]) + from_Y_to_1(pos[1]);\n}\n\n/**\n * Converts an A1-notation string to a XY-coordinate-array.\n */\nexport function from_A1_to_XY(a1: string): Array<number> {\n  return [from_A_to_X(a1.charAt(0)), from_1_to_Y(a1.charAt(1))];\n}\n\n/**\n * Returns whether the argument is a positive integer where 0 <= arg <= 7.\n */\nexport function isValidXYPoint(n: number): boolean {\n  return n >= 0 && n <= 7;\n}\n\n/**\n * Returns whether both points in an XY-coordinate is a positive integer where 0 <= arg <= 7.\n */\nexport function isValidXY(pos: Array<number>): boolean {\n  return isValidXYPoint(pos[0]) && isValidXYPoint(pos[1]);\n}\n\n/**\n * Returns whether a string is valid A1-notation.\n */\nexport function isValidA1(a1: string): boolean {\n  return a1.length === 2 && isValidXY(from_A1_to_XY(a1));\n}\n\n/**\n * Throws a TypeError if the argument is not a valid XY-coordinate point.\n * @see isValidXYPoint\n *\n * @function assertValidXYPoint\n * @throws {TypeError}\n */\nexport const assertValidXYPoint = createAssertFunction(\n  'a positive integer between 0 and 7',\n  isValidXYPoint,\n);\n\n/**\n * Throws a TypeError if the argument is not a valid XY-coordinate.\n * @see isValidXY\n *\n * @function assertValidXY\n * @throws {TypeError}\n */\nexport const assertValidXY = createAssertFunction(\n  'an array containing two positive integers between 0 and 7',\n  isValidXY,\n);\n\n/**\n * Throws a TypeError if the argument is not valid A1-notation.\n * @see isValidA1\n *\n * @function assertValidA1\n * @throws {TypeError}\n */\nexport const assertValidA1 = createAssertFunction(\n  'a valid A1-notation string',\n  isValidA1,\n);\n","import { from_A1_to_XY } from './coordinates';\nimport type { Position } from './Position';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\nimport type { Piece } from './AbstractPiece';\n\nexport class Board {\n  public game: Game;\n  public grid: Array<Array<Piece | null>>;\n\n  public constructor(game: Game) {\n    this.game = game;\n    this.grid = [];\n    let i = 0;\n    while (i < 8) {\n      this.grid.push(new Array(8).fill(null, 0, 7));\n      i++;\n    }\n  }\n\n  /**\n   * Returns the piece at the given XY-coordinates or null if no piece is found there.\n   */\n  public getPieceByXY(x: number, y: number): Piece | null {\n    return this.grid[y][x];\n  }\n\n  /**\n   * Returns the piece at the given Position or null if no piece is found there.\n   */\n  public getPieceByPosition(position: Position): Piece | null {\n    return this.getPieceByXY(position.x, position.y);\n  }\n\n  /**\n   * Returns the piece at the given A1-notation-coordinates or null if no piece is found there.\n   */\n  public getPieceByA1(a1: string): Piece | null {\n    const [x, y] = from_A1_to_XY(a1);\n    return this.getPieceByXY(x, y);\n  }\n\n  /**\n   * Sets a piece to the board.\n   */\n  public setPiece(piece: Piece): void {\n    const pos = piece.position;\n    if (pos) this.grid[pos.y][pos.x] = piece;\n  }\n\n  /**\n   * Removes a piece from the board.\n   * This method does not check legality or whether this action is part of a move in the game.\n   */\n  public removePiece(piece: Piece | null): void {\n    if (piece) {\n      const pos = piece.position;\n      if (pos) this.grid[pos.y][pos.x] = null;\n    }\n  }\n\n  /**\n   * Updates the board instance based on the information contained within a provided Move instance.\n   */\n  public registerMove(move: Move): void {\n    const from = move.from;\n    const to = move.to;\n    const piece = this.grid[from.y][from.x];\n    this.grid[to.y][to.x] = piece;\n    this.grid[from.y][from.x] = null;\n  }\n}\n","import { from_A1_to_XY, from_XY_to_A1, assertValidXY } from './coordinates';\nimport { arrClean } from './util';\n\nexport class Position {\n  public x: number;\n  public y: number;\n  /**\n   * Returns a new Position instance based on A1-notation input.\n   */\n  public static fromA1(a1: string): Position {\n    const xy = from_A1_to_XY(a1);\n    return new Position(xy[0], xy[1]);\n  }\n\n  /**\n   * @param x - a positive integer between 0 and 7 both inclusive.\n   * @param y - a positive integer between 0 and 7 both inclusive.\n   */\n  public constructor(x: number, y: number, skipValidation = false) {\n    if (!skipValidation) {\n      assertValidXY([x, y], 'x and y');\n    }\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Returns the board position in A1-notation.\n   */\n  public get A1(): string {\n    return from_XY_to_A1([this.x, this.y]);\n  }\n\n  /**\n   * Deep-equality-compares the Position instance to another Position instance.\n   */\n  public compare(position: Position): boolean {\n    return this.x === position.x && this.y === position.y;\n  }\n\n  /**\n   * Returns a clone of the instance.\n   * Out of bounds -validation is skipped.\n   */\n  public clone(): Position {\n    return new Position(this.x, this.y, true);\n  }\n\n  /**\n   * Returns the instance as a normal array.\n   */\n  public toArray(): Array<number> {\n    return [this.x, this.y];\n  }\n\n  /**\n   * Modulates the XY-position coordinate and returns a new Position instance equivalent to it, or null if that position\n   * is out of bounds of the board.\n   */\n  private getModulation(xBy: number, yBy: number): Position | null {\n    try {\n      return new Position(this.x + xBy, this.y + yBy);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 1 from the position on the board that this instance describes.\n   */\n  public getUp(): Position | null {\n    return this.getModulation(0, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 1 from the position on the board that this instance describes.\n   */\n  public getDown(): Position | null {\n    return this.getModulation(0, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved left by 1 from the position on the board that this instance describes.\n   */\n  public getLeft(): Position | null {\n    return this.getModulation(-1, 0);\n  }\n\n  /**\n   * Returns a new Position instance that is moved right by 1 from the position on the board that this instance describes.\n   */\n  public getRight(): Position | null {\n    return this.getModulation(1, 0);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 1 and left by 1 from the position on the board that this instance describes.\n   */\n  public getUpLeft(): Position | null {\n    return this.getModulation(-1, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 1 and right by 1 from the position on the board that this instance describes.\n   */\n  public getUpRight(): Position | null {\n    return this.getModulation(1, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 1 and left by 1 from the position on the board that this instance describes.\n   */\n  public getDownLeft(): Position | null {\n    return this.getModulation(-1, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 1 and right by 1 from the position on the board that this instance describes.\n   */\n  public getDownRight(): Position | null {\n    return this.getModulation(1, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 2 from the position on the board that this instance describes.\n   */\n  public getUpUp(): Position | null {\n    return this.getModulation(0, 2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 2 from the position on the board that this instance describes.\n   */\n  public getDownDown(): Position | null {\n    return this.getModulation(0, -2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 2 and left by 1 from the position on the board that this instance describes.\n   */\n  public getUpUpLeft(): Position | null {\n    return this.getModulation(-1, 2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 2 and right by 1 from the position on the board that this instance describes.\n   */\n  public getUpUpRight(): Position | null {\n    return this.getModulation(1, 2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 2 and left by 1 from the position on the board that this instance describes.\n   */\n  public getDownDownLeft(): Position | null {\n    return this.getModulation(-1, -2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 2 and right by 1 from the position on the board that this instance describes.\n   */\n  public getDownDownRight(): Position | null {\n    return this.getModulation(1, -2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved left by 2 and up by 1 from the position on the board that this instance describes.\n   */\n  public getLeftLeftUp(): Position | null {\n    return this.getModulation(-2, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved left by 2 and up by 1 from the position on the board that this instance describes.\n   */\n  public getLeftLeftDown(): Position | null {\n    return this.getModulation(-2, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved right by 2 and up by 1 from the position on the board that this instance describes.\n   */\n  public getRightRightUp(): Position | null {\n    return this.getModulation(2, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved right by 2 and down by 1 from the position on the board that this instance describes.\n   */\n  public getRightRightDown(): Position | null {\n    return this.getModulation(2, -1);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all straight (horizontal and vertical) directions.\n   */\n  public getAllStraight(): Array<Position> {\n    return arrClean([\n      this.getUp(),\n      this.getDown(),\n      this.getLeft(),\n      this.getRight(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all diagonal directions.\n   */\n  public getAllDiagonal(): Array<Position> {\n    return arrClean([\n      this.getUpLeft(),\n      this.getUpRight(),\n      this.getDownLeft(),\n      this.getDownRight(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all straight (horizontal and vertical) and diagonal directions.\n   */\n  public getAllStraightAndDiagonal(): Array<Position> {\n    return [...this.getAllStraight(), ...this.getAllDiagonal()];\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved one time equivalent of all legal knight-piece moves.\n   */\n  public getAllKnightMovePositions(): Array<Position> {\n    return arrClean([\n      this.getUpUpLeft(),\n      this.getUpUpRight(),\n      this.getDownDownLeft(),\n      this.getDownDownRight(),\n      this.getLeftLeftUp(),\n      this.getLeftLeftDown(),\n      this.getRightRightUp(),\n      this.getRightRightDown(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by a provided modulator function recursively until the\n   * modulator's returned Position instance becomes out of bounds of the board.\n   */\n  private getRecursive(modulator: () => Position | null): Array<Position> {\n    const res = [];\n    let pos: Position | null;\n    pos = this;\n    while ((pos = modulator.call(pos))) {\n      res.push(pos);\n    }\n    return res;\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getUpRecursive(): Array<Position> {\n    return this.getRecursive(this.getUp);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getDownRecursive(): Array<Position> {\n    return this.getRecursive(this.getDown);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving left by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving right by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 and left by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getUpLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getUpLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 and right by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getUpRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getUpRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 and left by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getDownLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getDownLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 and right by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getDownRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getDownRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all straight\n   * (horizontal and vertical) directions from the position on the board that this instance describes until the\n   * resulting Position instance becomes out of bounds of the board.\n   */\n  public getAllStraightRecursive(): Array<Array<Position>> {\n    return [\n      this.getUpRecursive(),\n      this.getDownRecursive(),\n      this.getLeftRecursive(),\n      this.getRightRecursive(),\n    ];\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all diagonal\n   * directions. from the position on the board that this instance describes until the resulting Position instance\n   * becomes out of bounds of the board.\n   */\n  public getAllDiagonalRecursive(): Array<Array<Position>> {\n    return [\n      this.getUpLeftRecursive(),\n      this.getUpRightRecursive(),\n      this.getDownLeftRecursive(),\n      this.getDownRightRecursive(),\n    ];\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all straight\n   * (horizontal and vertical) and diagonal directions from the position on the board that this instance describes until\n   * the resulting Position instance becomes out of bounds of the board.\n   */\n  public getAllStraightAndDiagonalRecursive(): Array<Array<Position>> {\n    return [\n      ...this.getAllStraightRecursive(),\n      ...this.getAllDiagonalRecursive(),\n    ];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Pawn extends Piece {\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    const res = [];\n\n    if (this.color === 'white') {\n      const upPos = pos.getUp();\n      if (upPos) {\n        res.push(upPos);\n      }\n\n      const upUpPos = pos.getUpUp();\n      if (upUpPos && !this.hasMoved) {\n        res.push(upUpPos);\n      }\n\n      const upLeftPos = pos.getUpLeft();\n      if (upLeftPos) {\n        const diagLeftPiece = this.game.board.getPieceByPosition(upLeftPos);\n        if (diagLeftPiece) {\n          const diagLeftPos = diagLeftPiece.position;\n          if (diagLeftPos && diagLeftPiece.color === 'black') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n\n      const upRightPos = pos.getUpRight();\n      if (upRightPos) {\n        const diagRightPiece = this.game.board.getPieceByPosition(upRightPos);\n        if (diagRightPiece) {\n          const diagLeftPos = diagRightPiece.position;\n          if (diagLeftPos && diagRightPiece.color === 'black') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n    } else {\n      const downPos = pos.getDown();\n      if (downPos) {\n        res.push(downPos);\n      }\n\n      const downDownPos = pos.getDownDown();\n      if (downDownPos && !this.hasMoved) {\n        res.push(downDownPos);\n      }\n\n      const downLeftPos = pos.getDownLeft();\n      if (downLeftPos) {\n        const diagLeftPiece = this.game.board.getPieceByPosition(downLeftPos);\n        if (diagLeftPiece) {\n          const diagLeftPos = diagLeftPiece.position;\n          if (diagLeftPos && diagLeftPiece.color === 'white') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n\n      const downRightPos = pos.getDownRight();\n      if (downRightPos) {\n        const diagRightPiece = this.game.board.getPieceByPosition(downRightPos);\n        if (diagRightPiece) {\n          const diagLeftPos = diagRightPiece.position;\n          if (diagLeftPos && diagRightPiece.color === 'white') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n    }\n    return res;\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Knight extends Piece {\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllKnightMovePositions() : [];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Queen extends Piece {\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllStraightAndDiagonalRecursive() : [];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport { Position } from './Position';\n\nexport class Rook extends Piece {\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    const res = [];\n    res.push(...pos.getAllStraightRecursive());\n    if (this.color === 'white') {\n      res.push(Position.fromA1('D1'));\n    } else {\n      res.push(Position.fromA1('D7'));\n    }\n    return res;\n  }\n\n  protected isValidMove(target: Position): boolean {\n    return this.isMoveTargetOwnPiece(target)\n      ? this.isValidCastleMove(target)\n      : true;\n  }\n\n  private isValidCastleMove(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    return targetPiece\n      ? targetPiece.type === 'King' && !targetPiece.hasMoved && !this.hasMoved\n      : false;\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport { Position } from './Position';\n\nexport class King extends Piece {\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    const res = pos.getAllStraightAndDiagonal();\n    if (this.color === 'white') {\n      res.push(Position.fromA1('A1'), Position.fromA1('H1'));\n    } else {\n      res.push(Position.fromA1('A7'), Position.fromA1('H7'));\n    }\n    return res;\n  }\n\n  protected isValidMove(target: Position): boolean {\n    return this.isMoveTargetOwnPiece(target)\n      ? this.isValidCastleMove(target)\n      : true;\n  }\n\n  private isValidCastleMove(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    return targetPiece\n      ? targetPiece.type === 'Rook' && !targetPiece.hasMoved && !this.hasMoved\n      : false;\n  }\n}\n","import { Position } from './Position';\nimport { Pawn } from './Pawn';\nimport { Knight } from './Knight';\nimport { Bishop } from './Bishop';\nimport { Queen } from './Queen';\nimport { Rook } from './Rook';\nimport { King } from './King';\nimport type { Piece } from './AbstractPiece';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\n\nexport class Player {\n  public game: Game;\n  public color: string;\n  public pieces: Piece[];\n\n  public constructor(game: Game, color: string) {\n    this.game = game;\n    this.color = color;\n\n    let row1: string, row2: string;\n    if (color === 'white') {\n      row1 = '1';\n      row2 = '2';\n    } else if (color === 'black') {\n      row1 = '8';\n      row2 = '7';\n    } else {\n      throw new Error('Invalid color');\n    }\n\n    this.pieces = [\n      new King(this, 0, Position.fromA1('E' + row1)),\n      new Queen(this, 1, Position.fromA1('D' + row1)),\n      new Bishop(this, 2, Position.fromA1('C' + row1)),\n      new Bishop(this, 3, Position.fromA1('F' + row1)),\n      new Knight(this, 4, Position.fromA1('B' + row1)),\n      new Knight(this, 5, Position.fromA1('G' + row1)),\n      new Rook(this, 6, Position.fromA1('A' + row1)),\n      new Rook(this, 7, Position.fromA1('H' + row1)),\n      new Pawn(this, 8, Position.fromA1('A' + row2)),\n      new Pawn(this, 9, Position.fromA1('B' + row2)),\n      new Pawn(this, 10, Position.fromA1('C' + row2)),\n      new Pawn(this, 11, Position.fromA1('D' + row2)),\n      new Pawn(this, 12, Position.fromA1('E' + row2)),\n      new Pawn(this, 13, Position.fromA1('F' + row2)),\n      new Pawn(this, 14, Position.fromA1('G' + row2)),\n      new Pawn(this, 15, Position.fromA1('H' + row2)),\n    ];\n  }\n\n  /**\n   * Returns an array of Move instances that describe moves of this Piece.\n   */\n  public get moves(): Move[] {\n    return this.game.moves.filter((move) => {\n      return move.piece.player === this;\n    });\n  }\n}\n","import type { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Move {\n  public piece: Piece;\n  public takes: Piece | null;\n  public from: Position;\n  public to: Position;\n\n  public constructor(piece: Piece, to: Position, takes: Piece | null = null) {\n    const pos = piece.position;\n    if (!pos) {\n      throw new Error('Cannot move a piece that is not on the board.');\n    }\n\n    this.piece = piece;\n    this.takes = takes;\n    this.from = pos.clone();\n    this.to = to.clone();\n  }\n}\n","import { Board } from './Board';\nimport { Player } from './Player';\nimport { Move } from './Move';\nimport type { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Game {\n  board: Board;\n  white: Player;\n  black: Player;\n  moves: Array<Move>;\n\n  constructor() {\n    this.board = new Board(this);\n    this.white = new Player(this, 'white');\n    this.black = new Player(this, 'black');\n    this.moves = [];\n  }\n\n  /**\n   * Iterate each piece on the board.\n   * If the callback function returns true, iteration ends.\n   */\n  forEachPiece(f: (piece: Piece) => boolean | void): void {\n    const w = this.white.pieces;\n    const b = this.black.pieces;\n    for (let i = 0; i < 16; i++) {\n      if (f(w[i]) === true || f(b[i]) === true) {\n        return;\n      }\n    }\n  }\n\n  /**\n   * Moves a piece on the board.\n   * If the target position already has a piece belonging to the opposing player, it is removed from the board.\n   * Allows for skipping validation of the move's legality according to the rules of the game. This is used internally\n   * for performance reasons when cloning the game, repeating the moves that were previously checked.\n   */\n  makeMove(piece: Piece, to: Position, skipValidation?: boolean): void {\n    if (skipValidation || piece.isValidMovePosition(to)) {\n      const targetPiece = piece.game.board.getPieceByPosition(to);\n      const move = new Move(piece, to, targetPiece);\n      this.moves.push(move);\n      this.board.registerMove(move);\n      piece.registerMove(move);\n      if (targetPiece) targetPiece.remove();\n    } else {\n      throw new Error('Invalid move.');\n    }\n  }\n\n  /**\n   * Returns a deep clone of the game instance.\n   */\n  clone(): Game {\n    const game = new Game();\n    const w = game.white.pieces;\n    const b = game.black.pieces;\n    const moves = this.moves;\n    const l = moves.length;\n    for (let piece, i = 0; i < l; i++) {\n      piece = moves[i].piece;\n      game.makeMove(\n        (piece.color === 'white' ? w : b)[piece.index],\n        moves[i].to.clone(),\n        true,\n      );\n    }\n    return game;\n  }\n}\n"],"names":[],"mappings":"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"}