{"version":3,"file":"index.umd.js","sources":["../src/pieces/AbstractPiece.ts","../src/pieces/Bishop.ts","../src/util.ts","../src/coordinates.ts","../src/Board.ts","../src/pieces/King.ts","../src/pieces/Knight.ts","../src/Move.ts","../src/pieces/Pawn.ts","../src/Position.ts","../src/pieces/Queen.ts","../src/pieces/Rook.ts","../src/Player.ts","../src/Game.ts"],"sourcesContent":["import type { Player } from '../Player';\nimport type { Position } from '../Position';\nimport type { Game } from '../Game';\nimport type { Move } from '../Move';\n\n/**\n * Abstract piece class that each type of Piece (class) will extend.\n */\nexport abstract class Piece {\n  /**\n   * The Player who owns the Piece.\n   */\n  public player: Player;\n\n  /**\n   * Manually set piece index value. Only unique per Player instance.\n   */\n  public index: number;\n\n  /**\n   * The Position of the piece.\n   */\n  public position: Position | null;\n\n  /**\n   * The number of times the piece has moved.\n   */\n  public moveCount: number;\n\n  /**\n   * @param player - The Player who owns the Piece.\n   * @param index - Manually set piece index value. Only unique per Player instance.\n   * @param position - The Position of the piece.\n   */\n  public constructor(player: Player, index: number, position: Position) {\n    this.player = player;\n    this.index = index;\n    this.position = position;\n    this.moveCount = 0;\n    this.player.game.board.setPiece(this);\n  }\n\n  /**\n   * Returns the Game instance that this Piece is associated with.\n   */\n  public get game(): Game {\n    return this.player.game;\n  }\n\n  /**\n   * Returns the class name of the Piece.\n   */\n  public get type(): string {\n    return this.constructor.name;\n  }\n\n  /**\n   * Returns whether or not this Piece has made any moves yet.\n   */\n  public get hasMoved(): boolean {\n    return this.moveCount > 0;\n  }\n\n  /**\n   * Returns the player color of the Player instance that this Piece belongs to.\n   */\n  public get color(): string {\n    return this.player.color;\n  }\n\n  /**\n   * Returns whether this Piece is still on the board.\n   */\n  public get isTaken(): boolean {\n    return this.position === null;\n  }\n\n  /**\n   * Returns an array of Move instances that represent moves made by this Piece.\n   */\n  public get moves(): Move[] {\n    return this.player.game.moves.filter((move) => {\n      return move.piece === this;\n    });\n  }\n\n  /**\n   * Increments the moveCount number property and sets the position property.\n   */\n  public registerMove(move: Move): void {\n    this.moveCount++;\n    this.position = move.to.clone();\n  }\n\n  /**\n   * Sets the position property to null, which means that this Piece is no longer on the board.\n   */\n  public remove(): void {\n    this.position = null;\n  }\n\n  /**\n   * Returns whether there is a 'friendly' Piece at a given Position.\n   */\n  protected isMoveTargetOwnPiece(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    return targetPiece !== null && this.player === targetPiece.player;\n  }\n\n  /**\n   * Returns whether it is this Piece's Player's turn to move.\n   */\n  protected get isOwnTurn(): boolean {\n    return this.game.activePlayer === this.player;\n  }\n\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected abstract getMovePositionsWithinBounds(): Array<\n    Position | Array<Position>\n  >;\n\n  /**\n   * Iterates all valid move Position instances for this Piece.\n   *\n   * @param f - a callback function to invoke for each valid move position. If it returns true, iteration ends.\n   * @returns true if iteration was ended before completion.\n   */\n  public forEachValidMovePosition(\n    f: (position: Position) => boolean | void,\n  ): boolean | void {\n    if (this.isOwnTurn) {\n      const positions = this.getMovePositionsWithinBounds();\n      for (let i = 0; i < positions.length; i++) {\n        const item = positions[i];\n        if (Array.isArray(item)) {\n          // item is an array of positions where the array represents a move-direction. Used for pieces that can move\n          // further than by one slot on the game board.\n          for (let j = 0; j < item.length; j++) {\n            if (item[j] && this.isMoveTargetOwnPiece(item[j])) {\n              if (f(item[j])) {\n                return true;\n              }\n            } else {\n              // an own piece is in the way, so all following positions for the current direction will always be invalid.\n              break;\n            }\n          }\n        } else if (this.isMoveTargetOwnPiece(item)) {\n          if (f(item)) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns whether a move to a target position is a castling move.\n   * The King and Rook classes override this method.\n   */\n  public isCastleMove(_target: Position): boolean {\n    return false;\n  }\n\n  /**\n   * Returns whether a move to a position is a valid move.\n   */\n  public isValidMove(target: Position): boolean {\n    return (\n      this.isCastleMove(target) ||\n      !!this.forEachValidMovePosition((position) => {\n        return position.compare(target);\n      })\n    );\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from '../Position';\n\n/**\n * {Piece} Bishop class.\n */\nexport class Bishop extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllDiagonalRecursive() : [];\n  }\n}\n","import type { Position } from './Position';\n\n/**\n * Removes elements of a given array if they do not evaluate to true.\n *\n * @param arr - The array containing null values or Position instances to clean.\n */\nexport function arrClean(arr: Array<Position | null>): Array<Position> {\n  const res = [];\n  const l = arr.length;\n  for (let i = 0; i < l; i++) {\n    const pos = arr[i];\n    if (pos) {\n      res.push(pos);\n    }\n  }\n  return res;\n}\n\n/**\n * Returns the numeric difference between to numbers.\n *\n * @param n1 - A number\n * @param n2 - A number\n */\nexport function numericDifference(n1: number, n2: number): number {\n  const dist = n1 - n2;\n  return dist < 0 ? dist * -1 : dist;\n}\n\n/**\n * Returns an assertion function that expects [string] 'expectedToBe' evaluated by [Function] 'validate'\n *\n * @param expectedToBe - A string that describes the assertion.\n * @param validate - A callback function that validates an argument.\n */\nexport function createAssertFunction<T>(\n  expectedToBe: string,\n  validate: (arg: T) => boolean,\n): (arg: T, name?: string) => void {\n  const f = function (arg: T, name = 'arg') {\n    if (!validate(arg)) {\n      throw new TypeError(\n        `Expected ${name} to be ${expectedToBe}. ${name}: ${arg}`,\n      );\n    }\n  };\n  Object.defineProperty(f, 'name', {\n    value: validate.name.replace(/^is/, 'assert'),\n  });\n  return f;\n}\n\n/**\n * Returns whether a number is an even number.\n *\n * @param n - An integer\n */\nexport function isEven(n: number): boolean {\n  return n % 2 == 0;\n}\n\n/**\n * Converts an Uint8Array to an array of integers between 0 and 255.\n *\n * @param uInt8 - An Uint8Array instance.\n */\nexport function uInt8ToBytes(uInt8: Uint8Array): Array<number> {\n  const l = uInt8.length;\n  const res = new Array(l);\n  for (let i = 0; i < l; i++) {\n    res[i] = uInt8[i];\n  }\n  return res;\n}\n\n/**\n * Converts an array of bytes to a Uint8Array.\n *\n * @param arr - An array of integers between 0 and 255.\n */\nexport function bytesToUint8Array(arr: Array<number>): Uint8Array {\n  const l = arr.length;\n  const res = new Uint8Array(l);\n  for (let i = 0; i < l; i++) {\n    res[i] = arr[i];\n  }\n  return res;\n}\n","import { createAssertFunction } from './util';\n\nconst A_CHAR_CODE = 'A'.charCodeAt(0);\n\n/**\n * Converts the first value of an XY-coordinate to A1-notation.\n *\n * @param x - An integer where 0 <= x <= 7\n */\nexport function from_X_to_A(x: number): string {\n  return String.fromCharCode(x + A_CHAR_CODE);\n}\n\n/**\n * Converts the second value of an XY-coordinate to A1-notation.\n *\n * @param y - An integer where 0 <= y <= 7\n */\nexport function from_Y_to_1(y: number): string {\n  return (y + 1).toString();\n}\n\n/**\n * Converts the first character of A1-notation to the first value of an XY-coordinate.\n *\n * @param a - The first character of an A1-notation string.\n */\nexport function from_A_to_X(a: string): number {\n  return a.toUpperCase().charCodeAt(0) - A_CHAR_CODE;\n}\n\n/**\n * Converts the second character of A1-notation to the second value of an XY-coordinate.\n *\n * @param n - The second character of an A1-notation string.\n */\nexport function from_1_to_Y(n: string): number {\n  return Number(n.charAt(0)) - 1;\n}\n\n/**\n * Converts a XY-coordinate-array to an A1-notation string.\n *\n * @param xy - An XY-coordinate array where x and y are integers and 0 <= x <= 7 and 0 <= y <= 7\n */\nexport function from_XY_to_A1(xy: Array<number>): string {\n  return from_X_to_A(xy[0]) + from_Y_to_1(xy[1]);\n}\n\n/**\n * Converts an A1-notation string to a XY-coordinate-array.\n *\n * @param a1 - An A1-notation string.\n */\nexport function from_A1_to_XY(a1: string): Array<number> {\n  return [from_A_to_X(a1.charAt(0)), from_1_to_Y(a1.charAt(1))];\n}\n\n/**\n * Returns whether the argument is a positive integer where 0 <= arg <= 7.\n *\n * @param n - The second character of an A1-notation string.\n */\nexport function isValidXYPoint(n: number): boolean {\n  return n >= 0 && n <= 7;\n}\n\n/**\n * Returns whether both points in an XY-coordinate is a positive integer where 0 <= arg <= 7.\n *\n * @param xy - An XY-coordinate array where x and y are integers and 0 <= x <= 7 and 0 <= y <= 7\n */\nexport function isValidXY(xy: Array<number>): boolean {\n  return isValidXYPoint(xy[0]) && isValidXYPoint(xy[1]);\n}\n\n/**\n * Returns whether a string is valid A1-notation.\n *\n * @param a1 - An A1-notation string.\n */\nexport function isValidA1(a1: string): boolean {\n  return a1.length === 2 && isValidXY(from_A1_to_XY(a1));\n}\n\n/**\n * Throws a TypeError if the argument is not a valid XY-coordinate point.\n * @see isValidXYPoint\n *\n * @function assertValidXYPoint\n * @throws {TypeError}\n */\nexport const assertValidXYPoint = createAssertFunction(\n  'a positive integer between 0 and 7',\n  isValidXYPoint,\n);\n\n/**\n * Throws a TypeError if the argument is not a valid XY-coordinate.\n * @see isValidXY\n *\n * @function assertValidXY\n * @throws {TypeError}\n */\nexport const assertValidXY = createAssertFunction(\n  'an array containing two positive integers between 0 and 7',\n  isValidXY,\n);\n\n/**\n * Throws a TypeError if the argument is not valid A1-notation.\n * @see isValidA1\n *\n * @function assertValidA1\n * @throws {TypeError}\n */\nexport const assertValidA1 = createAssertFunction(\n  'a valid A1-notation string',\n  isValidA1,\n);\n","import { from_A1_to_XY } from './coordinates';\nimport type { Position } from './Position';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\nimport type { Piece } from './pieces/AbstractPiece';\n\n/**\n * A class that acts as a data view of all the pieces that offers faster lookups than iterating pieces.\n */\nexport class Board {\n  /**\n   * The Game instance that the board belongs to.\n   */\n  public game: Game;\n\n  /**\n   * A 2D array grid representing the game board.\n   */\n  public grid: Array<Array<Piece | null>>;\n\n  /**\n   * @param game - The Game instance that the board belongs to.\n   */\n  public constructor(game: Game) {\n    this.game = game;\n    this.grid = [];\n    let i = 0;\n    while (i < 8) {\n      this.grid.push(new Array(8).fill(null, 0, 7));\n      i++;\n    }\n  }\n\n  /**\n   * Returns the piece at the given XY-coordinates or null if no piece is found there.\n   *\n   * @param x - The X coordinate\n   * @param y - The Y coordinate\n   */\n  public getPieceByXY(x: number, y: number): Piece | null {\n    return this.grid[y][x];\n  }\n\n  /**\n   * Returns the piece at the given Position or null if no piece is found there.\n   *\n   * @param position - The position on the game board by which to find the Piece instance there.\n   */\n  public getPieceByPosition(position: Position): Piece | null {\n    return this.getPieceByXY(position.x, position.y);\n  }\n\n  /**\n   * Returns the piece at the given A1-notation-coordinates or null if no piece is found there.\n   *\n   * @param a1 - An A1-notation string.\n   */\n  public getPieceByA1(a1: string): Piece | null {\n    const [x, y] = from_A1_to_XY(a1);\n    return this.getPieceByXY(x, y);\n  }\n\n  /**\n   * Moves a piece to the board.\n   *\n   * @param piece - The piece to move.\n   */\n  public setPiece(piece: Piece): void {\n    const pos = piece.position;\n    if (pos) this.grid[pos.y][pos.x] = piece;\n  }\n\n  /**\n   * Removes a piece from the board.\n   * This method does not check legality or whether this action is part of a move in the game.\n   *\n   * @param piece - The piece to remove.\n   */\n  public removePiece(piece: Piece | null): void {\n    if (piece) {\n      const pos = piece.position;\n      if (pos) this.grid[pos.y][pos.x] = null;\n    }\n  }\n\n  /**\n   * Updates the board instance based on the information contained within a provided Move instance.\n   *\n   * @param move - The Move instance containing the information needed to update the board.\n   */\n  public registerMove(move: Move): void {\n    const from = move.from;\n    const to = move.to;\n    const piece = this.grid[from.y][from.x];\n    this.grid[to.y][to.x] = piece;\n    this.grid[from.y][from.x] = null;\n  }\n\n  /**\n   * Updates the board instance based on the information contained within a provided Move instance that is known to make\n   * out a swap (used for castling moves).\n   *\n   * @param move - The Move instance containing the information needed to update the board.\n   */\n  public registerSwap(move: Move): void {\n    const from = move.from;\n    const to = move.to;\n    const pieceFrom = this.grid[from.y][from.x];\n    const pieceTo = this.grid[to.y][to.x];\n    this.grid[to.y][to.x] = pieceFrom;\n    this.grid[from.y][from.x] = pieceTo;\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from '../Position';\n\n/**\n * {Piece} King class.\n */\nexport class King extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    return pos.getAllStraightAndDiagonal();\n  }\n\n  /**\n   * Returns whether a move to a target position is a castling move.\n   */\n  public isCastleMove(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    if (!targetPiece) return false;\n    // it is not necessary to check whether the taget piece is an own piece since an enemy piece will never be in the\n    // designated position without having moved, which gets checked.\n    return (\n      targetPiece.type === 'Rook' && !targetPiece.hasMoved && !this.hasMoved\n    );\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from '../Position';\n\n/**\n * {Piece} Knight class.\n */\nexport class Knight extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllKnightMovePositions() : [];\n  }\n}\n","import type { Piece } from './pieces/AbstractPiece';\nimport type { Position } from './Position';\n\n/**\n * A class that represents a move in a chess Game.\n */\nexport class Move {\n  /**\n   * The Piece that made the move.\n   */\n  public piece: Piece;\n\n  /**\n   * The Piece that was taken out by the move, if any.\n   */\n  public takes: Piece | null;\n\n  /**\n   * The Position where the Piece was move was from.\n   */\n  public from: Position;\n\n  /**\n   * The Position where the Piece was move was to.\n   */\n  public to: Position;\n\n  /**\n   * @param piece - The Piece that made the move.\n   * @param to - The Position where the Piece was moved to.\n   * @param takes - The Piece that was taken out by the move, if any.\n   */\n  public constructor(piece: Piece, to: Position, takes: Piece | null = null) {\n    const pos = piece.position;\n    if (!pos) {\n      throw new Error('Cannot move a piece that is not on the board.');\n    }\n\n    this.piece = piece;\n    this.takes = takes;\n    this.from = pos.clone();\n    this.to = to.clone();\n  }\n\n  /**\n   * Stringifies the data necessary for completely reconstructing the Move instance.\n   */\n  public toJSON(): Array<number> {\n    return [this.from.x, this.from.y, this.to.x, this.to.y];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from '../Position';\n\n/**\n * {Piece} Pawn class.\n */\nexport class Pawn extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const board = this.game.board;\n    const pos = this.position;\n    const res = [];\n\n    if (!pos) {\n      return [];\n    }\n\n    if (this.color === 'white') {\n      const upPos = pos.getUp();\n      if (upPos) {\n        res.push(upPos);\n      }\n\n      const upUpPos = pos.getUpUp();\n      if (upUpPos && !this.hasMoved) {\n        res.push(upUpPos);\n      }\n\n      const upLeftPos = pos.getUpLeft();\n      if (upLeftPos) {\n        const diagLeftPiece = board.getPieceByPosition(upLeftPos);\n        if (diagLeftPiece) {\n          const diagLeftPos = diagLeftPiece.position;\n          if (diagLeftPos && diagLeftPiece.color === 'black') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n\n      const upRightPos = pos.getUpRight();\n      if (upRightPos) {\n        const diagRightPiece = board.getPieceByPosition(upRightPos);\n        if (diagRightPiece) {\n          const diagLeftPos = diagRightPiece.position;\n          if (diagLeftPos && diagRightPiece.color === 'black') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n    } else {\n      const downPos = pos.getDown();\n      if (downPos) {\n        res.push(downPos);\n      }\n\n      const downDownPos = pos.getDownDown();\n      if (downDownPos && !this.hasMoved) {\n        res.push(downDownPos);\n      }\n\n      const downLeftPos = pos.getDownLeft();\n      if (downLeftPos) {\n        const diagLeftPiece = board.getPieceByPosition(downLeftPos);\n        if (diagLeftPiece) {\n          const diagLeftPos = diagLeftPiece.position;\n          if (diagLeftPos && diagLeftPiece.color === 'white') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n\n      const downRightPos = pos.getDownRight();\n      if (downRightPos) {\n        const diagRightPiece = board.getPieceByPosition(downRightPos);\n        if (diagRightPiece) {\n          const diagLeftPos = diagRightPiece.position;\n          if (diagLeftPos && diagRightPiece.color === 'white') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n    }\n    return res;\n  }\n}\n","import { from_A1_to_XY, from_XY_to_A1, assertValidXY } from './coordinates';\nimport { arrClean } from './util';\n\n/**\n * A class that represents a XY-coordinate position on the Board of a chess Game.\n */\nexport class Position {\n  /**\n   * The X coordinate.\n   */\n  public x: number;\n\n  /**\n   * The Y coordinate.\n   */\n  public y: number;\n\n  /**\n   * Modulates the Position and returns a new Position instance based on A1-notation input.\n   */\n  public static fromA1(a1: string): Position {\n    const xy = from_A1_to_XY(a1);\n    return new Position(xy[0], xy[1]);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance based on XY-coordinate array.\n   */\n  public static fromXY(xy: Array<number>): Position {\n    return new Position(xy[0], xy[1]);\n  }\n\n  /**\n   * @param x - a positive integer between 0 and 7 both inclusive.\n   * @param y - a positive integer between 0 and 7 both inclusive.\n   */\n  public constructor(x: number, y: number, skipValidation = false) {\n    if (!skipValidation) {\n      assertValidXY([x, y], 'x and y');\n    }\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Returns the board position in A1-notation.\n   */\n  public get A1(): string {\n    return from_XY_to_A1([this.x, this.y]);\n  }\n\n  /**\n   * Returns the board position as an XY-coordinate array.\n   */\n  public get XY(): Array<number> {\n    return [this.x, this.y];\n  }\n\n  /**\n   * Deep-equality-compares the Position instance to another Position instance.\n   *\n   * @param position - The Position instance to compare.\n   */\n  public compare(position: Position): boolean {\n    return this.x === position.x && this.y === position.y;\n  }\n\n  /**\n   * Returns a clone of the instance.\n   */\n  public clone(): Position {\n    return new Position(this.x, this.y, true);\n  }\n\n  /**\n   * Returns the instance as a normal array.\n   */\n  public toArray(): Array<number> {\n    return [this.x, this.y];\n  }\n\n  /**\n   * Modulates the XY-position coordinate and returns a new Position instance equivalent to it, or null if that position\n   * is out of bounds of the board.\n   *\n   * @param xBy - The number of chess grid units to module by on the x-axis.\n   * @param yBy - The number of chess grid units to module by on the y-axis.\n   * @returns `null` if the resulting position is out of bounds.\n   */\n  private getModulation(xBy: number, yBy: number): Position | null {\n    try {\n      return new Position(this.x + xBy, this.y + yBy);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved up by 1 from the position on the board\n   * that this instance describes.\n   */\n  public getUp(): Position | null {\n    return this.getModulation(0, 1);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved down by 1 from the position on the board\n   * that this instance describes.\n   */\n  public getDown(): Position | null {\n    return this.getModulation(0, -1);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved left by 1 from the position on the board\n   * that this instance describes.\n   */\n  public getLeft(): Position | null {\n    return this.getModulation(-1, 0);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved right by 1 from the position on the board\n   * that this instance describes.\n   */\n  public getRight(): Position | null {\n    return this.getModulation(1, 0);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved up by 1 and left by 1 from the position on\n   * the board that this instance describes.\n   */\n  public getUpLeft(): Position | null {\n    return this.getModulation(-1, 1);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved up by 1 and right by 1 from the position\n   * on the board that this instance describes.\n   */\n  public getUpRight(): Position | null {\n    return this.getModulation(1, 1);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved down by 1 and left by 1 from the position\n   * on the board that this instance describes.\n   */\n  public getDownLeft(): Position | null {\n    return this.getModulation(-1, -1);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved down by 1 and right by 1 from the position\n   * on the board that this instance describes.\n   */\n  public getDownRight(): Position | null {\n    return this.getModulation(1, -1);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved up by 2 from the position on the board\n   * that this instance describes.\n   */\n  public getUpUp(): Position | null {\n    return this.getModulation(0, 2);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved down by 2 from the position on the board\n   * that this instance describes.\n   */\n  public getDownDown(): Position | null {\n    return this.getModulation(0, -2);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved up by 2 and left by 1 from the position on\n   * the board that this instance describes.\n   */\n  public getUpUpLeft(): Position | null {\n    return this.getModulation(-1, 2);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved up by 2 and right by 1 from the position\n   * on the board that this instance describes.\n   */\n  public getUpUpRight(): Position | null {\n    return this.getModulation(1, 2);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved down by 2 and left by 1 from the position\n   * on the board that this instance describes.\n   */\n  public getDownDownLeft(): Position | null {\n    return this.getModulation(-1, -2);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved down by 2 and right by 1 from the position\n   * on the board that this instance describes.\n   */\n  public getDownDownRight(): Position | null {\n    return this.getModulation(1, -2);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved left by 2 and up by 1 from the position on\n   * the board that this instance describes.\n   */\n  public getLeftLeftUp(): Position | null {\n    return this.getModulation(-2, 1);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved left by 2 and up by 1 from the position on\n   * the board that this instance describes.\n   */\n  public getLeftLeftDown(): Position | null {\n    return this.getModulation(-2, -1);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved right by 2 and up by 1 from the position\n   * on the board that this instance describes.\n   */\n  public getRightRightUp(): Position | null {\n    return this.getModulation(2, 1);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved right by 2 and down by 1 from the position\n   * on the board that this instance describes.\n   */\n  public getRightRightDown(): Position | null {\n    return this.getModulation(2, -1);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all straight (horizontal and vertical) directions.\n   */\n  public getAllStraight(): Array<Position> {\n    return arrClean([\n      this.getUp(),\n      this.getDown(),\n      this.getLeft(),\n      this.getRight(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all diagonal directions.\n   */\n  public getAllDiagonal(): Array<Position> {\n    return arrClean([\n      this.getUpLeft(),\n      this.getUpRight(),\n      this.getDownLeft(),\n      this.getDownRight(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all straight (horizontal and vertical) and\n   * diagonal directions.\n   */\n  public getAllStraightAndDiagonal(): Array<Position> {\n    return [...this.getAllStraight(), ...this.getAllDiagonal()];\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved one time equivalent of all legal knight-piece moves.\n   */\n  public getAllKnightMovePositions(): Array<Position> {\n    return arrClean([\n      this.getUpUpLeft(),\n      this.getUpUpRight(),\n      this.getDownDownLeft(),\n      this.getDownDownRight(),\n      this.getLeftLeftUp(),\n      this.getLeftLeftDown(),\n      this.getRightRightUp(),\n      this.getRightRightDown(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by a provided modulator function recursively until the\n   * modulator's returned Position instance becomes out of bounds of the board.\n   *\n   * @param modulator - The modulator method to use for recursion.\n   */\n  private getRecursive(modulator: () => Position | null): Array<Position> {\n    const res = [];\n    let pos: Position | null;\n    pos = this;\n    while ((pos = modulator.call(pos))) {\n      res.push(pos);\n    }\n    return res;\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getUpRecursive(): Array<Position> {\n    return this.getRecursive(this.getUp);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getDownRecursive(): Array<Position> {\n    return this.getRecursive(this.getDown);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving left by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving right by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 and left by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getUpLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getUpLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 and right by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getUpRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getUpRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 and left by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getDownLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getDownLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 and right by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getDownRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getDownRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all straight\n   * (horizontal and vertical) directions from the position on the board that this instance describes until the\n   * resulting Position instance becomes out of bounds of the board.\n   */\n  public getAllStraightRecursive(): Array<Array<Position>> {\n    return [\n      this.getUpRecursive(),\n      this.getDownRecursive(),\n      this.getLeftRecursive(),\n      this.getRightRecursive(),\n    ];\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all diagonal\n   * directions from the position on the board that this instance describes until the resulting Position instance\n   * becomes out of bounds of the board.\n   */\n  public getAllDiagonalRecursive(): Array<Array<Position>> {\n    return [\n      this.getUpLeftRecursive(),\n      this.getUpRightRecursive(),\n      this.getDownLeftRecursive(),\n      this.getDownRightRecursive(),\n    ];\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all straight\n   * (horizontal and vertical) and diagonal directions from the position on the board that this instance describes until\n   * the resulting Position instance becomes out of bounds of the board.\n   */\n  public getAllStraightAndDiagonalRecursive(): Array<Array<Position>> {\n    return [\n      ...this.getAllStraightRecursive(),\n      ...this.getAllDiagonalRecursive(),\n    ];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from '../Position';\n\n/**\n * {Piece} Queen class.\n */\nexport class Queen extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllStraightAndDiagonalRecursive() : [];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from '../Position';\n\n/**\n * {Piece} Rook class.\n */\nexport class Rook extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    return pos.getAllStraightRecursive();\n  }\n\n  /**\n   * Returns whether a move to a target position is a castling move.\n   */\n  public isCastleMove(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    if (!targetPiece) return false;\n    // it is not necessary to check whether the taget piece is an own piece since an enemy piece will never be in the\n    // designated position without having moved, which gets checked.\n    return (\n      targetPiece.type === 'King' && !targetPiece.hasMoved && !this.hasMoved\n    );\n  }\n}\n","import { Position } from './Position';\nimport { Pawn } from './pieces/Pawn';\nimport { Knight } from './pieces/Knight';\nimport { Bishop } from './pieces/Bishop';\nimport { Queen } from './pieces/Queen';\nimport { Rook } from './pieces/Rook';\nimport { King } from './pieces/King';\nimport type { Piece } from './pieces/AbstractPiece';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\n\n/**\n * A class that represents a player in a chess Game.\n */\nexport class Player {\n  /**\n   * The game that this Player instance belongs to.\n   */\n  public game: Game;\n\n  /**\n   * The color of the player. Can be `white` or `black`.\n   */\n  public color: string;\n\n  /**\n   * An array containing the board Pieces that the player has.\n   */\n  public pieces: Piece[];\n\n  /**\n   * @param game - The game that this Player instance belongs to.\n   * @param color - The color of the player. Can be `white` or `black`.\n   * @throws {Error} on invalid color.\n   */\n  public constructor(game: Game, color: string) {\n    this.game = game;\n    this.color = color;\n\n    let row1: string, row2: string;\n    if (color === 'white') {\n      row1 = '1';\n      row2 = '2';\n    } else if (color === 'black') {\n      row1 = '8';\n      row2 = '7';\n    } else {\n      throw new Error('Invalid color');\n    }\n\n    this.pieces = [\n      new King(this, 0, Position.fromA1('E' + row1)),\n      new Queen(this, 1, Position.fromA1('D' + row1)),\n      new Bishop(this, 2, Position.fromA1('C' + row1)),\n      new Bishop(this, 3, Position.fromA1('F' + row1)),\n      new Knight(this, 4, Position.fromA1('B' + row1)),\n      new Knight(this, 5, Position.fromA1('G' + row1)),\n      new Rook(this, 6, Position.fromA1('A' + row1)),\n      new Rook(this, 7, Position.fromA1('H' + row1)),\n      new Pawn(this, 8, Position.fromA1('A' + row2)),\n      new Pawn(this, 9, Position.fromA1('B' + row2)),\n      new Pawn(this, 10, Position.fromA1('C' + row2)),\n      new Pawn(this, 11, Position.fromA1('D' + row2)),\n      new Pawn(this, 12, Position.fromA1('E' + row2)),\n      new Pawn(this, 13, Position.fromA1('F' + row2)),\n      new Pawn(this, 14, Position.fromA1('G' + row2)),\n      new Pawn(this, 15, Position.fromA1('H' + row2)),\n    ];\n  }\n\n  /**\n   * Returns an array of Moves that the player has made.\n   */\n  public get moves(): Move[] {\n    return this.game.moves.filter((move) => {\n      return move.piece.player === this;\n    });\n  }\n}\n","import { Board } from './Board';\nimport { Player } from './Player';\nimport { Move } from './Move';\nimport { isEven, uInt8ToBytes, bytesToUint8Array } from './util';\nimport { Position } from './Position';\nimport { Piece } from './pieces/AbstractPiece';\n\n/**\n * The default exported class from which the chess game is controlled.\n */\nexport class Game {\n  /**\n   * Parse and optionally validate JSON data.\n   *\n   * @param data - A previously stringified Game instance.\n   * @param skipValidation - skips validation of the move's legality according to the rules of the game.\n   * @throws {TypeError} on invalid JSON data.\n   */\n  private static parseJSON(\n    data: string,\n    skipValidation: boolean,\n  ): Array<number> {\n    let moves;\n    try {\n      moves = JSON.parse(data);\n      if (!skipValidation) {\n        if (!Number.isInteger(moves.length / 4)) {\n          throw new TypeError('Invalid length.');\n        }\n        for (let i = 0; i < moves.length; i++) {\n          if (!Number.isInteger(moves[i])) {\n            throw new TypeError('Expected an array of integers only.');\n          }\n        }\n      }\n    } catch (e) {\n      throw new TypeError('Invalid JSON data. ' + e.message);\n    }\n    return moves;\n  }\n\n  /**\n   * Recreates a Game instance from a previously parsed stringified or serialized Game instance converted to array.\n   * Used internally by @see Game.fromJSON() and @see Game.deserialize()\n   *\n   * @param data - A previously stringified Game instance.\n   * @param skipValidation - skips validation of the move's legality according to the rules of the game.\n   */\n  private static fromArray(data: Array<number>, skipValidation: boolean) {\n    const game = new Game();\n    for (let i = 0; i < data.length; i += 4) {\n      game.move(\n        new Position(data[i], data[i + 1]),\n        new Position(data[i + 2], data[i + 3]),\n        skipValidation,\n      );\n    }\n    return game;\n  }\n\n  /**\n   * Recreates a Game instance from a previously stringified Game instance.\n   * @see Game.prototype.toJSON()\n   *\n   * @param data - A previously stringified Game instance.\n   * @param skipValidation - skips validation of the move's legality according to the rules of the game as well as the data.\n   * @throws {Error} on invalid JSON data.\n   */\n  public static fromJSON(data: string, skipValidation = false): Game {\n    return this.fromArray(this.parseJSON(data, skipValidation), skipValidation);\n  }\n\n  /**\n   * Recreates a Game instance from binary data.\n   * @see Game.prototype.serialize()\n   *\n   * @param data - A previously stringified Game instance.\n   * @param skipValidation - skips validation of the move's legality according to the rules of the game as well as the data.\n   * @throws {Error} on invalid JSON data.\n   */\n  public static deserialze(data: Uint8Array, skipValidation = false): Game {\n    return this.fromArray(uInt8ToBytes(data), skipValidation);\n  }\n\n  /**\n   * The game board.\n   */\n  public board: Board;\n\n  /**\n   * White player.\n   */\n  public white: Player;\n\n  /**\n   * Black player.\n   */\n  public black: Player;\n\n  /**\n   * An array containing all moves made in the game.\n   */\n  public moves: Array<Move>;\n\n  /**\n   * Creates and initializes a new chess game.\n   */\n  public constructor() {\n    this.board = new Board(this);\n    this.white = new Player(this, 'white');\n    this.black = new Player(this, 'black');\n    this.moves = [];\n  }\n\n  /**\n   * Returns whether it is white player's turn to move.\n   */\n  public get isWhitesTurnToMove(): boolean {\n    return isEven(this.moves.length);\n  }\n\n  /**\n   * Returns whether it is black player's turn to move.\n   */\n  public get isBlacksTurnToMove(): boolean {\n    return !isEven(this.moves.length);\n  }\n\n  /**\n   * Returns whether it is black player's turn to move.\n   */\n  public get activePlayer(): Player {\n    return this.isWhitesTurnToMove ? this.white : this.black;\n  }\n\n  /**\n   * Iterate each piece on the board.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   * @returns true if iteration was ended before completion.\n   */\n  public forEachActivePiece(\n    f: (piece?: Piece) => boolean | void,\n  ): boolean | void {\n    const w = this.white.pieces;\n    const b = this.black.pieces;\n    for (let i = 0; i < 16; i++) {\n      if ((!w[i].isTaken && f(w[i])) || (!b[i].isTaken && f(b[i]))) {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Iterate each white piece on the board.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   * @returns true if iteration was ended before completion.\n   */\n  private forEachActiveWhitePiece(\n    f: (piece?: Piece) => boolean | void,\n  ): boolean | void {\n    const w = this.white.pieces;\n    for (let i = 0; i < 16; i++) {\n      if (!w[i].isTaken && f(w[i])) {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Iterate each black piece on the board.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   * @returns true if iteration was ended before completion.\n   */\n  private forEachActiveBlackPiece(\n    f: (piece?: Piece) => boolean | void,\n  ): boolean | void {\n    const b = this.black.pieces;\n    for (let i = 0; i < 16; i++) {\n      if (!b[i].isTaken && f(b[i])) {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Iterate each piece on the board belonging to the player whose turn it is to move.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   * @returns true if iteration was ended before completion.\n   */\n  public forEachCurrentPlayerActivePiece(\n    f: (piece?: Piece) => boolean | void,\n  ): boolean | void {\n    return this.isWhitesTurnToMove\n      ? this.forEachActiveWhitePiece(f)\n      : this.forEachActiveBlackPiece(f);\n  }\n\n  /**\n   * Ensures the argument is converted into a Position instance.\n   *\n   * @param from - a Position instance, A1-notation string or XY-coordinate-array.\n   */\n  private ensurePosition(from: Position | string | Array<number>): Position {\n    return from instanceof Position\n      ? from\n      : typeof from === 'string'\n      ? Position.fromA1(from)\n      : Position.fromXY(from);\n  }\n\n  /**\n   * Get a Piece instance from the board by either Position, an A1 string or XY-coordinates\n   *\n   * @param from - a Position instance, A1-notation string or XY-coordinate-array. If a Piece instance is passed, it is returned.\n   */\n  private ensurePiece(\n    from?: Position | string | Array<number> | Piece,\n  ): Piece | null {\n    return !from\n      ? null\n      : from instanceof Piece\n      ? from\n      : this.board.getPieceByPosition(this.ensurePosition(from));\n  }\n\n  /**\n   * Iterate each valid move position for either all active player pieces or a given piece.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   * @param pieceOrCoordinate - only iterate a single piece's valid move positions. Can be the Piece to move, or where\n   * to find the piece which can be a Position instance, XY-array or A1-notation string.\n   * @returns true if iteration was ended before completion.\n   */\n  public forEachValidMove(\n    f: (position?: Position, piece?: Piece) => boolean | void,\n    pieceOrCoordinate?: Piece | Position | string | Array<number>,\n  ): boolean | void {\n    const piece = this.ensurePiece(pieceOrCoordinate);\n    return piece\n      ? piece.forEachValidMovePosition((pos) => {\n          return f(pos, piece);\n        })\n      : this.forEachCurrentPlayerActivePiece((piece) => {\n          if (piece) {\n            return piece.forEachValidMovePosition((pos) => {\n              return f(pos, piece);\n            });\n          } else return;\n        });\n  }\n\n  /**\n   * Moves a piece on the board.\n   * If the target position already has a piece belonging to the opposing player, it is removed from the board.\n   *\n   * @param pieceOrCoordinate - The Piece to move, or where to find the piece which can be a Position instance, XY-array\n   * or A1-notation string.\n   * @param to - Where to move to.\n   * @param skipValidation - skips validation of the move's legality according to the rules of the game. This is used\n   * internally for performance reasons when cloning a game, which repeats the moves that were previously validated.\n   * @throws {Error} on invalid move, unless `skipValidation` is true.\n   * @returns self - is chainable.\n   */\n  public move(\n    pieceOrCoordinate: Piece | Position,\n    to: Position | string | Array<number>,\n    skipValidation?: boolean,\n  ): Game {\n    to = this.ensurePosition(to);\n    const piece = this.ensurePiece(pieceOrCoordinate);\n    if (piece && (skipValidation || piece.isValidMove(to))) {\n      const targetPiece = piece.game.board.getPieceByPosition(to);\n      let move;\n      if (piece.isCastleMove(to)) {\n        move = new Move(piece, to);\n        this.board.registerSwap(move);\n        if (targetPiece) {\n          targetPiece.registerMove(new Move(targetPiece, move.from));\n        }\n      } else {\n        move = new Move(piece, to, targetPiece);\n        this.board.registerMove(move);\n        if (targetPiece) {\n          targetPiece.remove();\n        }\n      }\n      piece.registerMove(move);\n      this.moves.push(move);\n    } else {\n      throw new Error('Invalid move.');\n    }\n    return this;\n  }\n\n  /**\n   * Returns a deep clone of the game instance.\n   */\n  public clone(): Game {\n    const game = new Game();\n    const w = game.white.pieces;\n    const b = game.black.pieces;\n    const moves = this.moves;\n    for (let i = 0; i < moves.length; i++) {\n      const piece = moves[i].piece;\n      game.move(\n        (piece.color === 'white' ? w : b)[piece.index],\n        moves[i].to.clone(),\n        true,\n      );\n    }\n    return game;\n  }\n\n  /**\n   * Method used by JSON.stringify to return string-serialized data necessary for completely reconstructing the Game\n   * instance.\n   * @see Game.fromJSON()\n   */\n  public toJSON(): Array<number> {\n    const moves = this.moves;\n    const l = moves.length;\n    const res = new Array(l * 4);\n    for (let move, i = 0; i < l; i++) {\n      move = moves[i];\n      res[i * 4 + 0] = move.from.x;\n      res[i * 4 + 1] = move.from.y;\n      res[i * 4 + 2] = move.to.x;\n      res[i * 4 + 3] = move.to.y;\n    }\n    return res;\n  }\n\n  /**\n   * Serializes the data necessary for completely reconstructing the Game instance to binary.\n   * @see Game.deserialize()\n   */\n  public serialize(): Uint8Array {\n    return bytesToUint8Array(this.toJSON());\n  }\n}\n"],"names":[],"mappings":"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AAG,IAAI,CAAC,CAAC;gBAC/C,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;gBAChD,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;gBAChD,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;gBAChD,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;gBAChD,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;gBAC9C,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;gBAC9C,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;gBAC9C,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;gBAC9C,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;gBAC/C,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;gBAC/C,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;gBAC/C,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;gBAC/C,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;gBAC/C,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,CAA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"}