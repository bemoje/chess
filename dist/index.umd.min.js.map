{"version":3,"file":"index.umd.min.js","sources":["../src/pieces/AbstractPiece.ts","../src/pieces/Bishop.ts","../src/util.ts","../src/coordinates.ts","../src/Board.ts","../src/pieces/King.ts","../src/pieces/Knight.ts","../src/Move.ts","../src/pieces/Pawn.ts","../src/Position.ts","../src/pieces/Queen.ts","../src/pieces/Rook.ts","../src/Player.ts","../src/Game.ts"],"sourcesContent":["import type { Player } from '../Player';\nimport type { Position } from '../Position';\nimport type { Game } from '../Game';\nimport type { Move } from '../Move';\n\n/**\n * Abstract piece class that each type of Piece (class) will extend.\n */\nexport abstract class Piece {\n  /**\n   * The Player who owns the Piece.\n   */\n  public player: Player;\n\n  /**\n   * Manually set piece index value. Only unique per Player instance.\n   */\n  public index: number;\n\n  /**\n   * The Position of the piece.\n   */\n  public position: Position | null;\n\n  /**\n   * The number of times the piece has moved.\n   */\n  public moveCount: number;\n\n  /**\n   * @param player - The Player who owns the Piece.\n   * @param index - Manually set piece index value. Only unique per Player instance.\n   * @param position - The Position of the piece.\n   */\n  public constructor(player: Player, index: number, position: Position) {\n    this.player = player;\n    this.index = index;\n    this.position = position;\n    this.moveCount = 0;\n    this.player.game.board.setPiece(this);\n  }\n\n  /**\n   * Returns the Game instance that this Piece is associated with.\n   */\n  public get game(): Game {\n    return this.player.game;\n  }\n\n  /**\n   * Returns the class name of the Piece.\n   */\n  public get type(): string {\n    return this.constructor.name;\n  }\n\n  /**\n   * Returns whether or not this Piece has made any moves yet.\n   */\n  public get hasMoved(): boolean {\n    return this.moveCount > 0;\n  }\n\n  /**\n   * Returns the player color of the Player instance that this Piece belongs to.\n   */\n  public get color(): string {\n    return this.player.color;\n  }\n\n  /**\n   * Returns whether this Piece is still on the board.\n   */\n  public get isTaken(): boolean {\n    return this.position === null;\n  }\n\n  /**\n   * Returns an array of Move instances that represent moves made by this Piece.\n   */\n  public get moves(): Move[] {\n    return this.player.game.moves.filter((move) => {\n      return move.piece === this;\n    });\n  }\n\n  /**\n   * Increments the moveCount number property and sets the position property.\n   */\n  public registerMove(move: Move): void {\n    this.moveCount++;\n    this.position = move.to.clone();\n  }\n\n  /**\n   * Sets the position property to null, which means that this Piece is no longer on the board.\n   */\n  public remove(): void {\n    this.position = null;\n  }\n\n  /**\n   * Returns whether there is a 'friendly' Piece at a given Position.\n   */\n  protected isMoveTargetOwnPiece(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    return targetPiece !== null && this.player === targetPiece.player;\n  }\n\n  /**\n   * Returns whether it is this Piece's Player's turn to move.\n   */\n  protected get isOwnTurn(): boolean {\n    return this.game.activePlayer === this.player;\n  }\n\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected abstract getMovePositionsWithinBounds(): Array<\n    Position | Array<Position>\n  >;\n\n  /**\n   * Iterates all valid move Position instances for this Piece.\n   *\n   * @param f - a callback function to invoke for each valid move position. If it returns true, iteration ends.\n   * @returns true if iteration was ended before completion.\n   */\n  public forEachValidMovePosition(\n    f: (position: Position) => boolean | void,\n  ): boolean | void {\n    if (this.isOwnTurn) {\n      const positions = this.getMovePositionsWithinBounds();\n      for (let i = 0; i < positions.length; i++) {\n        const item = positions[i];\n        if (Array.isArray(item)) {\n          // item is an array of positions where the array represents a move-direction. Used for pieces that can move\n          // further than by one slot on the game board.\n          for (let j = 0; j < item.length; j++) {\n            if (item[j] && this.isMoveTargetOwnPiece(item[j])) {\n              if (f(item[j])) {\n                return true;\n              }\n            } else {\n              // an own piece is in the way, so all following positions for the current direction will always be invalid.\n              break;\n            }\n          }\n        } else if (this.isMoveTargetOwnPiece(item)) {\n          if (f(item)) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns whether a move to a target position is a castling move.\n   * The King and Rook classes override this method.\n   */\n  public isCastleMove(_target: Position): boolean {\n    return false;\n  }\n\n  /**\n   * Returns whether a move to a position is a valid move.\n   */\n  public isValidMove(target: Position): boolean {\n    return (\n      this.isCastleMove(target) ||\n      !!this.forEachValidMovePosition((position) => {\n        return position.compare(target);\n      })\n    );\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from '../Position';\n\n/**\n * {Piece} Bishop class.\n */\nexport class Bishop extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllDiagonalRecursive() : [];\n  }\n}\n","import type { Position } from './Position';\n\n/**\n * Removes elements of a given array if they do not evaluate to true.\n */\nexport function arrClean(arr: Array<Position | null>): Array<Position> {\n  const res = [];\n  const l = arr.length;\n  for (let i = 0; i < l; i++) {\n    const pos = arr[i];\n    if (pos) {\n      res.push(pos);\n    }\n  }\n  return res;\n}\n\n/**\n * Returns the numeric difference between to numbers.\n */\nexport function numericDifference(n1: number, n2: number): number {\n  const dist = n1 - n2;\n  return dist < 0 ? dist * -1 : dist;\n}\n\n/**\n * Returns an assertion function that expects [string] 'expectedToBe' evaluated by [Function] 'validate'\n */\nexport function createAssertFunction<T>(\n  expectedToBe: string,\n  validate: (arg: T) => boolean,\n): (arg: T, name?: string) => void {\n  const f = function (arg: T, name = 'arg') {\n    if (!validate(arg)) {\n      throw new TypeError(\n        `Expected ${name} to be ${expectedToBe}. ${name}: ${arg}`,\n      );\n    }\n  };\n  Object.defineProperty(f, 'name', {\n    value: validate.name.replace(/^is/, 'assert'),\n  });\n  return f;\n}\n\n/**\n * Returns whether a number is an even number.\n */\nexport function isEven(n: number): boolean {\n  return n % 2 == 0;\n}\n\n/**\n * Converts an Uint8Array to an array of integers between 0 and 255.\n *\n * @param uInt8 - An Uint8Array instance.\n */\nexport function uInt8ToBytes(uInt8: Uint8Array): Array<number> {\n  const l = uInt8.length;\n  const res = new Array(l);\n  for (let i = 0; i < l; i++) {\n    res[i] = uInt8[i];\n  }\n  return res;\n}\n\n/**\n * Converts an array of bytes to a Uint8Array.\n *\n * @param arr - An array of integers between 0 and 255.\n */\nexport function bytesToUint8Array(arr: Array<number>): Uint8Array {\n  const l = arr.length;\n  const res = new Uint8Array(l);\n  for (let i = 0; i < l; i++) {\n    res[i] = arr[i];\n  }\n  return res;\n}\n","import { createAssertFunction } from './util';\n\nconst A_CHAR_CODE = 'A'.charCodeAt(0);\n\n/**\n * Converts the first value of an XY-coordinate to A1-notation.\n */\nexport function from_X_to_A(x: number): string {\n  return String.fromCharCode(x + A_CHAR_CODE);\n}\n\n/**\n * Converts the second value of an XY-coordinate to A1-notation.\n */\nexport function from_Y_to_1(y: number): string {\n  return (y + 1).toString();\n}\n\n/**\n * Converts the first character of A1-notation to the first value of an XY-coordinate.\n */\nexport function from_A_to_X(a: string): number {\n  return a.toUpperCase().charCodeAt(0) - A_CHAR_CODE;\n}\n\n/**\n * Converts the second character of A1-notation to the second value of an XY-coordinate.\n */\nexport function from_1_to_Y(n: string): number {\n  return Number(n.charAt(0)) - 1;\n}\n\n/**\n * Converts a XY-coordinate-array to an A1-notation string.\n */\nexport function from_XY_to_A1(pos: Array<number>): string {\n  return from_X_to_A(pos[0]) + from_Y_to_1(pos[1]);\n}\n\n/**\n * Converts an A1-notation string to a XY-coordinate-array.\n */\nexport function from_A1_to_XY(a1: string): Array<number> {\n  return [from_A_to_X(a1.charAt(0)), from_1_to_Y(a1.charAt(1))];\n}\n\n/**\n * Returns whether the argument is a positive integer where 0 <= arg <= 7.\n */\nexport function isValidXYPoint(n: number): boolean {\n  return n >= 0 && n <= 7;\n}\n\n/**\n * Returns whether both points in an XY-coordinate is a positive integer where 0 <= arg <= 7.\n */\nexport function isValidXY(pos: Array<number>): boolean {\n  return isValidXYPoint(pos[0]) && isValidXYPoint(pos[1]);\n}\n\n/**\n * Returns whether a string is valid A1-notation.\n */\nexport function isValidA1(a1: string): boolean {\n  return a1.length === 2 && isValidXY(from_A1_to_XY(a1));\n}\n\n/**\n * Throws a TypeError if the argument is not a valid XY-coordinate point.\n * @see isValidXYPoint\n *\n * @function assertValidXYPoint\n * @throws {TypeError}\n */\nexport const assertValidXYPoint = createAssertFunction(\n  'a positive integer between 0 and 7',\n  isValidXYPoint,\n);\n\n/**\n * Throws a TypeError if the argument is not a valid XY-coordinate.\n * @see isValidXY\n *\n * @function assertValidXY\n * @throws {TypeError}\n */\nexport const assertValidXY = createAssertFunction(\n  'an array containing two positive integers between 0 and 7',\n  isValidXY,\n);\n\n/**\n * Throws a TypeError if the argument is not valid A1-notation.\n * @see isValidA1\n *\n * @function assertValidA1\n * @throws {TypeError}\n */\nexport const assertValidA1 = createAssertFunction(\n  'a valid A1-notation string',\n  isValidA1,\n);\n","import { from_A1_to_XY } from './coordinates';\nimport type { Position } from './Position';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\nimport type { Piece } from './pieces/AbstractPiece';\n\n/**\n * A class that acts as a data view of all the pieces that offers faster lookups than iterating pieces.\n */\nexport class Board {\n  /**\n   * The Game instance that the board belongs to.\n   */\n  public game: Game;\n\n  /**\n   * A 2D array grid representing the game board.\n   */\n  public grid: Array<Array<Piece | null>>;\n\n  /**\n   * @param game - The Game instance that the board belongs to.\n   */\n  public constructor(game: Game) {\n    this.game = game;\n    this.grid = [];\n    let i = 0;\n    while (i < 8) {\n      this.grid.push(new Array(8).fill(null, 0, 7));\n      i++;\n    }\n  }\n\n  /**\n   * Returns the piece at the given XY-coordinates or null if no piece is found there.\n   *\n   * @param x - The X coordinate\n   * @param y - The Y coordinate\n   */\n  public getPieceByXY(x: number, y: number): Piece | null {\n    return this.grid[y][x];\n  }\n\n  /**\n   * Returns the piece at the given Position or null if no piece is found there.\n   *\n   * @param position - The position on the game board by which to find the Piece instance there.\n   */\n  public getPieceByPosition(position: Position): Piece | null {\n    return this.getPieceByXY(position.x, position.y);\n  }\n\n  /**\n   * Returns the piece at the given A1-notation-coordinates or null if no piece is found there.\n   *\n   * @param a1 - An A1-notation string.\n   */\n  public getPieceByA1(a1: string): Piece | null {\n    const [x, y] = from_A1_to_XY(a1);\n    return this.getPieceByXY(x, y);\n  }\n\n  /**\n   * Moves a piece to the board.\n   *\n   * @param piece - The piece to move.\n   */\n  public setPiece(piece: Piece): void {\n    const pos = piece.position;\n    if (pos) this.grid[pos.y][pos.x] = piece;\n  }\n\n  /**\n   * Removes a piece from the board.\n   * This method does not check legality or whether this action is part of a move in the game.\n   *\n   * @param piece - The piece to remove.\n   */\n  public removePiece(piece: Piece | null): void {\n    if (piece) {\n      const pos = piece.position;\n      if (pos) this.grid[pos.y][pos.x] = null;\n    }\n  }\n\n  /**\n   * Updates the board instance based on the information contained within a provided Move instance.\n   *\n   * @param move - The Move instance containing the information needed to update the board.\n   */\n  public registerMove(move: Move): void {\n    const from = move.from;\n    const to = move.to;\n    const piece = this.grid[from.y][from.x];\n    this.grid[to.y][to.x] = piece;\n    this.grid[from.y][from.x] = null;\n  }\n\n  /**\n   * Updates the board instance based on the information contained within a provided Move instance that is known to make\n   * out a swap (used for castling moves).\n   *\n   * @param move - The Move instance containing the information needed to update the board.\n   */\n  public registerSwap(move: Move): void {\n    const from = move.from;\n    const to = move.to;\n    const pieceFrom = this.grid[from.y][from.x];\n    const pieceTo = this.grid[to.y][to.x];\n    this.grid[to.y][to.x] = pieceFrom;\n    this.grid[from.y][from.x] = pieceTo;\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from '../Position';\n\n/**\n * {Piece} King class.\n */\nexport class King extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    return pos.getAllStraightAndDiagonal();\n  }\n\n  /**\n   * Returns whether a move to a target position is a castling move.\n   */\n  public isCastleMove(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    if (!targetPiece) return false;\n    // it is not necessary to check whether the taget piece is an own piece since an enemy piece will never be in the\n    // designated position without having moved, which gets checked.\n    return (\n      targetPiece.type === 'Rook' && !targetPiece.hasMoved && !this.hasMoved\n    );\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from '../Position';\n\n/**\n * {Piece} Knight class.\n */\nexport class Knight extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllKnightMovePositions() : [];\n  }\n}\n","import type { Piece } from './pieces/AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Move {\n  public piece: Piece;\n  public takes: Piece | null;\n  public from: Position;\n  public to: Position;\n\n  public constructor(piece: Piece, to: Position, takes: Piece | null = null) {\n    const pos = piece.position;\n    if (!pos) {\n      throw new Error('Cannot move a piece that is not on the board.');\n    }\n\n    this.piece = piece;\n    this.takes = takes;\n    this.from = pos.clone();\n    this.to = to.clone();\n  }\n\n  /**\n   * Stringifies the data necessary for completely reconstructing the Move instance.\n   */\n  public toJSON(): Array<number> {\n    return [this.from.x, this.from.y, this.to.x, this.to.y];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from '../Position';\n\n/**\n * {Piece} Pawn class.\n */\nexport class Pawn extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const board = this.game.board;\n    const pos = this.position;\n    const res = [];\n\n    if (!pos) {\n      return [];\n    }\n\n    if (this.color === 'white') {\n      const upPos = pos.getUp();\n      if (upPos) {\n        res.push(upPos);\n      }\n\n      const upUpPos = pos.getUpUp();\n      if (upUpPos && !this.hasMoved) {\n        res.push(upUpPos);\n      }\n\n      const upLeftPos = pos.getUpLeft();\n      if (upLeftPos) {\n        const diagLeftPiece = board.getPieceByPosition(upLeftPos);\n        if (diagLeftPiece) {\n          const diagLeftPos = diagLeftPiece.position;\n          if (diagLeftPos && diagLeftPiece.color === 'black') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n\n      const upRightPos = pos.getUpRight();\n      if (upRightPos) {\n        const diagRightPiece = board.getPieceByPosition(upRightPos);\n        if (diagRightPiece) {\n          const diagLeftPos = diagRightPiece.position;\n          if (diagLeftPos && diagRightPiece.color === 'black') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n    } else {\n      const downPos = pos.getDown();\n      if (downPos) {\n        res.push(downPos);\n      }\n\n      const downDownPos = pos.getDownDown();\n      if (downDownPos && !this.hasMoved) {\n        res.push(downDownPos);\n      }\n\n      const downLeftPos = pos.getDownLeft();\n      if (downLeftPos) {\n        const diagLeftPiece = board.getPieceByPosition(downLeftPos);\n        if (diagLeftPiece) {\n          const diagLeftPos = diagLeftPiece.position;\n          if (diagLeftPos && diagLeftPiece.color === 'white') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n\n      const downRightPos = pos.getDownRight();\n      if (downRightPos) {\n        const diagRightPiece = board.getPieceByPosition(downRightPos);\n        if (diagRightPiece) {\n          const diagLeftPos = diagRightPiece.position;\n          if (diagLeftPos && diagRightPiece.color === 'white') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n    }\n    return res;\n  }\n}\n","import { from_A1_to_XY, from_XY_to_A1, assertValidXY } from './coordinates';\nimport { arrClean } from './util';\n\nexport class Position {\n  /**\n   * The X coordinate.\n   */\n  public x: number;\n\n  /**\n   * The Y coordinate.\n   */\n  public y: number;\n\n  /**\n   * Returns a new Position instance based on A1-notation input.\n   */\n  public static fromA1(a1: string): Position {\n    const xy = from_A1_to_XY(a1);\n    return new Position(xy[0], xy[1]);\n  }\n\n  /**\n   * Returns a new Position instance based on XY-coordinate array.\n   */\n  public static fromXY(xy: Array<number>): Position {\n    return new Position(xy[0], xy[1]);\n  }\n\n  /**\n   * @param x - a positive integer between 0 and 7 both inclusive.\n   * @param y - a positive integer between 0 and 7 both inclusive.\n   */\n  public constructor(x: number, y: number, skipValidation = false) {\n    if (!skipValidation) {\n      assertValidXY([x, y], 'x and y');\n    }\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Returns the board position in A1-notation.\n   */\n  public get A1(): string {\n    return from_XY_to_A1([this.x, this.y]);\n  }\n\n  /**\n   * Returns the board position as an XY-coordinate array.\n   */\n  public get XY(): Array<number> {\n    return [this.x, this.y];\n  }\n\n  /**\n   * Deep-equality-compares the Position instance to another Position instance.\n   */\n  public compare(position: Position): boolean {\n    return this.x === position.x && this.y === position.y;\n  }\n\n  /**\n   * Returns a clone of the instance.\n   * Out of bounds -validation is skipped.\n   */\n  public clone(): Position {\n    return new Position(this.x, this.y, true);\n  }\n\n  /**\n   * Returns the instance as a normal array.\n   */\n  public toArray(): Array<number> {\n    return [this.x, this.y];\n  }\n\n  /**\n   * Modulates the XY-position coordinate and returns a new Position instance equivalent to it, or null if that position\n   * is out of bounds of the board.\n   */\n  private getModulation(xBy: number, yBy: number): Position | null {\n    try {\n      return new Position(this.x + xBy, this.y + yBy);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 1 from the position on the board that this instance describes.\n   */\n  public getUp(): Position | null {\n    return this.getModulation(0, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 1 from the position on the board that this instance describes.\n   */\n  public getDown(): Position | null {\n    return this.getModulation(0, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved left by 1 from the position on the board that this instance describes.\n   */\n  public getLeft(): Position | null {\n    return this.getModulation(-1, 0);\n  }\n\n  /**\n   * Returns a new Position instance that is moved right by 1 from the position on the board that this instance describes.\n   */\n  public getRight(): Position | null {\n    return this.getModulation(1, 0);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 1 and left by 1 from the position on the board that this instance describes.\n   */\n  public getUpLeft(): Position | null {\n    return this.getModulation(-1, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 1 and right by 1 from the position on the board that this instance describes.\n   */\n  public getUpRight(): Position | null {\n    return this.getModulation(1, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 1 and left by 1 from the position on the board that this instance describes.\n   */\n  public getDownLeft(): Position | null {\n    return this.getModulation(-1, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 1 and right by 1 from the position on the board that this instance describes.\n   */\n  public getDownRight(): Position | null {\n    return this.getModulation(1, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 2 from the position on the board that this instance describes.\n   */\n  public getUpUp(): Position | null {\n    return this.getModulation(0, 2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 2 from the position on the board that this instance describes.\n   */\n  public getDownDown(): Position | null {\n    return this.getModulation(0, -2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 2 and left by 1 from the position on the board that this instance describes.\n   */\n  public getUpUpLeft(): Position | null {\n    return this.getModulation(-1, 2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 2 and right by 1 from the position on the board that this instance describes.\n   */\n  public getUpUpRight(): Position | null {\n    return this.getModulation(1, 2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 2 and left by 1 from the position on the board that this instance describes.\n   */\n  public getDownDownLeft(): Position | null {\n    return this.getModulation(-1, -2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 2 and right by 1 from the position on the board that this instance describes.\n   */\n  public getDownDownRight(): Position | null {\n    return this.getModulation(1, -2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved left by 2 and up by 1 from the position on the board that this instance describes.\n   */\n  public getLeftLeftUp(): Position | null {\n    return this.getModulation(-2, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved left by 2 and up by 1 from the position on the board that this instance describes.\n   */\n  public getLeftLeftDown(): Position | null {\n    return this.getModulation(-2, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved right by 2 and up by 1 from the position on the board that this instance describes.\n   */\n  public getRightRightUp(): Position | null {\n    return this.getModulation(2, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved right by 2 and down by 1 from the position on the board that this instance describes.\n   */\n  public getRightRightDown(): Position | null {\n    return this.getModulation(2, -1);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all straight (horizontal and vertical) directions.\n   */\n  public getAllStraight(): Array<Position> {\n    return arrClean([\n      this.getUp(),\n      this.getDown(),\n      this.getLeft(),\n      this.getRight(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all diagonal directions.\n   */\n  public getAllDiagonal(): Array<Position> {\n    return arrClean([\n      this.getUpLeft(),\n      this.getUpRight(),\n      this.getDownLeft(),\n      this.getDownRight(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all straight (horizontal and vertical) and diagonal directions.\n   */\n  public getAllStraightAndDiagonal(): Array<Position> {\n    return [...this.getAllStraight(), ...this.getAllDiagonal()];\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved one time equivalent of all legal knight-piece moves.\n   */\n  public getAllKnightMovePositions(): Array<Position> {\n    return arrClean([\n      this.getUpUpLeft(),\n      this.getUpUpRight(),\n      this.getDownDownLeft(),\n      this.getDownDownRight(),\n      this.getLeftLeftUp(),\n      this.getLeftLeftDown(),\n      this.getRightRightUp(),\n      this.getRightRightDown(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by a provided modulator function recursively until the\n   * modulator's returned Position instance becomes out of bounds of the board.\n   */\n  private getRecursive(modulator: () => Position | null): Array<Position> {\n    const res = [];\n    let pos: Position | null;\n    pos = this;\n    while ((pos = modulator.call(pos))) {\n      res.push(pos);\n    }\n    return res;\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getUpRecursive(): Array<Position> {\n    return this.getRecursive(this.getUp);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getDownRecursive(): Array<Position> {\n    return this.getRecursive(this.getDown);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving left by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving right by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 and left by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getUpLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getUpLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 and right by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getUpRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getUpRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 and left by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getDownLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getDownLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 and right by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getDownRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getDownRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all straight\n   * (horizontal and vertical) directions from the position on the board that this instance describes until the\n   * resulting Position instance becomes out of bounds of the board.\n   */\n  public getAllStraightRecursive(): Array<Array<Position>> {\n    return [\n      this.getUpRecursive(),\n      this.getDownRecursive(),\n      this.getLeftRecursive(),\n      this.getRightRecursive(),\n    ];\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all diagonal\n   * directions from the position on the board that this instance describes until the resulting Position instance\n   * becomes out of bounds of the board.\n   */\n  public getAllDiagonalRecursive(): Array<Array<Position>> {\n    return [\n      this.getUpLeftRecursive(),\n      this.getUpRightRecursive(),\n      this.getDownLeftRecursive(),\n      this.getDownRightRecursive(),\n    ];\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all straight\n   * (horizontal and vertical) and diagonal directions from the position on the board that this instance describes until\n   * the resulting Position instance becomes out of bounds of the board.\n   */\n  public getAllStraightAndDiagonalRecursive(): Array<Array<Position>> {\n    return [\n      ...this.getAllStraightRecursive(),\n      ...this.getAllDiagonalRecursive(),\n    ];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from '../Position';\n\n/**\n * {Piece} Queen class.\n */\nexport class Queen extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllStraightAndDiagonalRecursive() : [];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from '../Position';\n\n/**\n * {Piece} Rook class.\n */\nexport class Rook extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    return pos.getAllStraightRecursive();\n  }\n\n  /**\n   * Returns whether a move to a target position is a castling move.\n   */\n  public isCastleMove(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    if (!targetPiece) return false;\n    // it is not necessary to check whether the taget piece is an own piece since an enemy piece will never be in the\n    // designated position without having moved, which gets checked.\n    return (\n      targetPiece.type === 'King' && !targetPiece.hasMoved && !this.hasMoved\n    );\n  }\n}\n","import { Position } from './Position';\nimport { Pawn } from './pieces/Pawn';\nimport { Knight } from './pieces/Knight';\nimport { Bishop } from './pieces/Bishop';\nimport { Queen } from './pieces/Queen';\nimport { Rook } from './pieces/Rook';\nimport { King } from './pieces/King';\nimport type { Piece } from './pieces/AbstractPiece';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\n\nexport class Player {\n  public game: Game;\n  public color: string;\n  public pieces: Piece[];\n\n  public constructor(game: Game, color: string) {\n    this.game = game;\n    this.color = color;\n\n    let row1: string, row2: string;\n    if (color === 'white') {\n      row1 = '1';\n      row2 = '2';\n    } else if (color === 'black') {\n      row1 = '8';\n      row2 = '7';\n    } else {\n      throw new Error('Invalid color');\n    }\n\n    this.pieces = [\n      new King(this, 0, Position.fromA1('E' + row1)),\n      new Queen(this, 1, Position.fromA1('D' + row1)),\n      new Bishop(this, 2, Position.fromA1('C' + row1)),\n      new Bishop(this, 3, Position.fromA1('F' + row1)),\n      new Knight(this, 4, Position.fromA1('B' + row1)),\n      new Knight(this, 5, Position.fromA1('G' + row1)),\n      new Rook(this, 6, Position.fromA1('A' + row1)),\n      new Rook(this, 7, Position.fromA1('H' + row1)),\n      new Pawn(this, 8, Position.fromA1('A' + row2)),\n      new Pawn(this, 9, Position.fromA1('B' + row2)),\n      new Pawn(this, 10, Position.fromA1('C' + row2)),\n      new Pawn(this, 11, Position.fromA1('D' + row2)),\n      new Pawn(this, 12, Position.fromA1('E' + row2)),\n      new Pawn(this, 13, Position.fromA1('F' + row2)),\n      new Pawn(this, 14, Position.fromA1('G' + row2)),\n      new Pawn(this, 15, Position.fromA1('H' + row2)),\n    ];\n  }\n\n  /**\n   * Returns an array of Move instances that describe moves of this Piece.\n   */\n  public get moves(): Move[] {\n    return this.game.moves.filter((move) => {\n      return move.piece.player === this;\n    });\n  }\n}\n","import { Board } from './Board';\nimport { Player } from './Player';\nimport { Move } from './Move';\nimport { isEven, uInt8ToBytes, bytesToUint8Array } from './util';\nimport { Position } from './Position';\nimport { Piece } from './pieces/AbstractPiece';\n\n/**\n * The default exported class from which the chess game is controlled.\n */\nexport class Game {\n  /**\n   * Parse and optionally validate JSON data.\n   *\n   * @param data - A previously stringified Game instance.\n   * @param skipValidation - skips validation of the move's legality according to the rules of the game.\n   *\n   * @throws {TypeError} on invalid JSON data.\n   */\n  private static parseJSON(\n    data: string,\n    skipValidation: boolean,\n  ): Array<number> {\n    let moves;\n    try {\n      moves = JSON.parse(data);\n      if (!skipValidation) {\n        if (!Number.isInteger(moves.length / 4)) {\n          throw new TypeError('Invalid length.');\n        }\n        for (let i = 0; i < moves.length; i++) {\n          if (!Number.isInteger(moves[i])) {\n            throw new TypeError('Expected an array of integers only.');\n          }\n        }\n      }\n    } catch (e) {\n      throw new TypeError('Invalid JSON data. ' + e.message);\n    }\n    return moves;\n  }\n\n  /**\n   * Recreates a Game instance from a previously parsed stringified or serialized Game instance converted to array.\n   * Used internally by @see Game.fromJSON() and @see Game.deserialize()\n   *\n   * @param data - A previously stringified Game instance.\n   * @param skipValidation - skips validation of the move's legality according to the rules of the game.\n   */\n  private static fromArray(data: Array<number>, skipValidation: boolean) {\n    const game = new Game();\n    for (let i = 0; i < data.length; i += 4) {\n      game.move(\n        new Position(data[i], data[i + 1]),\n        new Position(data[i + 2], data[i + 3]),\n        skipValidation,\n      );\n    }\n    return game;\n  }\n\n  /**\n   * Recreates a Game instance from a previously stringified Game instance.\n   * @see Game.prototype.toJSON()\n   *\n   * @param data - A previously stringified Game instance.\n   * @param skipValidation - skips validation of the move's legality according to the rules of the game as well as the data.\n\n   * @throws {Error} on invalid JSON data.\n   */\n  public static fromJSON(data: string, skipValidation = false): Game {\n    return this.fromArray(this.parseJSON(data, skipValidation), skipValidation);\n  }\n\n  /**\n   * Recreates a Game instance from binary data.\n   * @see Game.prototype.serialize()\n   *\n   * @param data - A previously stringified Game instance.\n   * @param skipValidation - skips validation of the move's legality according to the rules of the game as well as the data.\n\n   * @throws {Error} on invalid JSON data.\n   */\n  public static deserialze(data: Uint8Array, skipValidation = false): Game {\n    return this.fromArray(uInt8ToBytes(data), skipValidation);\n  }\n\n  /**\n   * The game board.\n   */\n  public board: Board;\n\n  /**\n   * White player.\n   */\n  public white: Player;\n\n  /**\n   * Black player.\n   */\n  public black: Player;\n\n  /**\n   * An array containing all moves made in the game.\n   */\n  public moves: Array<Move>;\n\n  /**\n   * Creates and initializes a new chess game.\n   */\n  public constructor() {\n    this.board = new Board(this);\n    this.white = new Player(this, 'white');\n    this.black = new Player(this, 'black');\n    this.moves = [];\n  }\n\n  /**\n   * Returns whether it is white player's turn to move.\n   */\n  public get isWhitesTurnToMove(): boolean {\n    return isEven(this.moves.length);\n  }\n\n  /**\n   * Returns whether it is black player's turn to move.\n   */\n  public get isBlacksTurnToMove(): boolean {\n    return !isEven(this.moves.length);\n  }\n\n  /**\n   * Returns whether it is black player's turn to move.\n   */\n  public get activePlayer(): Player {\n    return this.isWhitesTurnToMove ? this.white : this.black;\n  }\n\n  /**\n   * Iterate each piece on the board.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   * @returns true if iteration was ended before completion.\n   */\n  public forEachActivePiece(\n    f: (piece?: Piece) => boolean | void,\n  ): boolean | void {\n    const w = this.white.pieces;\n    const b = this.black.pieces;\n    for (let i = 0; i < 16; i++) {\n      if ((!w[i].isTaken && f(w[i])) || (!b[i].isTaken && f(b[i]))) {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Iterate each white piece on the board.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   * @returns true if iteration was ended before completion.\n   */\n  private forEachActiveWhitePiece(\n    f: (piece?: Piece) => boolean | void,\n  ): boolean | void {\n    const w = this.white.pieces;\n    for (let i = 0; i < 16; i++) {\n      if (!w[i].isTaken && f(w[i])) {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Iterate each black piece on the board.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   * @returns true if iteration was ended before completion.\n   */\n  private forEachActiveBlackPiece(\n    f: (piece?: Piece) => boolean | void,\n  ): boolean | void {\n    const b = this.black.pieces;\n    for (let i = 0; i < 16; i++) {\n      if (!b[i].isTaken && f(b[i])) {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Iterate each piece on the board belonging to the player whose turn it is to move.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   * @returns true if iteration was ended before completion.\n   */\n  public forEachCurrentPlayerActivePiece(\n    f: (piece?: Piece) => boolean | void,\n  ): boolean | void {\n    return this.isWhitesTurnToMove\n      ? this.forEachActiveWhitePiece(f)\n      : this.forEachActiveBlackPiece(f);\n  }\n\n  /**\n   * Ensures the argument is converted into a Position instance.\n   *\n   * @param from - a Position instance, A1-notation string or XY-coordinate-array.\n   */\n  private ensurePosition(from: Position | string | Array<number>): Position {\n    return from instanceof Position\n      ? from\n      : typeof from === 'string'\n      ? Position.fromA1(from)\n      : Position.fromXY(from);\n  }\n\n  /**\n   * Get a Piece instance from the board by either Position, an A1 string or XY-coordinates\n   *\n   * @param from - a Position instance, A1-notation string or XY-coordinate-array. If a Piece instance is passed, it is returned.\n   */\n  private ensurePiece(\n    from?: Position | string | Array<number> | Piece,\n  ): Piece | null {\n    return !from\n      ? null\n      : from instanceof Piece\n      ? from\n      : this.board.getPieceByPosition(this.ensurePosition(from));\n  }\n\n  /**\n   * Iterate each valid move position for either all active player pieces or a given piece.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   * @param pieceOrCoordinate - only iterate a single piece's valid move positions. Can be the Piece to move, or where\n   * to find the piece which can be a Position instance, XY-array or A1-notation string.\n   * @returns true if iteration was ended before completion.\n   */\n  public forEachValidMove(\n    f: (position?: Position, piece?: Piece) => boolean | void,\n    pieceOrCoordinate?: Piece | Position | string | Array<number>,\n  ): boolean | void {\n    const piece = this.ensurePiece(pieceOrCoordinate);\n    return piece\n      ? piece.forEachValidMovePosition((pos) => {\n          return f(pos, piece);\n        })\n      : this.forEachCurrentPlayerActivePiece((piece) => {\n          if (piece) {\n            return piece.forEachValidMovePosition((pos) => {\n              return f(pos, piece);\n            });\n          } else return;\n        });\n  }\n\n  /**\n   * Moves a piece on the board.\n   * If the target position already has a piece belonging to the opposing player, it is removed from the board.\n   *\n   * @param pieceOrCoordinate - The Piece to move, or where to find the piece which can be a Position instance, XY-array\n   * or A1-notation string.\n   * @param to - Where to move to.\n   * @param skipValidation - skips validation of the move's legality according to the rules of the game. This is used\n   * internally for performance reasons when cloning a game, which repeats the moves that were previously validated.\n   *\n   * @throws {Error} on invalid move, unless `skipValidation` is true.\n   * @returns self - is chainable.\n   */\n  public move(\n    pieceOrCoordinate: Piece | Position,\n    to: Position | string | Array<number>,\n    skipValidation?: boolean,\n  ): Game {\n    to = this.ensurePosition(to);\n    const piece = this.ensurePiece(pieceOrCoordinate);\n    if (piece && (skipValidation || piece.isValidMove(to))) {\n      const targetPiece = piece.game.board.getPieceByPosition(to);\n      let move;\n      if (piece.isCastleMove(to)) {\n        move = new Move(piece, to);\n        this.board.registerSwap(move);\n        if (targetPiece) {\n          targetPiece.registerMove(new Move(targetPiece, move.from));\n        }\n      } else {\n        move = new Move(piece, to, targetPiece);\n        this.board.registerMove(move);\n        if (targetPiece) {\n          targetPiece.remove();\n        }\n      }\n      piece.registerMove(move);\n      this.moves.push(move);\n    } else {\n      throw new Error('Invalid move.');\n    }\n    return this;\n  }\n\n  /**\n   * Returns a deep clone of the game instance.\n   */\n  public clone(): Game {\n    const game = new Game();\n    const w = game.white.pieces;\n    const b = game.black.pieces;\n    const moves = this.moves;\n    for (let i = 0; i < moves.length; i++) {\n      const piece = moves[i].piece;\n      game.move(\n        (piece.color === 'white' ? w : b)[piece.index],\n        moves[i].to.clone(),\n        true,\n      );\n    }\n    return game;\n  }\n\n  /**\n   * Method used by JSON.stringify to return string-serialized data necessary for completely reconstructing the Game\n   * instance.\n   * @see Game.fromJSON()\n   */\n  public toJSON(): Array<number> {\n    const moves = this.moves;\n    const l = moves.length;\n    const res = new Array(l * 4);\n    for (let move, i = 0; i < l; i++) {\n      move = moves[i];\n      res[i * 4 + 0] = move.from.x;\n      res[i * 4 + 1] = move.from.y;\n      res[i * 4 + 2] = move.to.x;\n      res[i * 4 + 3] = move.to.y;\n    }\n    return res;\n  }\n\n  /**\n   * Serializes the data necessary for completely reconstructing the Game instance to binary.\n   * @see Game.deserialize()\n   */\n  public serialize(): Uint8Array {\n    return bytesToUint8Array(this.toJSON());\n  }\n}\n"],"names":["player","index","position","this","moveCount","game","board","setPiece","Object","Piece","constructor","name","color","moves","filter","move","piece","_this","to","clone","target","targetPiece","getPieceByPosition","activePlayer","f","isOwnTurn","positions","getMovePositionsWithinBounds","i","length","item","Array","isArray","j","isMoveTargetOwnPiece","_target","isCastleMove","forEachValidMovePosition","compare","__extends","Bishop","pos","getAllDiagonalRecursive","arrClean","arr","res","l","push","createAssertFunction","expectedToBe","validate","arg","TypeError","defineProperty","value","replace","isEven","n","A_CHAR_CODE","charCodeAt","from_X_to_A","x","String","fromCharCode","from_Y_to_1","y","toString","from_A_to_X","a","toUpperCase","from_1_to_Y","Number","charAt","from_XY_to_A1","from_A1_to_XY","a1","isValidXYPoint","isValidXY","isValidA1","assertValidXYPoint","assertValidXY","assertValidA1","grid","fill","Board","getPieceByXY","_a","from","pieceFrom","pieceTo","King","getAllStraightAndDiagonal","type","hasMoved","Knight","getAllKnightMovePositions","takes","Error","Move","Pawn","upPos","getUp","upUpPos","getUpUp","upLeftPos","getUpLeft","diagLeftPiece","diagLeftPos","upRightPos","getUpRight","diagRightPiece","downPos","getDown","downDownPos","getDownDown","downLeftPos","getDownLeft","downRightPos","getDownRight","skipValidation","Position","xy","xBy","yBy","e","getModulation","getLeft","getRight","getAllStraight","getAllDiagonal","getUpUpLeft","getUpUpRight","getDownDownLeft","getDownDownRight","getLeftLeftUp","getLeftLeftDown","getRightRightUp","getRightRightDown","modulator","call","getRecursive","getUpRecursive","getDownRecursive","getLeftRecursive","getRightRecursive","getUpLeftRecursive","getUpRightRecursive","getDownLeftRecursive","getDownRightRecursive","getAllStraightRecursive","Queen","getAllStraightAndDiagonalRecursive","Rook","row1","row2","pieces","fromA1","Player","white","black","Game","data","JSON","parse","isInteger","message","fromArray","parseJSON","uInt8ToBytes","uInt8","isWhitesTurnToMove","w","b","isTaken","forEachActiveWhitePiece","forEachActiveBlackPiece","fromXY","ensurePosition","pieceOrCoordinate","ensurePiece","forEachCurrentPlayerActivePiece","isValidMove","registerSwap","registerMove","remove","bytesToUint8Array","Uint8Array","toJSON"],"mappings":"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"}