{"version":3,"file":"index.umd.min.js","sources":["../src/AbstractPiece.ts","../src/Bishop.ts","../src/util.ts","../src/coordinates.ts","../src/Board.ts","../src/Position.ts","../src/Pawn.ts","../src/Knight.ts","../src/Queen.ts","../src/Rook.ts","../src/King.ts","../src/Player.ts","../src/Move.ts","../src/Game.ts"],"sourcesContent":["import type { Player } from './Player';\nimport type { Position } from './Position';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\n\nexport abstract class Piece {\n  player: Player;\n  index: number;\n  position: Position | null;\n  moves: Array<Move>;\n\n  constructor(player: Player, index: number, position: Position) {\n    this.player = player;\n    this.index = index;\n    this.position = position;\n    this.moves = [];\n\n    this.player.game.board.setPiece(this);\n  }\n\n  get game(): Game {\n    return this.player.game;\n  }\n\n  get type(): string {\n    return this.constructor.name;\n  }\n\n  get hasMoved(): boolean {\n    return this.moves.length > 0;\n  }\n\n  get color(): string {\n    return this.player.color;\n  }\n\n  registerMove(move: Move): void {\n    this.moves.push(move);\n    this.position = move.to.clone();\n  }\n\n  remove(): void {\n    this.position = null;\n  }\n\n  protected isMoveTargetOwnPiece(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    return targetPiece !== null && this.player === targetPiece.player;\n  }\n\n  /**\n   * Returns whether a move to a position is a valid move.\n   */\n  protected isValidMove(target: Position): boolean {\n    return this.isMoveTargetOwnPiece(target);\n  }\n\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected abstract getMovePositionsWithinBounds(): Array<\n    Position | Array<Position>\n  >;\n\n  /**\n   * Returns a Position array with all valid moves.\n   */\n  getValidMovePositions(): Array<Position> {\n    // return this.getMovePositionsWithinBounds().reduce((accum, item) => {\n    //   if (Array.isArray(item)) {\n    //     for (const pos of item) {\n    //       if (pos && this.isValidMove(pos)) accum.push(pos);\n    //       else break;\n    //     }\n    //   } else if (this.isValidMove(item)) {\n    //     accum.push(item);\n    //   }\n    //   return accum;\n    // }, []);\n    return [];\n  }\n\n  isValidMovePosition(target: Position): boolean {\n    return !!this.getValidMovePositions().find((position: Position) => {\n      return position.compare(target);\n    });\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Bishop extends Piece {\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllDiagonalRecursive() : [];\n  }\n}\n","import type { Position } from './Position';\n\n/**\n * Removes elements of a given array if they do not evaluate to true.\n */\nexport function arrClean(arr: Array<Position | null>): Array<Position> {\n  const res = [];\n  const l = arr.length;\n  for (let i = 0; i < l; i++) {\n    const pos = arr[i];\n    if (pos) {\n      res.push(pos);\n    }\n  }\n  return res;\n}\n\n/**\n * Returns the numeric difference between to numbers.\n */\nexport function numericDifference(n1: number, n2: number): number {\n  const dist = n1 - n2;\n  return dist < 0 ? dist * -1 : dist;\n}\n\n/**\n * Returns an assertion function that expects [string] 'expectedToBe' evaluated by [Function] 'validate'\n */\nexport function createAssertFunction<T>(\n  expectedToBe: string,\n  validate: (arg: T) => boolean,\n): (arg: T, name?: string) => void {\n  const f = function (arg: T, name = 'arg') {\n    if (!validate(arg)) {\n      throw new TypeError(\n        `Expected ${name} to be ${expectedToBe}. ${name}: ${arg}`,\n      );\n    }\n  };\n  Object.defineProperty(f, 'name', {\n    value: validate.name.replace(/^is/, 'assert'),\n  });\n  return f;\n}\n","import { createAssertFunction } from './util';\n\nconst A_CHAR_CODE = 'A'.charCodeAt(0);\n\n/**\n * Converts the first value of an XY-coordinate to A1-notation.\n */\nexport function from_X_to_A(x: number): string {\n  return String.fromCharCode(x + A_CHAR_CODE);\n}\n\n/**\n * Converts the second value of an XY-coordinate to A1-notation.\n */\nexport function from_Y_to_1(y: number): string {\n  return (y + 1).toString();\n}\n\n/**\n * Converts the first character of A1-notation to the first value of an XY-coordinate.\n */\nexport function from_A_to_X(a: string): number {\n  return a.toUpperCase().charCodeAt(0) - A_CHAR_CODE;\n}\n\n/**\n * Converts the second character of A1-notation to the second value of an XY-coordinate.\n */\nexport function from_1_to_Y(n: string): number {\n  return Number(n.charAt(0)) - 1;\n}\n\n/**\n * Converts a XY-coordinate-array to an A1-notation string.\n */\nexport function from_XY_to_A1(pos: Array<number>): string {\n  return from_X_to_A(pos[0]) + from_Y_to_1(pos[1]);\n}\n\n/**\n * Converts an A1-notation string to a XY-coordinate-array.\n */\nexport function from_A1_to_XY(a1: string): Array<number> {\n  return [from_A_to_X(a1.charAt(0)), from_1_to_Y(a1.charAt(1))];\n}\n\n/**\n * Returns whether the argument is a positive integer where 0 <= arg <= 7.\n */\nexport function isValidXYPoint(n: number): boolean {\n  return n >= 0 && n <= 7;\n}\n\n/**\n * Returns whether both points in an XY-coordinate is a positive integer where 0 <= arg <= 7.\n */\nexport function isValidXY(pos: Array<number>): boolean {\n  return isValidXYPoint(pos[0]) && isValidXYPoint(pos[1]);\n}\n\n/**\n * Returns whether a string is valid A1-notation.\n */\nexport function isValidA1(a1: string): boolean {\n  return a1.length === 2 && isValidXY(from_A1_to_XY(a1));\n}\n\n/**\n * Throws a TypeError if the argument is not a valid XY-coordinate point.\n * @see isValidXYPoint\n *\n * @function assertValidXYPoint\n * @throws {TypeError}\n */\nexport const assertValidXYPoint = createAssertFunction(\n  'a positive integer between 0 and 7',\n  isValidXYPoint,\n);\n\n/**\n * Throws a TypeError if the argument is not a valid XY-coordinate.\n * @see isValidXY\n *\n * @function assertValidXY\n * @throws {TypeError}\n */\nexport const assertValidXY = createAssertFunction(\n  'an array containing two positive integers between 0 and 7',\n  isValidXY,\n);\n\n/**\n * Throws a TypeError if the argument is not valid A1-notation.\n * @see isValidA1\n *\n * @function assertValidA1\n * @throws {TypeError}\n */\nexport const assertValidA1 = createAssertFunction(\n  'a valid A1-notation string',\n  isValidA1,\n);\n","import { from_A1_to_XY } from './coordinates';\n\nimport type { Position } from './Position';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\nimport type { Piece } from './AbstractPiece';\n\nexport class Board {\n  game: Game;\n  grid: Array<Array<Piece | null>>;\n\n  constructor(game: Game) {\n    this.game = game;\n    this.grid = [];\n    let i = 0;\n    while (i < 8) {\n      this.grid.push(new Array(8).fill(null, 0, 7));\n      i++;\n    }\n  }\n\n  /**\n   * Returns the piece at the given XY-coordinates or null if no piece is found there.\n   */\n  getPieceByXY(x: number, y: number): Piece | null {\n    return this.grid[y][x];\n  }\n\n  /**\n   * Returns the piece at the given Position or null if no piece is found there.\n   */\n  getPieceByPosition(position: Position): Piece | null {\n    return this.getPieceByXY(position.x, position.y);\n  }\n\n  /**\n   * Returns the piece at the given A1-notation-coordinates or null if no piece is found there.\n   */\n  getPieceByA1(a1: string): Piece | null {\n    const [x, y] = from_A1_to_XY(a1);\n    return this.getPieceByXY(x, y);\n  }\n\n  /**\n   * Sets a piece to the board.\n   */\n  setPiece(piece: Piece): void {\n    const pos = piece.position;\n    if (pos) this.grid[pos.y][pos.x] = piece;\n  }\n\n  /**\n   * Removes a piece from the board.\n   * This method does not check legality or whether this action is part of a move in the game.\n   */\n  removePiece(piece: Piece | null): void {\n    if (piece) {\n      const pos = piece.position;\n      if (pos) this.grid[pos.y][pos.x] = null;\n    }\n  }\n\n  /**\n   * Updates the board instance based on the information contained within a provided Move instance.\n   */\n  registerMove(move: Move): void {\n    const from = move.from;\n    const to = move.to;\n    const piece = this.grid[from.y][from.x];\n    this.grid[to.y][to.x] = piece;\n    this.grid[from.y][from.x] = null;\n  }\n}\n","import { from_A1_to_XY, from_XY_to_A1, assertValidXY } from './coordinates';\nimport { arrClean } from './util';\n\nexport class Position {\n  x: number;\n  y: number;\n  /**\n   * Returns a new Position instance based on A1-notation input.\n   */\n  static fromA1Notation(a1: string): Position {\n    const xy = from_A1_to_XY(a1);\n    return new Position(xy[0], xy[1]);\n  }\n\n  /**\n   * @param x - a positive integer between 0 and 7 both inclusive.\n   * @param y - a positive integer between 0 and 7 both inclusive.\n   */\n  constructor(x: number, y: number, skipValidation = false) {\n    if (!skipValidation) {\n      assertValidXY([x, y], 'x and y');\n    }\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Returns the board position in A1-notation.\n   */\n  get A1(): string {\n    return from_XY_to_A1([this.x, this.y]);\n  }\n\n  /**\n   * Deep-equality-compares the Position instance to another Position instance.\n   */\n  compare(position: Position): boolean {\n    return this.x === position.x && this.y === position.y;\n  }\n\n  /**\n   * Returns a clone of the instance.\n   * Out of bounds -validation is skipped.\n   */\n  clone(): Position {\n    return new Position(this.x, this.y, true);\n  }\n\n  /**\n   * Returns the instance as a normal array.\n   */\n  toArray(): Array<number> {\n    return [this.x, this.y];\n  }\n\n  /**\n   * Modulates the XY-position coordinate and returns a new Position instance equivalent to it, or null if that position\n   * is out of bounds of the board.\n   */\n  private getModulation(xBy: number, yBy: number): Position | null {\n    try {\n      return new Position(this.x + xBy, this.y + yBy);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 1 from the position on the board that this instance describes.\n   */\n  getUp(): Position | null {\n    return this.getModulation(0, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 1 from the position on the board that this instance describes.\n   */\n  getDown(): Position | null {\n    return this.getModulation(0, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved left by 1 from the position on the board that this instance describes.\n   */\n  getLeft(): Position | null {\n    return this.getModulation(-1, 0);\n  }\n\n  /**\n   * Returns a new Position instance that is moved right by 1 from the position on the board that this instance describes.\n   */\n  getRight(): Position | null {\n    return this.getModulation(1, 0);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 1 and left by 1 from the position on the board that this instance describes.\n   */\n  getUpLeft(): Position | null {\n    return this.getModulation(-1, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 1 and right by 1 from the position on the board that this instance describes.\n   */\n  getUpRight(): Position | null {\n    return this.getModulation(1, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 1 and left by 1 from the position on the board that this instance describes.\n   */\n  getDownLeft(): Position | null {\n    return this.getModulation(-1, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 1 and right by 1 from the position on the board that this instance describes.\n   */\n  getDownRight(): Position | null {\n    return this.getModulation(1, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 2 from the position on the board that this instance describes.\n   */\n  getUpUp(): Position | null {\n    return this.getModulation(0, 2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 2 from the position on the board that this instance describes.\n   */\n  getDownDown(): Position | null {\n    return this.getModulation(0, -2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 2 and left by 1 from the position on the board that this instance describes.\n   */\n  getUpUpLeft(): Position | null {\n    return this.getModulation(-1, 2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 2 and right by 1 from the position on the board that this instance describes.\n   */\n  getUpUpRight(): Position | null {\n    return this.getModulation(1, 2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 2 and left by 1 from the position on the board that this instance describes.\n   */\n  getDownDownLeft(): Position | null {\n    return this.getModulation(-1, -2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 2 and right by 1 from the position on the board that this instance describes.\n   */\n  getDownDownRight(): Position | null {\n    return this.getModulation(1, -2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved left by 2 and up by 1 from the position on the board that this instance describes.\n   */\n  getLeftLeftUp(): Position | null {\n    return this.getModulation(-2, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved left by 2 and up by 1 from the position on the board that this instance describes.\n   */\n  getLeftLeftDown(): Position | null {\n    return this.getModulation(-2, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved right by 2 and up by 1 from the position on the board that this instance describes.\n   */\n  getRightRightUp(): Position | null {\n    return this.getModulation(2, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved right by 2 and down by 1 from the position on the board that this instance describes.\n   */\n  getRightRightDown(): Position | null {\n    return this.getModulation(2, -1);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all straight (horizontal and vertical) directions.\n   */\n  getAllStraight(): Array<Position> {\n    return arrClean([\n      this.getUp(),\n      this.getDown(),\n      this.getLeft(),\n      this.getRight(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all diagonal directions.\n   */\n  getAllDiagonal(): Array<Position> {\n    return arrClean([\n      this.getUpLeft(),\n      this.getUpRight(),\n      this.getDownLeft(),\n      this.getDownRight(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all straight (horizontal and vertical) and diagonal directions.\n   */\n  getAllStraightAndDiagonal(): Array<Position> {\n    return [...this.getAllStraight(), ...this.getAllDiagonal()];\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved one time equivalent of all legal knight-piece moves.\n   */\n  getAllKnightMovePositions(): Array<Position> {\n    return arrClean([\n      this.getUpUpLeft(),\n      this.getUpUpRight(),\n      this.getDownDownLeft(),\n      this.getDownDownRight(),\n      this.getLeftLeftUp(),\n      this.getLeftLeftDown(),\n      this.getRightRightUp(),\n      this.getRightRightDown(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by a provided modulator function recursively until the\n   * modulator's returned Position instance becomes out of bounds of the board.\n   */\n  private getRecursive(modulator: () => Position | null): Array<Position> {\n    const res = [];\n    let pos: Position | null;\n    pos = this;\n    while ((pos = modulator.call(pos))) {\n      res.push(pos);\n    }\n    return res;\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  getUpRecursive(): Array<Position> {\n    return this.getRecursive(this.getUp);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  getDownRecursive(): Array<Position> {\n    return this.getRecursive(this.getDown);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving left by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  getLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving right by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  getRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 and left by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  getUpLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getUpLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 and right by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  getUpRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getUpRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 and left by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  getDownLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getDownLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 and right by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  getDownRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getDownRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all straight\n   * (horizontal and vertical) directions from the position on the board that this instance describes until the\n   * resulting Position instance becomes out of bounds of the board.\n   */\n  getAllStraightRecursive(): Array<Array<Position>> {\n    return [\n      this.getUpRecursive(),\n      this.getDownRecursive(),\n      this.getLeftRecursive(),\n      this.getRightRecursive(),\n    ];\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all diagonal\n   * directions. from the position on the board that this instance describes until the resulting Position instance\n   * becomes out of bounds of the board.\n   */\n  getAllDiagonalRecursive(): Array<Array<Position>> {\n    return [\n      this.getUpLeftRecursive(),\n      this.getUpRightRecursive(),\n      this.getDownLeftRecursive(),\n      this.getDownRightRecursive(),\n    ];\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all straight\n   * (horizontal and vertical) and diagonal directions from the position on the board that this instance describes until\n   * the resulting Position instance becomes out of bounds of the board.\n   */\n  getAllStraightAndDiagonalRecursive(): Array<Array<Position>> {\n    return [\n      ...this.getAllStraightRecursive(),\n      ...this.getAllDiagonalRecursive(),\n    ];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Pawn extends Piece {\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    const res = [];\n\n    if (this.color === 'white') {\n      const upPos = pos.getUp();\n      if (upPos) {\n        res.push(upPos);\n      }\n\n      const upUpPos = pos.getUpUp();\n      if (upUpPos && !this.hasMoved) {\n        res.push(upUpPos);\n      }\n\n      const upLeftPos = pos.getUpLeft();\n      if (upLeftPos) {\n        const diagLeftPiece = this.game.board.getPieceByPosition(upLeftPos);\n        if (diagLeftPiece) {\n          const diagLeftPos = diagLeftPiece.position;\n          if (diagLeftPos && diagLeftPiece.color === 'black') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n\n      const upRightPos = pos.getUpRight();\n      if (upRightPos) {\n        const diagRightPiece = this.game.board.getPieceByPosition(upRightPos);\n        if (diagRightPiece) {\n          const diagLeftPos = diagRightPiece.position;\n          if (diagLeftPos && diagRightPiece.color === 'black') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n    } else {\n      const downPos = pos.getDown();\n      if (downPos) {\n        res.push(downPos);\n      }\n\n      const downDownPos = pos.getDownDown();\n      if (downDownPos && !this.hasMoved) {\n        res.push(downDownPos);\n      }\n\n      const downLeftPos = pos.getDownLeft();\n      if (downLeftPos) {\n        const diagLeftPiece = this.game.board.getPieceByPosition(downLeftPos);\n        if (diagLeftPiece) {\n          const diagLeftPos = diagLeftPiece.position;\n          if (diagLeftPos && diagLeftPiece.color === 'white') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n\n      const downRightPos = pos.getDownRight();\n      if (downRightPos) {\n        const diagRightPiece = this.game.board.getPieceByPosition(downRightPos);\n        if (diagRightPiece) {\n          const diagLeftPos = diagRightPiece.position;\n          if (diagLeftPos && diagRightPiece.color === 'white') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n    }\n    return res;\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Knight extends Piece {\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllKnightMovePositions() : [];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Queen extends Piece {\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllStraightAndDiagonalRecursive() : [];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport { Position } from './Position';\n\nexport class Rook extends Piece {\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    const res = [];\n    res.push(...pos.getAllStraightRecursive());\n    if (this.color === 'white') {\n      res.push(Position.fromA1Notation('D1'));\n    } else {\n      res.push(Position.fromA1Notation('D7'));\n    }\n    return res;\n  }\n\n  protected isValidMove(target: Position): boolean {\n    return this.isMoveTargetOwnPiece(target)\n      ? this.isValidCastleMove(target)\n      : true;\n  }\n\n  private isValidCastleMove(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    return targetPiece\n      ? targetPiece.type === 'King' && !targetPiece.hasMoved && !this.hasMoved\n      : false;\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport { Position } from './Position';\n\nexport class King extends Piece {\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    const res = pos.getAllStraightAndDiagonal();\n    if (this.color === 'white') {\n      res.push(Position.fromA1Notation('A1'), Position.fromA1Notation('H1'));\n    } else {\n      res.push(Position.fromA1Notation('A7'), Position.fromA1Notation('H7'));\n    }\n    return res;\n  }\n\n  protected isValidMove(target: Position): boolean {\n    return this.isMoveTargetOwnPiece(target)\n      ? this.isValidCastleMove(target)\n      : true;\n  }\n\n  private isValidCastleMove(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    return targetPiece\n      ? targetPiece.type === 'Rook' && !targetPiece.hasMoved && !this.hasMoved\n      : false;\n  }\n}\n","import { Position } from './Position';\nimport { Pawn } from './Pawn';\nimport { Knight } from './Knight';\nimport { Bishop } from './Bishop';\nimport { Queen } from './Queen';\nimport { Rook } from './Rook';\nimport { King } from './King';\nimport type { Piece } from './AbstractPiece';\nimport type { Game } from './Game';\n\nexport class Player {\n  game: Game;\n  color: string;\n  pieces: Array<Piece>;\n\n  constructor(game: Game, color: string) {\n    this.game = game;\n    this.color = color;\n\n    let row1: string, row2: string;\n\n    if (color === 'white') {\n      row1 = '1';\n      row2 = '2';\n    } else if (color === 'black') {\n      row1 = '8';\n      row2 = '7';\n    } else {\n      throw new Error('Invalid color');\n    }\n\n    this.pieces = [\n      new King(this, 0, Position.fromA1Notation('E' + row1)),\n      new Queen(this, 1, Position.fromA1Notation('D' + row1)),\n      new Bishop(this, 2, Position.fromA1Notation('C' + row1)),\n      new Bishop(this, 3, Position.fromA1Notation('F' + row1)),\n      new Knight(this, 4, Position.fromA1Notation('B' + row1)),\n      new Knight(this, 5, Position.fromA1Notation('G' + row1)),\n      new Rook(this, 6, Position.fromA1Notation('A' + row1)),\n      new Rook(this, 7, Position.fromA1Notation('H' + row1)),\n      new Pawn(this, 8, Position.fromA1Notation('A' + row2)),\n      new Pawn(this, 9, Position.fromA1Notation('B' + row2)),\n      new Pawn(this, 10, Position.fromA1Notation('C' + row2)),\n      new Pawn(this, 11, Position.fromA1Notation('D' + row2)),\n      new Pawn(this, 12, Position.fromA1Notation('E' + row2)),\n      new Pawn(this, 13, Position.fromA1Notation('F' + row2)),\n      new Pawn(this, 14, Position.fromA1Notation('G' + row2)),\n      new Pawn(this, 15, Position.fromA1Notation('H' + row2)),\n    ];\n  }\n}\n","import type { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Move {\n  piece: Piece;\n  takes: Piece | null;\n  from: Position;\n  to: Position;\n\n  constructor(piece: Piece, to: Position, takes: Piece | null = null) {\n    const pos = piece.position;\n    if (!pos) {\n      throw new Error('Cannot move a piece that is not on the board.');\n    }\n\n    this.piece = piece;\n    this.takes = takes;\n    this.from = pos.clone();\n    this.to = to.clone();\n  }\n}\n","import { Board } from './Board';\nimport { Player } from './Player';\nimport { Move } from './Move';\nimport type { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Game {\n  board: Board;\n  white: Player;\n  black: Player;\n  moves: Array<Move>;\n\n  constructor() {\n    this.board = new Board(this);\n    this.white = new Player(this, 'white');\n    this.black = new Player(this, 'black');\n    this.moves = [];\n  }\n\n  /**\n   * Iterate each piece on the board very efficiently.\n   * If the callback function returns true, iteration ends.\n   */\n  forEachPiece(f: (piece: Piece) => boolean | void): void {\n    const wPcs = this.white.pieces;\n    const bPcs = this.black.pieces;\n    for (let i = 0; i < 16; i++) {\n      if (f(wPcs[i]) === true || f(bPcs[i]) === true) {\n        return;\n      }\n    }\n  }\n\n  /**\n   * Moves a piece on the board.\n   * If the target position already has a piece belonging to the opposing player, it is removed from the board.\n   * Allows for skipping validation of the move's legality according to the rules of the game. This is used internally\n   * for performance reasons when cloning the game, repeating the moves that were previously checked.\n   */\n  makeMove(piece: Piece, to: Position, _skipValidation?: boolean): void {\n    if (_skipValidation || piece.isValidMovePosition(to)) {\n      const targetPiece = piece.game.board.getPieceByPosition(to);\n      const move = new Move(piece, to, targetPiece);\n      this.board.registerMove(move);\n      piece.registerMove(move);\n      if (targetPiece) targetPiece.remove();\n    } else {\n      throw new Error('Invalid move.');\n    }\n  }\n\n  /**\n   * Returns a deep clone of the game instance.\n   */\n  clone(): Game {\n    const game = new Game();\n    const wPcs = game.white.pieces;\n    const bPcs = game.black.pieces;\n    const moves = this.moves;\n    const l = moves.length;\n    for (let piece, i = 0; i < l; i++) {\n      piece = moves[i].piece;\n      game.makeMove(\n        (piece.color === 'white' ? wPcs : bPcs)[piece.index],\n        moves[i].to.clone(),\n        true,\n      );\n    }\n    return game;\n  }\n}\n"],"names":["Piece","[object Object]","player","index","position","this","moves","game","board","setPiece","type","constructor","name","hasMoved","length","color","move","push","to","clone","target","targetPiece","getPieceByPosition","isMoveTargetOwnPiece","getValidMovePositions","find","compare","Bishop","pos","getAllDiagonalRecursive","arrClean","arr","res","l","i","createAssertFunction","expectedToBe","validate","f","arg","TypeError","Object","defineProperty","value","replace","A_CHAR_CODE","charCodeAt","from_X_to_A","x","String","fromCharCode","from_Y_to_1","y","toString","from_A_to_X","a","toUpperCase","from_1_to_Y","n","Number","charAt","from_XY_to_A1","from_A1_to_XY","a1","isValidXYPoint","isValidXY","isValidA1","assertValidXYPoint","assertValidXY","assertValidA1","Board","grid","Array","fill","getPieceByXY","piece","from","Position","skipValidation","xy","A1","xBy","yBy","e","getModulation","getUp","getDown","getLeft","getRight","getUpLeft","getUpRight","getDownLeft","getDownRight","getAllStraight","getAllDiagonal","getUpUpLeft","getUpUpRight","getDownDownLeft","getDownDownRight","getLeftLeftUp","getLeftLeftDown","getRightRightUp","getRightRightDown","modulator","call","getRecursive","getUpRecursive","getDownRecursive","getLeftRecursive","getRightRecursive","getUpLeftRecursive","getUpRightRecursive","getDownLeftRecursive","getDownRightRecursive","getAllStraightRecursive","Pawn","upPos","upUpPos","getUpUp","upLeftPos","diagLeftPiece","diagLeftPos","upRightPos","diagRightPiece","downPos","downDownPos","getDownDown","downLeftPos","downRightPos","Knight","getAllKnightMovePositions","Queen","getAllStraightAndDiagonalRecursive","Rook","fromA1Notation","isValidCastleMove","King","getAllStraightAndDiagonal","Player","row1","row2","Error","pieces","Move","takes","Game","white","black","wPcs","bPcs","_skipValidation","isValidMovePosition","registerMove","remove","makeMove"],"mappings":"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"}