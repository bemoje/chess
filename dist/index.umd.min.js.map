{"version":3,"file":"index.umd.min.js","sources":["../src/pieces/AbstractPiece.ts","../src/pieces/Bishop.ts","../src/util.ts","../src/coordinates.ts","../src/Board.ts","../src/pieces/King.ts","../src/pieces/Knight.ts","../src/Move.ts","../src/pieces/Pawn.ts","../src/Position.ts","../src/pieces/Queen.ts","../src/pieces/Rook.ts","../src/Player.ts","../src/Game.ts"],"sourcesContent":["import type { Player } from '../Player';\nimport type { Position } from '../Position';\nimport type { Game } from '../Game';\nimport type { Move } from '../Move';\n\n/**\n * Abstract piece class that each type of Piece (class) will extend.\n */\nexport abstract class Piece {\n  /**\n   * The Player who owns the Piece.\n   */\n  public player: Player;\n\n  /**\n   * Manually set piece index value. Only unique per Player instance.\n   */\n  public index: number;\n\n  /**\n   * The Position of the piece.\n   */\n  public position: Position | null;\n\n  /**\n   * The number of times the piece has moved.\n   */\n  public moveCount: number;\n\n  /**\n   * @param player - The Player who owns the Piece.\n   * @param index - Manually set piece index value. Only unique per Player instance.\n   * @param position - The Position of the piece.\n   */\n  public constructor(player: Player, index: number, position: Position) {\n    this.player = player;\n    this.index = index;\n    this.position = position;\n    this.moveCount = 0;\n    this.player.game.board.setPiece(this);\n  }\n\n  /**\n   * Returns the Game instance that this Piece is associated with.\n   */\n  public get game(): Game {\n    return this.player.game;\n  }\n\n  /**\n   * Returns the class name of the Piece.\n   */\n  public get type(): string {\n    return this.constructor.name;\n  }\n\n  /**\n   * Returns whether or not this Piece has made any moves yet.\n   */\n  public get hasMoved(): boolean {\n    return this.moveCount > 0;\n  }\n\n  /**\n   * Returns the player color of the Player instance that this Piece belongs to.\n   */\n  public get color(): string {\n    return this.player.color;\n  }\n\n  /**\n   * Returns whether this Piece is still on the board.\n   */\n  public get isTaken(): boolean {\n    return this.position === null;\n  }\n\n  /**\n   * Returns an array of Move instances that represent moves made by this Piece.\n   */\n  public get moves(): Move[] {\n    return this.player.game.moves.filter((move) => {\n      return move.piece === this;\n    });\n  }\n\n  /**\n   * Increments the moveCount number property and sets the position property.\n   */\n  public registerMove(move: Move): void {\n    this.moveCount++;\n    this.position = move.to.clone();\n  }\n\n  /**\n   * Sets the position property to null, which means that this Piece is no longer on the board.\n   */\n  public remove(): void {\n    this.position = null;\n  }\n\n  /**\n   * Returns whether there is a 'friendly' Piece at a given Position.\n   */\n  protected isMoveTargetOwnPiece(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    return targetPiece !== null && this.player === targetPiece.player;\n  }\n\n  /**\n   * Returns whether it is this Piece's Player's turn to move.\n   */\n  protected get isOwnTurn(): boolean {\n    return this.game.activePlayer === this.player;\n  }\n\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected abstract getMovePositionsWithinBounds(): Array<\n    Position | Array<Position>\n  >;\n\n  /**\n   * Iterates all valid move Position instances for this Piece.\n   *\n   * @param f - a callback function to invoke for each valid move position. If it returns true, iteration ends.\n   * @returns true if iteration was ended before completion.\n   */\n  public forEachValidMovePosition(\n    f: (position: Position) => boolean | void,\n  ): boolean | void {\n    if (this.isOwnTurn) {\n      const positions = this.getMovePositionsWithinBounds();\n      for (let i = 0; i < positions.length; i++) {\n        const item = positions[i];\n        if (Array.isArray(item)) {\n          // item is an array of positions where the array represents a move-direction. Used for pieces that can move\n          // further than by one slot on the game board.\n          for (let j = 0; j < item.length; j++) {\n            if (item[j] && this.isMoveTargetOwnPiece(item[j])) {\n              if (f(item[j])) {\n                return true;\n              }\n            } else {\n              // an own piece is in the way, so all following positions for the current direction will always be invalid.\n              break;\n            }\n          }\n        } else if (this.isMoveTargetOwnPiece(item)) {\n          if (f(item)) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns whether a move to a target position is a castling move.\n   * The King and Rook classes override this method.\n   */\n  public isCastleMove(_target: Position): boolean {\n    return false;\n  }\n\n  /**\n   * Returns whether a move to a position is a valid move.\n   */\n  public isValidMove(target: Position): boolean {\n    return (\n      this.isCastleMove(target) ||\n      !!this.forEachValidMovePosition((position) => {\n        return position.compare(target);\n      })\n    );\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from '../Position';\n\n/**\n * {Piece} Bishop class.\n */\nexport class Bishop extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllDiagonalRecursive() : [];\n  }\n}\n","import type { Position } from './Position';\n\n/**\n * Removes elements of a given array if they do not evaluate to true.\n *\n * @param arr - The array containing null values or Position instances to clean.\n */\nexport function arrClean(arr: Array<Position | null>): Array<Position> {\n  const res = [];\n  const l = arr.length;\n  for (let i = 0; i < l; i++) {\n    const pos = arr[i];\n    if (pos) {\n      res.push(pos);\n    }\n  }\n  return res;\n}\n\n/**\n * Returns the numeric difference between to numbers.\n *\n * @param n1 - A number\n * @param n2 - A number\n */\nexport function numericDifference(n1: number, n2: number): number {\n  const dist = n1 - n2;\n  return dist < 0 ? dist * -1 : dist;\n}\n\n/**\n * Returns an assertion function that expects [string] 'expectedToBe' evaluated by [Function] 'validate'\n *\n * @param expectedToBe - A string that describes the assertion.\n * @param validate - A callback function that validates an argument.\n */\nexport function createAssertFunction<T>(\n  expectedToBe: string,\n  validate: (arg: T) => boolean,\n): (arg: T, name?: string) => void {\n  const f = function (arg: T, name = 'arg') {\n    if (!validate(arg)) {\n      throw new TypeError(\n        `Expected ${name} to be ${expectedToBe}. ${name}: ${arg}`,\n      );\n    }\n  };\n  Object.defineProperty(f, 'name', {\n    value: validate.name.replace(/^is/, 'assert'),\n  });\n  return f;\n}\n\n/**\n * Returns whether a number is an even number.\n *\n * @param n - An integer\n */\nexport function isEven(n: number): boolean {\n  return n % 2 == 0;\n}\n\n/**\n * Converts an Uint8Array to an array of integers between 0 and 255.\n *\n * @param uInt8 - An Uint8Array instance.\n */\nexport function uInt8ToBytes(uInt8: Uint8Array): Array<number> {\n  const l = uInt8.length;\n  const res = new Array(l);\n  for (let i = 0; i < l; i++) {\n    res[i] = uInt8[i];\n  }\n  return res;\n}\n\n/**\n * Converts an array of bytes to a Uint8Array.\n *\n * @param arr - An array of integers between 0 and 255.\n */\nexport function bytesToUint8Array(arr: Array<number>): Uint8Array {\n  const l = arr.length;\n  const res = new Uint8Array(l);\n  for (let i = 0; i < l; i++) {\n    res[i] = arr[i];\n  }\n  return res;\n}\n","import { createAssertFunction } from './util';\n\nconst A_CHAR_CODE = 'A'.charCodeAt(0);\n\n/**\n * Converts the first value of an XY-coordinate to A1-notation.\n *\n * @param x - An integer where 0 <= x <= 7\n */\nexport function from_X_to_A(x: number): string {\n  return String.fromCharCode(x + A_CHAR_CODE);\n}\n\n/**\n * Converts the second value of an XY-coordinate to A1-notation.\n *\n * @param y - An integer where 0 <= y <= 7\n */\nexport function from_Y_to_1(y: number): string {\n  return (y + 1).toString();\n}\n\n/**\n * Converts the first character of A1-notation to the first value of an XY-coordinate.\n *\n * @param a - The first character of an A1-notation string.\n */\nexport function from_A_to_X(a: string): number {\n  return a.toUpperCase().charCodeAt(0) - A_CHAR_CODE;\n}\n\n/**\n * Converts the second character of A1-notation to the second value of an XY-coordinate.\n *\n * @param n - The second character of an A1-notation string.\n */\nexport function from_1_to_Y(n: string): number {\n  return Number(n.charAt(0)) - 1;\n}\n\n/**\n * Converts a XY-coordinate-array to an A1-notation string.\n *\n * @param xy - An XY-coordinate array where x and y are integers and 0 <= x <= 7 and 0 <= y <= 7\n */\nexport function from_XY_to_A1(xy: Array<number>): string {\n  return from_X_to_A(xy[0]) + from_Y_to_1(xy[1]);\n}\n\n/**\n * Converts an A1-notation string to a XY-coordinate-array.\n *\n * @param a1 - An A1-notation string.\n */\nexport function from_A1_to_XY(a1: string): Array<number> {\n  return [from_A_to_X(a1.charAt(0)), from_1_to_Y(a1.charAt(1))];\n}\n\n/**\n * Returns whether the argument is a positive integer where 0 <= arg <= 7.\n *\n * @param n - The second character of an A1-notation string.\n */\nexport function isValidXYPoint(n: number): boolean {\n  return n >= 0 && n <= 7;\n}\n\n/**\n * Returns whether both points in an XY-coordinate is a positive integer where 0 <= arg <= 7.\n *\n * @param xy - An XY-coordinate array where x and y are integers and 0 <= x <= 7 and 0 <= y <= 7\n */\nexport function isValidXY(xy: Array<number>): boolean {\n  return isValidXYPoint(xy[0]) && isValidXYPoint(xy[1]);\n}\n\n/**\n * Returns whether a string is valid A1-notation.\n *\n * @param a1 - An A1-notation string.\n */\nexport function isValidA1(a1: string): boolean {\n  return a1.length === 2 && isValidXY(from_A1_to_XY(a1));\n}\n\n/**\n * Throws a TypeError if the argument is not a valid XY-coordinate point.\n * @see isValidXYPoint\n *\n * @function assertValidXYPoint\n * @throws {TypeError}\n */\nexport const assertValidXYPoint = createAssertFunction(\n  'a positive integer between 0 and 7',\n  isValidXYPoint,\n);\n\n/**\n * Throws a TypeError if the argument is not a valid XY-coordinate.\n * @see isValidXY\n *\n * @function assertValidXY\n * @throws {TypeError}\n */\nexport const assertValidXY = createAssertFunction(\n  'an array containing two positive integers between 0 and 7',\n  isValidXY,\n);\n\n/**\n * Throws a TypeError if the argument is not valid A1-notation.\n * @see isValidA1\n *\n * @function assertValidA1\n * @throws {TypeError}\n */\nexport const assertValidA1 = createAssertFunction(\n  'a valid A1-notation string',\n  isValidA1,\n);\n","import { from_A1_to_XY } from './coordinates';\nimport type { Position } from './Position';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\nimport type { Piece } from './pieces/AbstractPiece';\n\n/**\n * A class that acts as a data view of all the pieces that offers faster lookups than iterating pieces.\n */\nexport class Board {\n  /**\n   * The Game instance that the board belongs to.\n   */\n  public game: Game;\n\n  /**\n   * A 2D array grid representing the game board.\n   */\n  public grid: Array<Array<Piece | null>>;\n\n  /**\n   * @param game - The Game instance that the board belongs to.\n   */\n  public constructor(game: Game) {\n    this.game = game;\n    this.grid = [];\n    let i = 0;\n    while (i < 8) {\n      this.grid.push(new Array(8).fill(null, 0, 7));\n      i++;\n    }\n  }\n\n  /**\n   * Returns the piece at the given XY-coordinates or null if no piece is found there.\n   *\n   * @param x - The X coordinate\n   * @param y - The Y coordinate\n   */\n  public getPieceByXY(x: number, y: number): Piece | null {\n    return this.grid[y][x];\n  }\n\n  /**\n   * Returns the piece at the given Position or null if no piece is found there.\n   *\n   * @param position - The position on the game board by which to find the Piece instance there.\n   */\n  public getPieceByPosition(position: Position): Piece | null {\n    return this.getPieceByXY(position.x, position.y);\n  }\n\n  /**\n   * Returns the piece at the given A1-notation-coordinates or null if no piece is found there.\n   *\n   * @param a1 - An A1-notation string.\n   */\n  public getPieceByA1(a1: string): Piece | null {\n    const [x, y] = from_A1_to_XY(a1);\n    return this.getPieceByXY(x, y);\n  }\n\n  /**\n   * Moves a piece to the board.\n   *\n   * @param piece - The piece to move.\n   */\n  public setPiece(piece: Piece): void {\n    const pos = piece.position;\n    if (pos) this.grid[pos.y][pos.x] = piece;\n  }\n\n  /**\n   * Removes a piece from the board.\n   * This method does not check legality or whether this action is part of a move in the game.\n   *\n   * @param piece - The piece to remove.\n   */\n  public removePiece(piece: Piece | null): void {\n    if (piece) {\n      const pos = piece.position;\n      if (pos) this.grid[pos.y][pos.x] = null;\n    }\n  }\n\n  /**\n   * Updates the board instance based on the information contained within a provided Move instance.\n   *\n   * @param move - The Move instance containing the information needed to update the board.\n   */\n  public registerMove(move: Move): void {\n    const from = move.from;\n    const to = move.to;\n    const piece = this.grid[from.y][from.x];\n    this.grid[to.y][to.x] = piece;\n    this.grid[from.y][from.x] = null;\n  }\n\n  /**\n   * Updates the board instance based on the information contained within a provided Move instance that is known to make\n   * out a swap (used for castling moves).\n   *\n   * @param move - The Move instance containing the information needed to update the board.\n   */\n  public registerSwap(move: Move): void {\n    const from = move.from;\n    const to = move.to;\n    const pieceFrom = this.grid[from.y][from.x];\n    const pieceTo = this.grid[to.y][to.x];\n    this.grid[to.y][to.x] = pieceFrom;\n    this.grid[from.y][from.x] = pieceTo;\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from '../Position';\n\n/**\n * {Piece} King class.\n */\nexport class King extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    return pos.getAllStraightAndDiagonal();\n  }\n\n  /**\n   * Returns whether a move to a target position is a castling move.\n   */\n  public isCastleMove(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    if (!targetPiece) return false;\n    // it is not necessary to check whether the taget piece is an own piece since an enemy piece will never be in the\n    // designated position without having moved, which gets checked.\n    return (\n      targetPiece.type === 'Rook' && !targetPiece.hasMoved && !this.hasMoved\n    );\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from '../Position';\n\n/**\n * {Piece} Knight class.\n */\nexport class Knight extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllKnightMovePositions() : [];\n  }\n}\n","import type { Piece } from './pieces/AbstractPiece';\nimport type { Position } from './Position';\n\n/**\n * A class that represents a move in a chess Game.\n */\nexport class Move {\n  /**\n   * The Piece that made the move.\n   */\n  public piece: Piece;\n\n  /**\n   * The Piece that was taken out by the move, if any.\n   */\n  public takes: Piece | null;\n\n  /**\n   * The Position where the Piece was move was from.\n   */\n  public from: Position;\n\n  /**\n   * The Position where the Piece was move was to.\n   */\n  public to: Position;\n\n  /**\n   * @param piece - The Piece that made the move.\n   * @param to - The Position where the Piece was moved to.\n   * @param takes - The Piece that was taken out by the move, if any.\n   */\n  public constructor(piece: Piece, to: Position, takes: Piece | null = null) {\n    const pos = piece.position;\n    if (!pos) {\n      throw new Error('Cannot move a piece that is not on the board.');\n    }\n\n    this.piece = piece;\n    this.takes = takes;\n    this.from = pos.clone();\n    this.to = to.clone();\n  }\n\n  /**\n   * Stringifies the data necessary for completely reconstructing the Move instance.\n   */\n  public toJSON(): Array<number> {\n    return [this.from.x, this.from.y, this.to.x, this.to.y];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from '../Position';\n\n/**\n * {Piece} Pawn class.\n */\nexport class Pawn extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const board = this.game.board;\n    const pos = this.position;\n    const res = [];\n\n    if (!pos) {\n      return [];\n    }\n\n    if (this.color === 'white') {\n      const upPos = pos.getUp();\n      if (upPos) {\n        res.push(upPos);\n      }\n\n      const upUpPos = pos.getUpUp();\n      if (upUpPos && !this.hasMoved) {\n        res.push(upUpPos);\n      }\n\n      const upLeftPos = pos.getUpLeft();\n      if (upLeftPos) {\n        const diagLeftPiece = board.getPieceByPosition(upLeftPos);\n        if (diagLeftPiece) {\n          const diagLeftPos = diagLeftPiece.position;\n          if (diagLeftPos && diagLeftPiece.color === 'black') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n\n      const upRightPos = pos.getUpRight();\n      if (upRightPos) {\n        const diagRightPiece = board.getPieceByPosition(upRightPos);\n        if (diagRightPiece) {\n          const diagLeftPos = diagRightPiece.position;\n          if (diagLeftPos && diagRightPiece.color === 'black') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n    } else {\n      const downPos = pos.getDown();\n      if (downPos) {\n        res.push(downPos);\n      }\n\n      const downDownPos = pos.getDownDown();\n      if (downDownPos && !this.hasMoved) {\n        res.push(downDownPos);\n      }\n\n      const downLeftPos = pos.getDownLeft();\n      if (downLeftPos) {\n        const diagLeftPiece = board.getPieceByPosition(downLeftPos);\n        if (diagLeftPiece) {\n          const diagLeftPos = diagLeftPiece.position;\n          if (diagLeftPos && diagLeftPiece.color === 'white') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n\n      const downRightPos = pos.getDownRight();\n      if (downRightPos) {\n        const diagRightPiece = board.getPieceByPosition(downRightPos);\n        if (diagRightPiece) {\n          const diagLeftPos = diagRightPiece.position;\n          if (diagLeftPos && diagRightPiece.color === 'white') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n    }\n    return res;\n  }\n}\n","import { from_A1_to_XY, from_XY_to_A1, assertValidXY } from './coordinates';\nimport { arrClean } from './util';\n\n/**\n * A class that represents a XY-coordinate position on the Board of a chess Game.\n */\nexport class Position {\n  /**\n   * The X coordinate.\n   */\n  public x: number;\n\n  /**\n   * The Y coordinate.\n   */\n  public y: number;\n\n  /**\n   * Modulates the Position and returns a new Position instance based on A1-notation input.\n   */\n  public static fromA1(a1: string): Position {\n    const xy = from_A1_to_XY(a1);\n    return new Position(xy[0], xy[1]);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance based on XY-coordinate array.\n   */\n  public static fromXY(xy: Array<number>): Position {\n    return new Position(xy[0], xy[1]);\n  }\n\n  /**\n   * @param x - a positive integer between 0 and 7 both inclusive.\n   * @param y - a positive integer between 0 and 7 both inclusive.\n   */\n  public constructor(x: number, y: number, skipValidation = false) {\n    if (!skipValidation) {\n      assertValidXY([x, y], 'x and y');\n    }\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Returns the board position in A1-notation.\n   */\n  public get A1(): string {\n    return from_XY_to_A1([this.x, this.y]);\n  }\n\n  /**\n   * Returns the board position as an XY-coordinate array.\n   */\n  public get XY(): Array<number> {\n    return [this.x, this.y];\n  }\n\n  /**\n   * Deep-equality-compares the Position instance to another Position instance.\n   *\n   * @param position - The Position instance to compare.\n   */\n  public compare(position: Position): boolean {\n    return this.x === position.x && this.y === position.y;\n  }\n\n  /**\n   * Returns a clone of the instance.\n   */\n  public clone(): Position {\n    return new Position(this.x, this.y, true);\n  }\n\n  /**\n   * Returns the instance as a normal array.\n   */\n  public toArray(): Array<number> {\n    return [this.x, this.y];\n  }\n\n  /**\n   * Modulates the XY-position coordinate and returns a new Position instance equivalent to it, or null if that position\n   * is out of bounds of the board.\n   *\n   * @param xBy - The number of chess grid units to module by on the x-axis.\n   * @param yBy - The number of chess grid units to module by on the y-axis.\n   * @returns `null` if the resulting position is out of bounds.\n   */\n  private getModulation(xBy: number, yBy: number): Position | null {\n    try {\n      return new Position(this.x + xBy, this.y + yBy);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved up by 1 from the position on the board\n   * that this instance describes.\n   */\n  public getUp(): Position | null {\n    return this.getModulation(0, 1);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved down by 1 from the position on the board\n   * that this instance describes.\n   */\n  public getDown(): Position | null {\n    return this.getModulation(0, -1);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved left by 1 from the position on the board\n   * that this instance describes.\n   */\n  public getLeft(): Position | null {\n    return this.getModulation(-1, 0);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved right by 1 from the position on the board\n   * that this instance describes.\n   */\n  public getRight(): Position | null {\n    return this.getModulation(1, 0);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved up by 1 and left by 1 from the position on\n   * the board that this instance describes.\n   */\n  public getUpLeft(): Position | null {\n    return this.getModulation(-1, 1);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved up by 1 and right by 1 from the position\n   * on the board that this instance describes.\n   */\n  public getUpRight(): Position | null {\n    return this.getModulation(1, 1);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved down by 1 and left by 1 from the position\n   * on the board that this instance describes.\n   */\n  public getDownLeft(): Position | null {\n    return this.getModulation(-1, -1);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved down by 1 and right by 1 from the position\n   * on the board that this instance describes.\n   */\n  public getDownRight(): Position | null {\n    return this.getModulation(1, -1);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved up by 2 from the position on the board\n   * that this instance describes.\n   */\n  public getUpUp(): Position | null {\n    return this.getModulation(0, 2);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved down by 2 from the position on the board\n   * that this instance describes.\n   */\n  public getDownDown(): Position | null {\n    return this.getModulation(0, -2);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved up by 2 and left by 1 from the position on\n   * the board that this instance describes.\n   */\n  public getUpUpLeft(): Position | null {\n    return this.getModulation(-1, 2);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved up by 2 and right by 1 from the position\n   * on the board that this instance describes.\n   */\n  public getUpUpRight(): Position | null {\n    return this.getModulation(1, 2);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved down by 2 and left by 1 from the position\n   * on the board that this instance describes.\n   */\n  public getDownDownLeft(): Position | null {\n    return this.getModulation(-1, -2);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved down by 2 and right by 1 from the position\n   * on the board that this instance describes.\n   */\n  public getDownDownRight(): Position | null {\n    return this.getModulation(1, -2);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved left by 2 and up by 1 from the position on\n   * the board that this instance describes.\n   */\n  public getLeftLeftUp(): Position | null {\n    return this.getModulation(-2, 1);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved left by 2 and up by 1 from the position on\n   * the board that this instance describes.\n   */\n  public getLeftLeftDown(): Position | null {\n    return this.getModulation(-2, -1);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved right by 2 and up by 1 from the position\n   * on the board that this instance describes.\n   */\n  public getRightRightUp(): Position | null {\n    return this.getModulation(2, 1);\n  }\n\n  /**\n   * Modulates the Position and returns a new Position instance that is moved right by 2 and down by 1 from the position\n   * on the board that this instance describes.\n   */\n  public getRightRightDown(): Position | null {\n    return this.getModulation(2, -1);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all straight (horizontal and vertical) directions.\n   */\n  public getAllStraight(): Array<Position> {\n    return arrClean([\n      this.getUp(),\n      this.getDown(),\n      this.getLeft(),\n      this.getRight(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all diagonal directions.\n   */\n  public getAllDiagonal(): Array<Position> {\n    return arrClean([\n      this.getUpLeft(),\n      this.getUpRight(),\n      this.getDownLeft(),\n      this.getDownRight(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all straight (horizontal and vertical) and\n   * diagonal directions.\n   */\n  public getAllStraightAndDiagonal(): Array<Position> {\n    return [...this.getAllStraight(), ...this.getAllDiagonal()];\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved one time equivalent of all legal knight-piece moves.\n   */\n  public getAllKnightMovePositions(): Array<Position> {\n    return arrClean([\n      this.getUpUpLeft(),\n      this.getUpUpRight(),\n      this.getDownDownLeft(),\n      this.getDownDownRight(),\n      this.getLeftLeftUp(),\n      this.getLeftLeftDown(),\n      this.getRightRightUp(),\n      this.getRightRightDown(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by a provided modulator function recursively until the\n   * modulator's returned Position instance becomes out of bounds of the board.\n   *\n   * @param modulator - The modulator method to use for recursion.\n   */\n  private getRecursive(modulator: () => Position | null): Array<Position> {\n    const res = [];\n    let pos: Position | null;\n    pos = this;\n    while ((pos = modulator.call(pos))) {\n      res.push(pos);\n    }\n    return res;\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getUpRecursive(): Array<Position> {\n    return this.getRecursive(this.getUp);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getDownRecursive(): Array<Position> {\n    return this.getRecursive(this.getDown);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving left by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving right by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 and left by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getUpLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getUpLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 and right by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getUpRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getUpRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 and left by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getDownLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getDownLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 and right by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getDownRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getDownRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all straight\n   * (horizontal and vertical) directions from the position on the board that this instance describes until the\n   * resulting Position instance becomes out of bounds of the board.\n   */\n  public getAllStraightRecursive(): Array<Array<Position>> {\n    return [\n      this.getUpRecursive(),\n      this.getDownRecursive(),\n      this.getLeftRecursive(),\n      this.getRightRecursive(),\n    ];\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all diagonal\n   * directions from the position on the board that this instance describes until the resulting Position instance\n   * becomes out of bounds of the board.\n   */\n  public getAllDiagonalRecursive(): Array<Array<Position>> {\n    return [\n      this.getUpLeftRecursive(),\n      this.getUpRightRecursive(),\n      this.getDownLeftRecursive(),\n      this.getDownRightRecursive(),\n    ];\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all straight\n   * (horizontal and vertical) and diagonal directions from the position on the board that this instance describes until\n   * the resulting Position instance becomes out of bounds of the board.\n   */\n  public getAllStraightAndDiagonalRecursive(): Array<Array<Position>> {\n    return [\n      ...this.getAllStraightRecursive(),\n      ...this.getAllDiagonalRecursive(),\n    ];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from '../Position';\n\n/**\n * {Piece} Queen class.\n */\nexport class Queen extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllStraightAndDiagonalRecursive() : [];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from '../Position';\n\n/**\n * {Piece} Rook class.\n */\nexport class Rook extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    return pos.getAllStraightRecursive();\n  }\n\n  /**\n   * Returns whether a move to a target position is a castling move.\n   */\n  public isCastleMove(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    if (!targetPiece) return false;\n    // it is not necessary to check whether the taget piece is an own piece since an enemy piece will never be in the\n    // designated position without having moved, which gets checked.\n    return (\n      targetPiece.type === 'King' && !targetPiece.hasMoved && !this.hasMoved\n    );\n  }\n}\n","import { Position } from './Position';\nimport { Pawn } from './pieces/Pawn';\nimport { Knight } from './pieces/Knight';\nimport { Bishop } from './pieces/Bishop';\nimport { Queen } from './pieces/Queen';\nimport { Rook } from './pieces/Rook';\nimport { King } from './pieces/King';\nimport type { Piece } from './pieces/AbstractPiece';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\n\n/**\n * A class that represents a player in a chess Game.\n */\nexport class Player {\n  /**\n   * The game that this Player instance belongs to.\n   */\n  public game: Game;\n\n  /**\n   * The color of the player. Can be `white` or `black`.\n   */\n  public color: string;\n\n  /**\n   * An array containing the board Pieces that the player has.\n   */\n  public pieces: Piece[];\n\n  /**\n   * @param game - The game that this Player instance belongs to.\n   * @param color - The color of the player. Can be `white` or `black`.\n   * @throws {Error} on invalid color.\n   */\n  public constructor(game: Game, color: string) {\n    this.game = game;\n    this.color = color;\n\n    let row1: string, row2: string;\n    if (color === 'white') {\n      row1 = '1';\n      row2 = '2';\n    } else if (color === 'black') {\n      row1 = '8';\n      row2 = '7';\n    } else {\n      throw new Error('Invalid color');\n    }\n\n    this.pieces = [\n      new King(this, 0, Position.fromA1('E' + row1)),\n      new Queen(this, 1, Position.fromA1('D' + row1)),\n      new Bishop(this, 2, Position.fromA1('C' + row1)),\n      new Bishop(this, 3, Position.fromA1('F' + row1)),\n      new Knight(this, 4, Position.fromA1('B' + row1)),\n      new Knight(this, 5, Position.fromA1('G' + row1)),\n      new Rook(this, 6, Position.fromA1('A' + row1)),\n      new Rook(this, 7, Position.fromA1('H' + row1)),\n      new Pawn(this, 8, Position.fromA1('A' + row2)),\n      new Pawn(this, 9, Position.fromA1('B' + row2)),\n      new Pawn(this, 10, Position.fromA1('C' + row2)),\n      new Pawn(this, 11, Position.fromA1('D' + row2)),\n      new Pawn(this, 12, Position.fromA1('E' + row2)),\n      new Pawn(this, 13, Position.fromA1('F' + row2)),\n      new Pawn(this, 14, Position.fromA1('G' + row2)),\n      new Pawn(this, 15, Position.fromA1('H' + row2)),\n    ];\n  }\n\n  /**\n   * Returns an array of Moves that the player has made.\n   */\n  public get moves(): Move[] {\n    return this.game.moves.filter((move) => {\n      return move.piece.player === this;\n    });\n  }\n}\n","import { Board } from './Board';\nimport { Player } from './Player';\nimport { Move } from './Move';\nimport { isEven, uInt8ToBytes, bytesToUint8Array } from './util';\nimport { Position } from './Position';\nimport { Piece } from './pieces/AbstractPiece';\n\n/**\n * The default exported class from which the chess game is controlled.\n */\nexport class Game {\n  /**\n   * Parse and optionally validate JSON data.\n   *\n   * @param data - A previously stringified Game instance.\n   * @param skipValidation - skips validation of the move's legality according to the rules of the game.\n   * @throws {TypeError} on invalid JSON data.\n   */\n  private static parseJSON(\n    data: string,\n    skipValidation: boolean,\n  ): Array<number> {\n    let moves;\n    try {\n      moves = JSON.parse(data);\n      if (!skipValidation) {\n        if (!Number.isInteger(moves.length / 4)) {\n          throw new TypeError('Invalid length.');\n        }\n        for (let i = 0; i < moves.length; i++) {\n          if (!Number.isInteger(moves[i])) {\n            throw new TypeError('Expected an array of integers only.');\n          }\n        }\n      }\n    } catch (e) {\n      throw new TypeError('Invalid JSON data. ' + e.message);\n    }\n    return moves;\n  }\n\n  /**\n   * Recreates a Game instance from a previously parsed stringified or serialized Game instance converted to array.\n   * Used internally by @see Game.fromJSON() and @see Game.deserialize()\n   *\n   * @param data - A previously stringified Game instance.\n   * @param skipValidation - skips validation of the move's legality according to the rules of the game.\n   */\n  private static fromArray(data: Array<number>, skipValidation: boolean) {\n    const game = new Game();\n    for (let i = 0; i < data.length; i += 4) {\n      game.move(\n        new Position(data[i], data[i + 1]),\n        new Position(data[i + 2], data[i + 3]),\n        skipValidation,\n      );\n    }\n    return game;\n  }\n\n  /**\n   * Recreates a Game instance from a previously stringified Game instance.\n   * @see Game.prototype.toJSON()\n   *\n   * @param data - A previously stringified Game instance.\n   * @param skipValidation - skips validation of the move's legality according to the rules of the game as well as the data.\n   * @throws {Error} on invalid JSON data.\n   */\n  public static fromJSON(data: string, skipValidation = false): Game {\n    return this.fromArray(this.parseJSON(data, skipValidation), skipValidation);\n  }\n\n  /**\n   * Recreates a Game instance from binary data.\n   * @see Game.prototype.serialize()\n   *\n   * @param data - A previously stringified Game instance.\n   * @param skipValidation - skips validation of the move's legality according to the rules of the game as well as the data.\n   * @throws {Error} on invalid JSON data.\n   */\n  public static deserialze(data: Uint8Array, skipValidation = false): Game {\n    return this.fromArray(uInt8ToBytes(data), skipValidation);\n  }\n\n  /**\n   * The game board.\n   */\n  public board: Board;\n\n  /**\n   * White player.\n   */\n  public white: Player;\n\n  /**\n   * Black player.\n   */\n  public black: Player;\n\n  /**\n   * An array containing all moves made in the game.\n   */\n  public moves: Array<Move>;\n\n  /**\n   * Creates and initializes a new chess game.\n   */\n  public constructor() {\n    this.board = new Board(this);\n    this.white = new Player(this, 'white');\n    this.black = new Player(this, 'black');\n    this.moves = [];\n  }\n\n  /**\n   * Returns whether it is white player's turn to move.\n   */\n  public get isWhitesTurnToMove(): boolean {\n    return isEven(this.moves.length);\n  }\n\n  /**\n   * Returns whether it is black player's turn to move.\n   */\n  public get isBlacksTurnToMove(): boolean {\n    return !isEven(this.moves.length);\n  }\n\n  /**\n   * Returns whether it is black player's turn to move.\n   */\n  public get activePlayer(): Player {\n    return this.isWhitesTurnToMove ? this.white : this.black;\n  }\n\n  /**\n   * Iterate each piece on the board.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   * @returns true if iteration was ended before completion.\n   */\n  public forEachActivePiece(\n    f: (piece?: Piece) => boolean | void,\n  ): boolean | void {\n    const w = this.white.pieces;\n    const b = this.black.pieces;\n    for (let i = 0; i < 16; i++) {\n      if ((!w[i].isTaken && f(w[i])) || (!b[i].isTaken && f(b[i]))) {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Iterate each white piece on the board.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   * @returns true if iteration was ended before completion.\n   */\n  private forEachActiveWhitePiece(\n    f: (piece?: Piece) => boolean | void,\n  ): boolean | void {\n    const w = this.white.pieces;\n    for (let i = 0; i < 16; i++) {\n      if (!w[i].isTaken && f(w[i])) {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Iterate each black piece on the board.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   * @returns true if iteration was ended before completion.\n   */\n  private forEachActiveBlackPiece(\n    f: (piece?: Piece) => boolean | void,\n  ): boolean | void {\n    const b = this.black.pieces;\n    for (let i = 0; i < 16; i++) {\n      if (!b[i].isTaken && f(b[i])) {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Iterate each piece on the board belonging to the player whose turn it is to move.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   * @returns true if iteration was ended before completion.\n   */\n  public forEachCurrentPlayerActivePiece(\n    f: (piece?: Piece) => boolean | void,\n  ): boolean | void {\n    return this.isWhitesTurnToMove\n      ? this.forEachActiveWhitePiece(f)\n      : this.forEachActiveBlackPiece(f);\n  }\n\n  /**\n   * Ensures the argument is converted into a Position instance.\n   *\n   * @param from - a Position instance, A1-notation string or XY-coordinate-array.\n   */\n  private ensurePosition(from: Position | string | Array<number>): Position {\n    return from instanceof Position\n      ? from\n      : typeof from === 'string'\n      ? Position.fromA1(from)\n      : Position.fromXY(from);\n  }\n\n  /**\n   * Get a Piece instance from the board by either Position, an A1 string or XY-coordinates\n   *\n   * @param from - a Position instance, A1-notation string or XY-coordinate-array. If a Piece instance is passed, it is returned.\n   */\n  private ensurePiece(\n    from?: Position | string | Array<number> | Piece,\n  ): Piece | null {\n    return !from\n      ? null\n      : from instanceof Piece\n      ? from\n      : this.board.getPieceByPosition(this.ensurePosition(from));\n  }\n\n  /**\n   * Iterate each valid move position for either all active player pieces or a given piece.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   * @param pieceOrCoordinate - only iterate a single piece's valid move positions. Can be the Piece to move, or where\n   * to find the piece which can be a Position instance, XY-array or A1-notation string.\n   * @returns true if iteration was ended before completion.\n   */\n  public forEachValidMove(\n    f: (position?: Position, piece?: Piece) => boolean | void,\n    pieceOrCoordinate?: Piece | Position | string | Array<number>,\n  ): boolean | void {\n    const piece = this.ensurePiece(pieceOrCoordinate);\n    return piece\n      ? piece.forEachValidMovePosition((pos) => {\n          return f(pos, piece);\n        })\n      : this.forEachCurrentPlayerActivePiece((piece) => {\n          if (piece) {\n            return piece.forEachValidMovePosition((pos) => {\n              return f(pos, piece);\n            });\n          } else return;\n        });\n  }\n\n  /**\n   * Moves a piece on the board.\n   * If the target position already has a piece belonging to the opposing player, it is removed from the board.\n   *\n   * @param pieceOrCoordinate - The Piece to move, or where to find the piece which can be a Position instance, XY-array\n   * or A1-notation string.\n   * @param to - Where to move to.\n   * @param skipValidation - skips validation of the move's legality according to the rules of the game. This is used\n   * internally for performance reasons when cloning a game, which repeats the moves that were previously validated.\n   * @throws {Error} on invalid move, unless `skipValidation` is true.\n   * @returns self - is chainable.\n   */\n  public move(\n    pieceOrCoordinate: Piece | Position,\n    to: Position | string | Array<number>,\n    skipValidation?: boolean,\n  ): Game {\n    to = this.ensurePosition(to);\n    const piece = this.ensurePiece(pieceOrCoordinate);\n    if (piece && (skipValidation || piece.isValidMove(to))) {\n      const targetPiece = piece.game.board.getPieceByPosition(to);\n      let move;\n      if (piece.isCastleMove(to)) {\n        move = new Move(piece, to);\n        this.board.registerSwap(move);\n        if (targetPiece) {\n          targetPiece.registerMove(new Move(targetPiece, move.from));\n        }\n      } else {\n        move = new Move(piece, to, targetPiece);\n        this.board.registerMove(move);\n        if (targetPiece) {\n          targetPiece.remove();\n        }\n      }\n      piece.registerMove(move);\n      this.moves.push(move);\n    } else {\n      throw new Error('Invalid move.');\n    }\n    return this;\n  }\n\n  /**\n   * Returns a deep clone of the game instance.\n   */\n  public clone(): Game {\n    const game = new Game();\n    const w = game.white.pieces;\n    const b = game.black.pieces;\n    const moves = this.moves;\n    for (let i = 0; i < moves.length; i++) {\n      const piece = moves[i].piece;\n      game.move(\n        (piece.color === 'white' ? w : b)[piece.index],\n        moves[i].to.clone(),\n        true,\n      );\n    }\n    return game;\n  }\n\n  /**\n   * Method used by JSON.stringify to return string-serialized data necessary for completely reconstructing the Game\n   * instance.\n   * @see Game.fromJSON()\n   */\n  public toJSON(): Array<number> {\n    const moves = this.moves;\n    const l = moves.length;\n    const res = new Array(l * 4);\n    for (let move, i = 0; i < l; i++) {\n      move = moves[i];\n      res[i * 4 + 0] = move.from.x;\n      res[i * 4 + 1] = move.from.y;\n      res[i * 4 + 2] = move.to.x;\n      res[i * 4 + 3] = move.to.y;\n    }\n    return res;\n  }\n\n  /**\n   * Serializes the data necessary for completely reconstructing the Game instance to binary.\n   * @see Game.deserialize()\n   */\n  public serialize(): Uint8Array {\n    return bytesToUint8Array(this.toJSON());\n  }\n}\n"],"names":["player","index","position","this","moveCount","game","board","setPiece","Object","Piece","constructor","name","color","moves","filter","move","piece","_this","to","clone","target","targetPiece","getPieceByPosition","activePlayer","f","isOwnTurn","positions","getMovePositionsWithinBounds","i","length","item","Array","isArray","j","isMoveTargetOwnPiece","_target","isCastleMove","forEachValidMovePosition","compare","__extends","Bishop","pos","getAllDiagonalRecursive","arrClean","arr","res","l","push","createAssertFunction","expectedToBe","validate","arg","TypeError","defineProperty","value","replace","isEven","n","uInt8ToBytes","uInt8","bytesToUint8Array","Uint8Array","A_CHAR_CODE","charCodeAt","from_X_to_A","x","String","fromCharCode","from_Y_to_1","y","toString","from_A_to_X","a","toUpperCase","from_1_to_Y","Number","charAt","from_XY_to_A1","xy","from_A1_to_XY","a1","isValidXYPoint","isValidXY","isValidA1","assertValidXYPoint","assertValidXY","assertValidA1","grid","fill","Board","getPieceByXY","_a","from","pieceFrom","pieceTo","King","getAllStraightAndDiagonal","type","hasMoved","Knight","getAllKnightMovePositions","takes","Error","Move","Pawn","upPos","getUp","upUpPos","getUpUp","upLeftPos","getUpLeft","diagLeftPiece","diagLeftPos","upRightPos","getUpRight","diagRightPiece","downPos","getDown","downDownPos","getDownDown","downLeftPos","getDownLeft","downRightPos","getDownRight","skipValidation","Position","xBy","yBy","e","getModulation","getLeft","getRight","getAllStraight","getAllDiagonal","getUpUpLeft","getUpUpRight","getDownDownLeft","getDownDownRight","getLeftLeftUp","getLeftLeftDown","getRightRightUp","getRightRightDown","modulator","call","getRecursive","getUpRecursive","getDownRecursive","getLeftRecursive","getRightRecursive","getUpLeftRecursive","getUpRightRecursive","getDownLeftRecursive","getDownRightRecursive","getAllStraightRecursive","Queen","getAllStraightAndDiagonalRecursive","Rook","row1","row2","pieces","fromA1","Player","white","black","Game","data","JSON","parse","isInteger","message","fromArray","parseJSON","isWhitesTurnToMove","w","b","isTaken","forEachActiveWhitePiece","forEachActiveBlackPiece","fromXY","ensurePosition","pieceOrCoordinate","ensurePiece","forEachCurrentPlayerActivePiece","isValidMove","registerSwap","registerMove","remove","toJSON","numericDifference","n1","n2","dist"],"mappings":"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"}