{"version":3,"file":"index.umd.min.js","sources":["../src/AbstractPiece.ts","../src/Bishop.ts","../src/util.ts","../src/coordinates.ts","../src/Board.ts","../src/King.ts","../src/Knight.ts","../src/Move.ts","../src/Pawn.ts","../src/Position.ts","../src/Queen.ts","../src/Rook.ts","../src/Player.ts","../src/Game.ts"],"sourcesContent":["import type { Player } from './Player';\nimport type { Position } from './Position';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\n\nexport abstract class Piece {\n  public player: Player;\n  public index: number;\n  public position: Position | null;\n  public moveCount: number;\n\n  public constructor(player: Player, index: number, position: Position) {\n    this.player = player;\n    this.index = index;\n    this.position = position;\n    this.moveCount = 0;\n    this.player.game.board.setPiece(this);\n  }\n\n  /**\n   * Returns the Game instance that this Piece is associated with.\n   */\n  public get game(): Game {\n    return this.player.game;\n  }\n\n  /**\n   * Returns the class name of the Piece.\n   */\n  public get type(): string {\n    return this.constructor.name;\n  }\n\n  /**\n   * Returns whether or not this Piece has made any moves yet.\n   */\n  public get hasMoved(): boolean {\n    return this.moveCount > 0;\n  }\n\n  /**\n   * Returns the player color of the Player instance that this Piece belongs to.\n   */\n  public get color(): string {\n    return this.player.color;\n  }\n\n  /**\n   * Returns whether this Piece is still on the board.\n   */\n  public get isTaken(): boolean {\n    return this.position === null;\n  }\n\n  /**\n   * Returns an array of Move instances that represent moves made by this Piece.\n   */\n  public get moves(): Move[] {\n    return this.player.game.moves.filter((move) => {\n      return move.piece === this;\n    });\n  }\n\n  /**\n   * Increments the moveCount number property and sets the position property.\n   */\n  public registerMove(move: Move): void {\n    this.moveCount++;\n    this.position = move.to.clone();\n  }\n\n  /**\n   * Sets the position property to null, which means that this Piece is no longer on the board.\n   */\n  public remove(): void {\n    this.position = null;\n  }\n\n  /**\n   * Returns whether there is a 'friendly' Piece at a given Position.\n   */\n  protected isMoveTargetOwnPiece(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    return targetPiece !== null && this.player === targetPiece.player;\n  }\n\n  /**\n   * Returns whether it is this Piece's Player's turn to move.\n   */\n  protected get isOwnTurn(): boolean {\n    return this.game.activePlayer === this.player;\n  }\n\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected abstract getMovePositionsWithinBounds(): Array<\n    Position | Array<Position>\n  >;\n\n  /**\n   * Iterates all valid move Position instances for this Piece.\n   *\n   * @param f - a callback function to invoke for each valid move position. If it returns true, iteration ends.\n   */\n  public forEachValidMovePosition(\n    f: (position: Position) => boolean | void,\n  ): void {\n    if (this.isOwnTurn) {\n      const positions = this.getMovePositionsWithinBounds();\n      for (let i = 0; i < positions.length; i++) {\n        const item = positions[i];\n        if (Array.isArray(item)) {\n          for (let j = 0; j < item.length; j++) {\n            if (item[j] && this.isMoveTargetOwnPiece(item[j])) {\n              if (f(item[j])) {\n                return;\n              }\n            } else {\n              // an own piece is in the way, so all following positions will always be invalid.\n              break;\n            }\n          }\n        } else if (this.isMoveTargetOwnPiece(item)) {\n          if (f(item)) {\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns whether a move to a target position is a castling move.\n   */\n  public isCastleMove(_target: Position): boolean {\n    _target;\n    return false;\n  }\n\n  /**\n   * Returns whether a move to a position is a valid move.\n   */\n  public isValidMove(target: Position): boolean {\n    if (this.isCastleMove(target)) return true;\n    let res = false;\n    this.forEachValidMovePosition((position) => {\n      if (position.compare(target)) {\n        res = true;\n        // end iteration\n        return true;\n      } else return;\n    });\n    return res;\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Bishop extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllDiagonalRecursive() : [];\n  }\n}\n","import type { Position } from './Position';\n\n/**\n * Removes elements of a given array if they do not evaluate to true.\n */\nexport function arrClean(arr: Array<Position | null>): Array<Position> {\n  const res = [];\n  const l = arr.length;\n  for (let i = 0; i < l; i++) {\n    const pos = arr[i];\n    if (pos) {\n      res.push(pos);\n    }\n  }\n  return res;\n}\n\n/**\n * Returns the numeric difference between to numbers.\n */\nexport function numericDifference(n1: number, n2: number): number {\n  const dist = n1 - n2;\n  return dist < 0 ? dist * -1 : dist;\n}\n\n/**\n * Returns an assertion function that expects [string] 'expectedToBe' evaluated by [Function] 'validate'\n */\nexport function createAssertFunction<T>(\n  expectedToBe: string,\n  validate: (arg: T) => boolean,\n): (arg: T, name?: string) => void {\n  const f = function (arg: T, name = 'arg') {\n    if (!validate(arg)) {\n      throw new TypeError(\n        `Expected ${name} to be ${expectedToBe}. ${name}: ${arg}`,\n      );\n    }\n  };\n  Object.defineProperty(f, 'name', {\n    value: validate.name.replace(/^is/, 'assert'),\n  });\n  return f;\n}\n\n/**\n * Returns whether a number is an even number.\n */\nexport function isEven(n: number): boolean {\n  return n % 2 == 0;\n}\n","import { createAssertFunction } from './util';\n\nconst A_CHAR_CODE = 'A'.charCodeAt(0);\n\n/**\n * Converts the first value of an XY-coordinate to A1-notation.\n */\nexport function from_X_to_A(x: number): string {\n  return String.fromCharCode(x + A_CHAR_CODE);\n}\n\n/**\n * Converts the second value of an XY-coordinate to A1-notation.\n */\nexport function from_Y_to_1(y: number): string {\n  return (y + 1).toString();\n}\n\n/**\n * Converts the first character of A1-notation to the first value of an XY-coordinate.\n */\nexport function from_A_to_X(a: string): number {\n  return a.toUpperCase().charCodeAt(0) - A_CHAR_CODE;\n}\n\n/**\n * Converts the second character of A1-notation to the second value of an XY-coordinate.\n */\nexport function from_1_to_Y(n: string): number {\n  return Number(n.charAt(0)) - 1;\n}\n\n/**\n * Converts a XY-coordinate-array to an A1-notation string.\n */\nexport function from_XY_to_A1(pos: Array<number>): string {\n  return from_X_to_A(pos[0]) + from_Y_to_1(pos[1]);\n}\n\n/**\n * Converts an A1-notation string to a XY-coordinate-array.\n */\nexport function from_A1_to_XY(a1: string): Array<number> {\n  return [from_A_to_X(a1.charAt(0)), from_1_to_Y(a1.charAt(1))];\n}\n\n/**\n * Returns whether the argument is a positive integer where 0 <= arg <= 7.\n */\nexport function isValidXYPoint(n: number): boolean {\n  return n >= 0 && n <= 7;\n}\n\n/**\n * Returns whether both points in an XY-coordinate is a positive integer where 0 <= arg <= 7.\n */\nexport function isValidXY(pos: Array<number>): boolean {\n  return isValidXYPoint(pos[0]) && isValidXYPoint(pos[1]);\n}\n\n/**\n * Returns whether a string is valid A1-notation.\n */\nexport function isValidA1(a1: string): boolean {\n  return a1.length === 2 && isValidXY(from_A1_to_XY(a1));\n}\n\n/**\n * Throws a TypeError if the argument is not a valid XY-coordinate point.\n * @see isValidXYPoint\n *\n * @function assertValidXYPoint\n * @throws {TypeError}\n */\nexport const assertValidXYPoint = createAssertFunction(\n  'a positive integer between 0 and 7',\n  isValidXYPoint,\n);\n\n/**\n * Throws a TypeError if the argument is not a valid XY-coordinate.\n * @see isValidXY\n *\n * @function assertValidXY\n * @throws {TypeError}\n */\nexport const assertValidXY = createAssertFunction(\n  'an array containing two positive integers between 0 and 7',\n  isValidXY,\n);\n\n/**\n * Throws a TypeError if the argument is not valid A1-notation.\n * @see isValidA1\n *\n * @function assertValidA1\n * @throws {TypeError}\n */\nexport const assertValidA1 = createAssertFunction(\n  'a valid A1-notation string',\n  isValidA1,\n);\n","import { from_A1_to_XY } from './coordinates';\nimport type { Position } from './Position';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\nimport type { Piece } from './AbstractPiece';\n\nexport class Board {\n  public game: Game;\n  public grid: Array<Array<Piece | null>>;\n\n  public constructor(game: Game) {\n    this.game = game;\n    this.grid = [];\n    let i = 0;\n    while (i < 8) {\n      this.grid.push(new Array(8).fill(null, 0, 7));\n      i++;\n    }\n  }\n\n  /**\n   * Returns the piece at the given XY-coordinates or null if no piece is found there.\n   */\n  public getPieceByXY(x: number, y: number): Piece | null {\n    return this.grid[y][x];\n  }\n\n  /**\n   * Returns the piece at the given Position or null if no piece is found there.\n   */\n  public getPieceByPosition(position: Position): Piece | null {\n    return this.getPieceByXY(position.x, position.y);\n  }\n\n  /**\n   * Returns the piece at the given A1-notation-coordinates or null if no piece is found there.\n   */\n  public getPieceByA1(a1: string): Piece | null {\n    const [x, y] = from_A1_to_XY(a1);\n    return this.getPieceByXY(x, y);\n  }\n\n  /**\n   * Sets a piece to the board.\n   */\n  public setPiece(piece: Piece): void {\n    const pos = piece.position;\n    if (pos) this.grid[pos.y][pos.x] = piece;\n  }\n\n  /**\n   * Removes a piece from the board.\n   * This method does not check legality or whether this action is part of a move in the game.\n   */\n  public removePiece(piece: Piece | null): void {\n    if (piece) {\n      const pos = piece.position;\n      if (pos) this.grid[pos.y][pos.x] = null;\n    }\n  }\n\n  /**\n   * Updates the board instance based on the information contained within a provided Move instance.\n   */\n  public registerMove(move: Move): void {\n    const from = move.from;\n    const to = move.to;\n    const piece = this.grid[from.y][from.x];\n    this.grid[to.y][to.x] = piece;\n    this.grid[from.y][from.x] = null;\n  }\n\n  /**\n   * Updates the board instance based on the information contained within a provided Move instance that is known to make\n   * out a swap (used for castling moves).\n   */\n  public registerSwap(move: Move): void {\n    const from = move.from;\n    const to = move.to;\n    const pieceFrom = this.grid[from.y][from.x];\n    const pieceTo = this.grid[to.y][to.x];\n    this.grid[to.y][to.x] = pieceFrom;\n    this.grid[from.y][from.x] = pieceTo;\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class King extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    return pos.getAllStraightAndDiagonal();\n  }\n\n  /**\n   * Returns whether a move to a target position is a castling move.\n   */\n  public isCastleMove(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    if (!targetPiece) return false;\n    // it is not necessary to check whether the taget piece is an own piece since an enemy piece will never be in the\n    // designated position without having moved, which gets checked.\n    return (\n      targetPiece.type === 'Rook' && !targetPiece.hasMoved && !this.hasMoved\n    );\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Knight extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllKnightMovePositions() : [];\n  }\n}\n","import type { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Move {\n  public piece: Piece;\n  public takes: Piece | null;\n  public from: Position;\n  public to: Position;\n\n  public constructor(piece: Piece, to: Position, takes: Piece | null = null) {\n    const pos = piece.position;\n    if (!pos) {\n      throw new Error('Cannot move a piece that is not on the board.');\n    }\n\n    this.piece = piece;\n    this.takes = takes;\n    this.from = pos.clone();\n    this.to = to.clone();\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Pawn extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const board = this.game.board;\n    const pos = this.position;\n    const res = [];\n\n    if (!pos) {\n      return [];\n    }\n\n    if (this.color === 'white') {\n      const upPos = pos.getUp();\n      if (upPos) {\n        res.push(upPos);\n      }\n\n      const upUpPos = pos.getUpUp();\n      if (upUpPos && !this.hasMoved) {\n        res.push(upUpPos);\n      }\n\n      const upLeftPos = pos.getUpLeft();\n      if (upLeftPos) {\n        const diagLeftPiece = board.getPieceByPosition(upLeftPos);\n        if (diagLeftPiece) {\n          const diagLeftPos = diagLeftPiece.position;\n          if (diagLeftPos && diagLeftPiece.color === 'black') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n\n      const upRightPos = pos.getUpRight();\n      if (upRightPos) {\n        const diagRightPiece = board.getPieceByPosition(upRightPos);\n        if (diagRightPiece) {\n          const diagLeftPos = diagRightPiece.position;\n          if (diagLeftPos && diagRightPiece.color === 'black') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n    } else {\n      const downPos = pos.getDown();\n      if (downPos) {\n        res.push(downPos);\n      }\n\n      const downDownPos = pos.getDownDown();\n      if (downDownPos && !this.hasMoved) {\n        res.push(downDownPos);\n      }\n\n      const downLeftPos = pos.getDownLeft();\n      if (downLeftPos) {\n        const diagLeftPiece = board.getPieceByPosition(downLeftPos);\n        if (diagLeftPiece) {\n          const diagLeftPos = diagLeftPiece.position;\n          if (diagLeftPos && diagLeftPiece.color === 'white') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n\n      const downRightPos = pos.getDownRight();\n      if (downRightPos) {\n        const diagRightPiece = board.getPieceByPosition(downRightPos);\n        if (diagRightPiece) {\n          const diagLeftPos = diagRightPiece.position;\n          if (diagLeftPos && diagRightPiece.color === 'white') {\n            res.push(diagLeftPos.clone());\n          }\n        }\n      }\n    }\n    return res;\n  }\n}\n","import { from_A1_to_XY, from_XY_to_A1, assertValidXY } from './coordinates';\nimport { arrClean } from './util';\n\nexport class Position {\n  public x: number;\n  public y: number;\n  /**\n   * Returns a new Position instance based on A1-notation input.\n   */\n  public static fromA1(a1: string): Position {\n    const xy = from_A1_to_XY(a1);\n    return new Position(xy[0], xy[1]);\n  }\n\n  /**\n   * @param x - a positive integer between 0 and 7 both inclusive.\n   * @param y - a positive integer between 0 and 7 both inclusive.\n   */\n  public constructor(x: number, y: number, skipValidation = false) {\n    if (!skipValidation) {\n      assertValidXY([x, y], 'x and y');\n    }\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Returns the board position in A1-notation.\n   */\n  public get A1(): string {\n    return from_XY_to_A1([this.x, this.y]);\n  }\n\n  /**\n   * Deep-equality-compares the Position instance to another Position instance.\n   */\n  public compare(position: Position): boolean {\n    return this.x === position.x && this.y === position.y;\n  }\n\n  /**\n   * Returns a clone of the instance.\n   * Out of bounds -validation is skipped.\n   */\n  public clone(): Position {\n    return new Position(this.x, this.y, true);\n  }\n\n  /**\n   * Returns the instance as a normal array.\n   */\n  public toArray(): Array<number> {\n    return [this.x, this.y];\n  }\n\n  /**\n   * Modulates the XY-position coordinate and returns a new Position instance equivalent to it, or null if that position\n   * is out of bounds of the board.\n   */\n  private getModulation(xBy: number, yBy: number): Position | null {\n    try {\n      return new Position(this.x + xBy, this.y + yBy);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 1 from the position on the board that this instance describes.\n   */\n  public getUp(): Position | null {\n    return this.getModulation(0, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 1 from the position on the board that this instance describes.\n   */\n  public getDown(): Position | null {\n    return this.getModulation(0, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved left by 1 from the position on the board that this instance describes.\n   */\n  public getLeft(): Position | null {\n    return this.getModulation(-1, 0);\n  }\n\n  /**\n   * Returns a new Position instance that is moved right by 1 from the position on the board that this instance describes.\n   */\n  public getRight(): Position | null {\n    return this.getModulation(1, 0);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 1 and left by 1 from the position on the board that this instance describes.\n   */\n  public getUpLeft(): Position | null {\n    return this.getModulation(-1, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 1 and right by 1 from the position on the board that this instance describes.\n   */\n  public getUpRight(): Position | null {\n    return this.getModulation(1, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 1 and left by 1 from the position on the board that this instance describes.\n   */\n  public getDownLeft(): Position | null {\n    return this.getModulation(-1, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 1 and right by 1 from the position on the board that this instance describes.\n   */\n  public getDownRight(): Position | null {\n    return this.getModulation(1, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 2 from the position on the board that this instance describes.\n   */\n  public getUpUp(): Position | null {\n    return this.getModulation(0, 2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 2 from the position on the board that this instance describes.\n   */\n  public getDownDown(): Position | null {\n    return this.getModulation(0, -2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 2 and left by 1 from the position on the board that this instance describes.\n   */\n  public getUpUpLeft(): Position | null {\n    return this.getModulation(-1, 2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved up by 2 and right by 1 from the position on the board that this instance describes.\n   */\n  public getUpUpRight(): Position | null {\n    return this.getModulation(1, 2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 2 and left by 1 from the position on the board that this instance describes.\n   */\n  public getDownDownLeft(): Position | null {\n    return this.getModulation(-1, -2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved down by 2 and right by 1 from the position on the board that this instance describes.\n   */\n  public getDownDownRight(): Position | null {\n    return this.getModulation(1, -2);\n  }\n\n  /**\n   * Returns a new Position instance that is moved left by 2 and up by 1 from the position on the board that this instance describes.\n   */\n  public getLeftLeftUp(): Position | null {\n    return this.getModulation(-2, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved left by 2 and up by 1 from the position on the board that this instance describes.\n   */\n  public getLeftLeftDown(): Position | null {\n    return this.getModulation(-2, -1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved right by 2 and up by 1 from the position on the board that this instance describes.\n   */\n  public getRightRightUp(): Position | null {\n    return this.getModulation(2, 1);\n  }\n\n  /**\n   * Returns a new Position instance that is moved right by 2 and down by 1 from the position on the board that this instance describes.\n   */\n  public getRightRightDown(): Position | null {\n    return this.getModulation(2, -1);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all straight (horizontal and vertical) directions.\n   */\n  public getAllStraight(): Array<Position> {\n    return arrClean([\n      this.getUp(),\n      this.getDown(),\n      this.getLeft(),\n      this.getRight(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all diagonal directions.\n   */\n  public getAllDiagonal(): Array<Position> {\n    return arrClean([\n      this.getUpLeft(),\n      this.getUpRight(),\n      this.getDownLeft(),\n      this.getDownRight(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by 1 in all straight (horizontal and vertical) and diagonal directions.\n   */\n  public getAllStraightAndDiagonal(): Array<Position> {\n    return [...this.getAllStraight(), ...this.getAllDiagonal()];\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved one time equivalent of all legal knight-piece moves.\n   */\n  public getAllKnightMovePositions(): Array<Position> {\n    return arrClean([\n      this.getUpUpLeft(),\n      this.getUpUpRight(),\n      this.getDownDownLeft(),\n      this.getDownDownRight(),\n      this.getLeftLeftUp(),\n      this.getLeftLeftDown(),\n      this.getRightRightUp(),\n      this.getRightRightDown(),\n    ]);\n  }\n\n  /**\n   * Returns an array of new Position instances that are moved by a provided modulator function recursively until the\n   * modulator's returned Position instance becomes out of bounds of the board.\n   */\n  private getRecursive(modulator: () => Position | null): Array<Position> {\n    const res = [];\n    let pos: Position | null;\n    pos = this;\n    while ((pos = modulator.call(pos))) {\n      res.push(pos);\n    }\n    return res;\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getUpRecursive(): Array<Position> {\n    return this.getRecursive(this.getUp);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getDownRecursive(): Array<Position> {\n    return this.getRecursive(this.getDown);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving left by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving right by 1 from the position on\n   * the board that this instance describes until the resulting Position instance becomes out of bounds of the board.\n   */\n  public getRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 and left by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getUpLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getUpLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving up by 1 and right by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getUpRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getUpRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 and left by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getDownLeftRecursive(): Array<Position> {\n    return this.getRecursive(this.getDownLeft);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving down by 1 and right by 1 from the\n   * position on the board that this instance describes until the resulting Position instance becomes out of bounds of\n   * the board.\n   */\n  public getDownRightRecursive(): Array<Position> {\n    return this.getRecursive(this.getDownRight);\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all straight\n   * (horizontal and vertical) directions from the position on the board that this instance describes until the\n   * resulting Position instance becomes out of bounds of the board.\n   */\n  public getAllStraightRecursive(): Array<Array<Position>> {\n    return [\n      this.getUpRecursive(),\n      this.getDownRecursive(),\n      this.getLeftRecursive(),\n      this.getRightRecursive(),\n    ];\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all diagonal\n   * directions. from the position on the board that this instance describes until the resulting Position instance\n   * becomes out of bounds of the board.\n   */\n  public getAllDiagonalRecursive(): Array<Array<Position>> {\n    return [\n      this.getUpLeftRecursive(),\n      this.getUpRightRecursive(),\n      this.getDownLeftRecursive(),\n      this.getDownRightRecursive(),\n    ];\n  }\n\n  /**\n   * Returns an array of new Position instances that are the result of recursively moving by 1 in all straight\n   * (horizontal and vertical) and diagonal directions from the position on the board that this instance describes until\n   * the resulting Position instance becomes out of bounds of the board.\n   */\n  public getAllStraightAndDiagonalRecursive(): Array<Array<Position>> {\n    return [\n      ...this.getAllStraightRecursive(),\n      ...this.getAllDiagonalRecursive(),\n    ];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Queen extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    return pos ? pos.getAllStraightAndDiagonalRecursive() : [];\n  }\n}\n","import { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Rook extends Piece {\n  /**\n   * Returns a Position array with all piece-specific move positions within bounds of the board.\n   */\n  protected getMovePositionsWithinBounds(): Array<Position | Array<Position>> {\n    const pos = this.position;\n    if (!pos) return [];\n    return pos.getAllStraightRecursive();\n  }\n\n  /**\n   * Returns whether a move to a target position is a castling move.\n   */\n  public isCastleMove(target: Position): boolean {\n    const targetPiece = this.game.board.getPieceByPosition(target);\n    if (!targetPiece) return false;\n    // it is not necessary to check whether the taget piece is an own piece since an enemy piece will never be in the\n    // designated position without having moved, which gets checked.\n    return (\n      targetPiece.type === 'King' && !targetPiece.hasMoved && !this.hasMoved\n    );\n  }\n}\n","import { Position } from './Position';\nimport { Pawn } from './Pawn';\nimport { Knight } from './Knight';\nimport { Bishop } from './Bishop';\nimport { Queen } from './Queen';\nimport { Rook } from './Rook';\nimport { King } from './King';\nimport type { Piece } from './AbstractPiece';\nimport type { Game } from './Game';\nimport type { Move } from './Move';\n\nexport class Player {\n  public game: Game;\n  public color: string;\n  public pieces: Piece[];\n\n  public constructor(game: Game, color: string) {\n    this.game = game;\n    this.color = color;\n\n    let row1: string, row2: string;\n    if (color === 'white') {\n      row1 = '1';\n      row2 = '2';\n    } else if (color === 'black') {\n      row1 = '8';\n      row2 = '7';\n    } else {\n      throw new Error('Invalid color');\n    }\n\n    this.pieces = [\n      new King(this, 0, Position.fromA1('E' + row1)),\n      new Queen(this, 1, Position.fromA1('D' + row1)),\n      new Bishop(this, 2, Position.fromA1('C' + row1)),\n      new Bishop(this, 3, Position.fromA1('F' + row1)),\n      new Knight(this, 4, Position.fromA1('B' + row1)),\n      new Knight(this, 5, Position.fromA1('G' + row1)),\n      new Rook(this, 6, Position.fromA1('A' + row1)),\n      new Rook(this, 7, Position.fromA1('H' + row1)),\n      new Pawn(this, 8, Position.fromA1('A' + row2)),\n      new Pawn(this, 9, Position.fromA1('B' + row2)),\n      new Pawn(this, 10, Position.fromA1('C' + row2)),\n      new Pawn(this, 11, Position.fromA1('D' + row2)),\n      new Pawn(this, 12, Position.fromA1('E' + row2)),\n      new Pawn(this, 13, Position.fromA1('F' + row2)),\n      new Pawn(this, 14, Position.fromA1('G' + row2)),\n      new Pawn(this, 15, Position.fromA1('H' + row2)),\n    ];\n  }\n\n  /**\n   * Returns an array of Move instances that describe moves of this Piece.\n   */\n  public get moves(): Move[] {\n    return this.game.moves.filter((move) => {\n      return move.piece.player === this;\n    });\n  }\n}\n","import { Board } from './Board';\nimport { Player } from './Player';\nimport { Move } from './Move';\nimport { isEven } from './util';\nimport type { Piece } from './AbstractPiece';\nimport type { Position } from './Position';\n\nexport class Game {\n  public board: Board;\n  public white: Player;\n  public black: Player;\n  public moves: Array<Move>;\n\n  public constructor() {\n    this.board = new Board(this);\n    this.white = new Player(this, 'white');\n    this.black = new Player(this, 'black');\n    this.moves = [];\n  }\n\n  /**\n   * Returns whether it is white player's turn to move.\n   */\n  public get isWhitesTurnToMove(): boolean {\n    return isEven(this.moves.length);\n  }\n\n  /**\n   * Returns whether it is black player's turn to move.\n   */\n  public get isBlacksTurnToMove(): boolean {\n    return !isEven(this.moves.length);\n  }\n\n  /**\n   * Returns whether it is black player's turn to move.\n   */\n  public get activePlayer(): Player {\n    return this.isWhitesTurnToMove ? this.white : this.black;\n  }\n\n  /**\n   * Iterate each piece on the board.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   */\n  public forEachPiece(f: (piece?: Piece) => boolean | void): void {\n    const w = this.white.pieces;\n    const b = this.black.pieces;\n    for (let i = 0; i < 16; i++) {\n      if (f(w[i]) === true || f(b[i]) === true) {\n        return;\n      }\n    }\n  }\n\n  /**\n   * Iterate each white piece on the board.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   */\n  public forEachWhitePiece(f: (piece?: Piece) => boolean | void): void {\n    const w = this.white.pieces;\n    for (let i = 0; i < 16; i++) {\n      if (f(w[i]) === true) {\n        return;\n      }\n    }\n  }\n\n  /**\n   * Iterate each black piece on the board.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   */\n  public forEachBlackPiece(f: (piece?: Piece) => boolean | void): void {\n    const b = this.black.pieces;\n    for (let i = 0; i < 16; i++) {\n      if (f(b[i]) === true) {\n        return;\n      }\n    }\n  }\n\n  /**\n   * Iterate each piece on the board belonging to the player whose turn it is to move.\n   *\n   * @param f - a callback function to invoke for each Piece. If it returns true, iteration ends.\n   */\n  public forEachActivePlayerPiece(f: (piece?: Piece) => boolean | void): void {\n    return this.isWhitesTurnToMove\n      ? this.forEachWhitePiece(f)\n      : this.forEachBlackPiece(f);\n  }\n\n  /**\n   * Moves a piece on the board.\n   * If the target position already has a piece belonging to the opposing player, it is removed from the board.\n   *\n   * @param piece - The Piece to move.\n   * @param position - The Position to move to.\n   * @param skipValidation - skips validation of the move's legality according to the rules of the game. This is used\n   * internally for performance reasons when cloning a game, repeating the moves that were previously validated.\n   *\n   * @throws {Error} on invalid move, unless `skipValidation` is true.\n   */\n  public makeMove(\n    piece: Piece,\n    position: Position,\n    skipValidation?: boolean,\n  ): void {\n    if (skipValidation || piece.isValidMove(position)) {\n      const targetPiece = piece.game.board.getPieceByPosition(position);\n      let move: Move;\n      if (piece.isCastleMove(position)) {\n        move = new Move(piece, position);\n        this.board.registerSwap(move);\n        if (targetPiece) {\n          targetPiece.registerMove(new Move(targetPiece, move.from));\n        }\n      } else {\n        move = new Move(piece, position, targetPiece);\n        this.board.registerMove(move);\n        if (targetPiece) {\n          targetPiece.remove();\n        }\n      }\n      piece.registerMove(move);\n      this.moves.push(move);\n    } else {\n      throw new Error('Invalid move.');\n    }\n  }\n\n  /**\n   * Returns a deep clone of the game instance.\n   */\n  public clone(): Game {\n    const game = new Game();\n    const w = game.white.pieces;\n    const b = game.black.pieces;\n    const moves = this.moves;\n    const l = moves.length;\n    for (let piece, i = 0; i < l; i++) {\n      piece = moves[i].piece;\n      game.makeMove(\n        (piece.color === 'white' ? w : b)[piece.index],\n        moves[i].to.clone(),\n        true,\n      );\n    }\n    return game;\n  }\n}\n"],"names":["player","index","position","this","moveCount","game","board","setPiece","Object","Piece","constructor","name","color","moves","filter","move","piece","_this","to","clone","target","targetPiece","getPieceByPosition","activePlayer","f","isOwnTurn","positions","getMovePositionsWithinBounds","i","length","item","Array","isArray","j","isMoveTargetOwnPiece","_target","isCastleMove","res","forEachValidMovePosition","compare","__extends","Bishop","pos","getAllDiagonalRecursive","arrClean","arr","l","push","createAssertFunction","expectedToBe","validate","arg","TypeError","defineProperty","value","replace","isEven","n","A_CHAR_CODE","charCodeAt","from_X_to_A","x","String","fromCharCode","from_Y_to_1","y","toString","from_A_to_X","a","toUpperCase","from_1_to_Y","Number","charAt","from_XY_to_A1","from_A1_to_XY","a1","isValidXYPoint","isValidXY","isValidA1","assertValidXYPoint","assertValidXY","assertValidA1","grid","fill","Board","getPieceByXY","_a","from","pieceFrom","pieceTo","King","getAllStraightAndDiagonal","type","hasMoved","Knight","getAllKnightMovePositions","takes","Error","Pawn","upPos","getUp","upUpPos","getUpUp","upLeftPos","getUpLeft","diagLeftPiece","diagLeftPos","upRightPos","getUpRight","diagRightPiece","downPos","getDown","downDownPos","getDownDown","downLeftPos","getDownLeft","downRightPos","getDownRight","skipValidation","Position","xy","xBy","yBy","e","getModulation","getLeft","getRight","getAllStraight","getAllDiagonal","getUpUpLeft","getUpUpRight","getDownDownLeft","getDownDownRight","getLeftLeftUp","getLeftLeftDown","getRightRightUp","getRightRightDown","modulator","call","getRecursive","getUpRecursive","getDownRecursive","getLeftRecursive","getRightRecursive","getUpLeftRecursive","getUpRightRecursive","getDownLeftRecursive","getDownRightRecursive","getAllStraightRecursive","Queen","getAllStraightAndDiagonalRecursive","Rook","row1","row2","pieces","fromA1","Player","white","black","Game","isWhitesTurnToMove","w","b","forEachWhitePiece","forEachBlackPiece","isValidMove","Move","registerSwap","registerMove","remove","makeMove"],"mappings":"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"}